<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:maps="com.google.maps.*" 	
		xmlns:mx="library://ns.adobe.com/flex/mx" viewActivate="onActivate(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:model="model.*" 
		backgroundColor="#FFFFFF"  xmlns:components="components.*"  viewDeactivate="onViewDeactivate();">
	<s:titleContent>
		<s:BorderContainer y="21" width="100%"  height="48" backgroundAlpha="1"
						   backgroundColor="#39a994" borderAlpha="0" borderVisible="false"
						   dropShadowVisible="false" cornerRadius="25">
			<s:TextInput   fontFamily="Arial"  keyUp="press(event);"  styleName="textsize0"    color="#FFFFFF" width="100%" 
						   id="key"  top="1"  height="100%" borderVisible="false" fontWeight="normal"
						   maxChars="20" prompt="Search Restaurants"
						   returnKeyLabel="search"/>
		</s:BorderContainer>
	</s:titleContent>
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.Config;
			import com.mapquest.LatLng;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.controls.shadymeadow.SMZoomControl;
			import com.mapquest.tilemap.pois.*;
			
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Bitmap;
			import flash.display.Sprite;
			import flash.events.GeolocationEvent;
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			[Bindable]
			public var alphatitle:String = "Home";
			[Bindable]
			public var emailGo:String = "";
			[Bindable]
			public var nameGo:String = "";
			protected var g:Geolocation = new Geolocation();    
			[Bindable]
			public var listData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mylat:Number = 53.59221;
			[Bindable]
			public var mylong:Number = -113.54009;
			[Bindable]
			public var radiusOptions:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mysearch:String = "";
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var reverse:Boolean = false;
			private var _sc:ShapeCollection;
			[Bindable]
			public var locatoinidGo:Number = -1;
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var busy:Boolean = true;
			[Bindable]
			public var mapUrl:String = "https://scoutcard.ca/php/locations/mobilemap.php";
			[Bindable]
			public var totalurl:String = mapUrl+'?mylat='+mylat+'&mylong='+mylong+'&search='+"";//key.text;
			public var maintimer:Timer = new Timer(5000,0);
			[Bindable]
			public var currentselectmode:Number = 1;
			[Bindable]
			public var homeitems:ArrayCollection = new ArrayCollection(
				[{label:"Restaurants",img:"../assets/backgrounds/resback.jpg",colorid:"0x50bcb6"},
					{label:"Specials",img:"../assets/backgrounds/mapback.jpg",colorid:"0xef4056"},
					{label:"Restrictions",img:"../assets/backgrounds/restback.jpg",colorid:"0xfcb643"}
				]);
			
			public function onActivate(event:Event):void
			{
				try{
					if (Geolocation.isSupported)
					{
						g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
						addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
					}
					else
					{	
						mylat = 53.55921;
						mylong = -113.54009;
					}		
				}
				catch(e:Error){
					mylat = 53.59221;
					mylong = -113.54009;
				}
				busy = true;
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
					stmt.execute();
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (resData.length != 0){
						emailGo = resData[0].email;
					}
					else {
						emailGo = "none";
					}	
				}
				catch(e:Error) {
					emailGo = "none";
				}	
				maintimer = new Timer(5000,0);
				maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
				maintimer.start();
				getLocations.send();
				//this.uic.width = this.width;
				this.parentApplication.map.size = new Size(this.width,this.height/4);
				if (this.parentApplication.map) {	
					if (!this.uic.getChildByName("myMap")) this.uic.addChild(this.parentApplication.map);
				}
				else {
					if (!this.parentApplication.map) this.parentApplication.makeMap();
				
					this.uic.addChild(this.parentApplication.map);
				}
				
				if (!this.parentApplication.gpsTried) this.parentApplication.initGPS();
				
				if (this.parentApplication.gpsTried && this.parentApplication.gpsIsSupported) {
					this.parentApplication.setGpsLatLng();
				}
				else {
				}	
				//
				
			}
			public function aftertimer(ev:TimerEvent):void {
				
				if (listData.length <= 0){
					busy = true;
					getLocations.cancel();
					listData = new ArrayCollection();
					maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
					maintimer.stop();
					maintimer = new Timer(5000,0);
					maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
					maintimer.start();
					getLocations.send();
				}
			}
			
			
			public function afterGetLocations(event:ResultEvent):void
			{
				busy = false;
				listData = new ArrayCollection();
				try{			
					listData = event.result[0].ress.res;		
				}
				catch(e:Error){
					try{
						
						listData.addItem(event.result[0].ress.res);
					}
					catch(e:Error){
					}
				}
				for (var i:uint=  0; i < listData.length; i++){
					listData[i].distance = Number(getDistance(mylat,mylong,listData[i].lat,listData[i].longa));
				}
				
				var dataSortField:SortField = new SortField();
				dataSortField.name = "distance";
				dataSortField.numeric = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				listData.sort = numericDataSort;
				listData.refresh();
				this.parentApplication.removeShapesFromMap();
				this._sc = new ShapeCollection();
				this._sc.name = "searchShapeCollection";
				for (var i:uint = 0; i < listData.length; i++){
					var p:Poi = new Poi(new LatLng(0,0));
					p.infoWindowTitleText = listData[i].business_name;
					p.latLng = LatLng(new LatLng(listData[i].lat,listData[i].longa))
					p.infoContent = "Address: " + listData[i].business_address1+", "+listData[i].business_city+", "+listData[i].business_locality+", "+listData[i].business_postalcode;
					if (this.parentApplication.applicationDPI >= 240) {
						var io:PinMapIcon = (p.icon as PinMapIcon);
						p.icon = io;
						(p.icon as PinMapIcon).gradientBaseColors = [0X000000, 0x0cb8e9];
					}
					this._sc.add(p);	
				}
				this.parentApplication.map.addShapeCollection(this._sc);
				this.parentApplication.map.bestFit(false,2,12);	
				this.parentApplication.map.size = new Size(this.width,this.height/4);
			} 
			public function press(event:KeyboardEvent):void {
				searchClick();
			}
			public function searchClick():void
			{
				listData.filterFunction = filterCompleted;
				listData.refresh();
				storeList.dataProvider = listData;
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.business_description.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.categoryname.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			private function onViewDeactivate():void {
				this.parentApplication.map.infoWindow.hide();
				this.parentApplication.disableTraffic();
			}
			public function storeListClick():void {	
				if (storeList.selectedIndex != -1){
					navigator.pushView(StoresDescription, listData[storeList.selectedIndex]);	
				}
			}
			
			private function returnall(item:Object):Boolean{
				return true;
			}
			protected function onUpdate(event:GeolocationEvent):void
			{
				mylat = event.latitude;
				mylong = event.longitude;	
				for (var i:uint=  0; i < listData.length; i++){
					listData[i].distance = Number(getDistance(mylat,mylong,listData[i].lat,listData[i].longa));
				}
				
				var dataSortField:SortField = new SortField();
				dataSortField.name = "distance";
				dataSortField.numeric = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				listData.sort = numericDataSort;
				listData.refresh();
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];				
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function goToMap():void {
				navigator.pushView(StoresMapSingle,
					{mapUrl:this.mapUrl,mylat:this.mylat,mylong:this.mylong,emailGo:emailGo});
			}
			public function goback(ev:MouseEvent):void {
				navigator.popView();
			}
			public function degreesToRadians(degrees:Number):Number {
				
				return degrees * Math.PI / 180;
				
			}
			
			public function radiansToDegrees(radians:Number):Number{
				
				return radians * 180 / Math.PI;	
			}
			
			public function getDistance(lat1:Number, lon1:Number, lat2:Number, lon2:Number):String {
				var R1:Number = 6371; // km
				var dLat:Number = degreesToRadians(lat2-lat1);
				var dLon:Number = degreesToRadians(lon2-lon1);
				var lat1:Number = degreesToRadians(lat1);
				var lat2:Number = degreesToRadians(lat2);
				
				var a:Number = Math.sin(dLat/2) * Math.sin(dLat/2) +
					Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
				var c:Number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
				var d:Number = R1 * c;
				return d.toFixed(2);
			}
		
			public function usermenuclick():void {
				navigator.pushView(AccountSettings);
			}
			public function logout():void {
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update localuser set active = 'no' where email = '"+emailGo+"'";
					stmt.execute();
					emailGo = "";
					nameGo = "";
					var saveManager:PersistenceManager = new PersistenceManager();
					saveManager.setProperty("useremail", "ERRORBADERRORBAD");
					navigator.pushView(Login);
				}
				catch(e:Error){
					navigator.pushView(Login);
				}
			}
			public function goselect(u:uint):void {
				
				var fadein:Fade = new Fade();
				fadein.alphaFrom = 0;
				fadein.alphaTo = 1;
				fadein.duration = 200;
				
				var fadeout:Fade = new Fade();
				fadeout.alphaFrom = 1;
				fadeout.alphaTo = 0;
				fadeout.duration = 200;
				
				if ((currentselectmode == 1)&&(currentselectmode != u)){
					fadeout.targets = [select1,selectview1];
				}
				else if ((currentselectmode == 2)&&(currentselectmode != u)){
					fadeout.targets = [select2,selectview2];
				}
				else if ((currentselectmode == 3)&&(currentselectmode != u)){
					fadeout.targets = [select3,selectview3];
				}
				else if ((currentselectmode == 4)&&(currentselectmode != u)){
					fadeout.targets = [select4,selectview4];
				}
				
				
				
				if ((u == 1)&&(currentselectmode != u)){
					fadein.targets = [select1,selectview1];
				}
				else if ((u == 2)&&(currentselectmode != u)){
					fadein.targets = [select2,selectview2];
				}
				else if ((u == 3)&&(currentselectmode != u)){
					fadein.targets = [select3,selectview3];
				}
				else if ((u == 4)&&(currentselectmode != u)){
					fadein.targets = [select4,selectview4];
				}
					
				if (currentselectmode != u){
					fadein.play();
					fadeout.play();
				}
				
				currentselectmode = u;
			
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getLocations" method="GET" resultFormat="array"
					   url="http://mymenuapp.ca/php/locations/getLocationsMobile2.php"
					   result="afterGetLocations(event)" >
		</s:HTTPService>
	</fx:Declarations>
	<s:VGroup  height="100%" gap="0" width="100%" horizontalAlign="center" verticalAlign="top">
		<s:BorderContainer borderAlpha="0"  backgroundColor="#8eddce" backgroundAlpha="1" width="100%" height="75">
			<s:Group horizontalCenter="0" verticalCenter="0"
					 width="{filterbackimg.width}" height="{filterbackimg.height}">
				<s:Image  id="filterbackimg" x="0" y="0" source="assets/filterback.png"/>
				<s:Image  id="select1"  click="goselect(1);" x="0" alpha="1" source="assets/filtertab.png" verticalCenter="0"/>
				<s:Image  id="select2" click="goselect(2);" x="154" alpha="0" source="assets/filtertab.png" verticalCenter="0"/>
				<s:Image  id="select3" click="goselect(3);" x="304" alpha="0" source="assets/filtertab.png" verticalCenter="0"/>
				<s:Image id="select4" x="449" width="130" alpha="0" click="goselect(4);"
						 scaleMode="stretch" source="assets/filtertab.png" verticalCenter="0"/>
				<s:HGroup width="100%" mouseEnabled="false" mouseEnabledWhereTransparent="false"
						  height="{filterbackimg.height}"  horizontalAlign="center" gap="75" horizontalCenter="0"
						  paddingLeft="10" verticalAlign="middle" verticalCenter="0">
					<s:Label text="Nearby" mouseEnabled="false"   styleName="textsize0" color="#FFFFFF" />
					<s:Label text="Cuisine" mouseEnabled="false"  styleName="textsize0" color="#FFFFFF" />
					<s:Label text="Rating" mouseEnabled="false"  styleName="textsize0" color="#FFFFFF" />
					<s:Label text="Price" mouseEnabled="false"  styleName="textsize0" color="#FFFFFF" />
				</s:HGroup>
			</s:Group>
		</s:BorderContainer>
		<s:BorderContainer borderAlpha="0"  backgroundColor="#f2f2f2" backgroundAlpha="1" width="100%" height="75">
			<s:Group id="selectview1"  alpha="1" height="100%" width="100%">
				<s:Label left="29" color="#4d4d4d" styleName="textsize0" text="Near" verticalCenter="0"/>
				<s:Label left="90" color="#4d4d4d" fontWeight="bold" styleName="textsize1"
						 text="Current Location" verticalCenter="0"/>
			</s:Group>
			<s:Group id="selectview2"  alpha="0" height="100%" width="100%">
			</s:Group>
			<s:Group id="selectview3"  alpha="0" height="100%" width="100%">
			</s:Group>
			<s:Group id="selectview4"  alpha="0" height="100%" width="100%">
			</s:Group>
		</s:BorderContainer>
		<mx:UIComponent id="uic" left="0" width="100%" height="{this.height/4}" x="0" y="0"/>
		<s:List width="100%" horizontalCenter="0" top="0" height="100%" bottom="0" 
				alternatingItemColors="[0xFFFFFF,0xEEEEEE ]"
				id="storeList" labelField="name"  horizontalScrollPolicy="off" 
				dataProvider="{listData}" itemRenderer="components.storeResult"
				selectedIndex="1" click="storeListClick();" >
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify" 
								  gap="0"/>
			</s:layout>
		</s:List>
		
	</s:VGroup>
</s:View>