<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
  xmlns:s="library://ns.adobe.com/flex/spark"						
  runtimeDPIProvider="com.renaun.mobile.dpi.CustomDPIProvider"
  creationComplete="creationcomplete(event)"
  preloader="com.renaun.caltrain.components.MultiDPISplashScreen"
  initialize="initz(event)" 
  firstView="views.Signin"
  contentBackgroundAlpha="1"
  splashScreenScaleMode="none"
  contentBackgroundColor="#0aaae5"
  backgroundColor="#ffffff"
  frameRate="120"
  persistNavigatorState="true" >
	<fx:Style source="./main.css"/>
	<fx:Script>
		<![CDATA[
			import com.milkmangames.nativeextensions.*;
			import com.milkmangames.nativeextensions.events.*;
			
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.BusyIndicator;
			import spark.components.ButtonBar;
			import spark.components.Group;
			import spark.components.View;
			import spark.components.ViewNavigator;
			import spark.effects.Resize;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			import spark.transitions.CrossFadeViewTransition;
			
			import views.Home;
			import views.Loyalty;
			import views.Signin;
			import views.Stores;
			public static const FACEBOOK_APP_ID:String="1424621771149692";
			[Bindable]
			public var VERSIONID:Number = 6;
			public var crosstrans:CrossFadeViewTransition = new CrossFadeViewTransition(); 
			protected var sqlConnection:SQLConnection;
			public var resData:ArrayCollection = new ArrayCollection();

			public function loadStuff(r:ArrayCollection,mylat:Number = 53.55921, mylong:Number = -113.54009):void {
				if (r.length != 0){
					if (this.navigator.firstView == null){
						if (this.navigator.activeView == null){
							this.navigator.pushView(Home,null,null,crosstrans);
						}
					}
				}
				else {
					if (this.navigator.firstView == null){
						if (this.navigator.activeView == null){
							this.navigator.pushView(Signin,null,null,crosstrans);
						}
					}
				}
			}
			public function logout():void {
				this.navigator.pushView(Signin);
			}
			public function verifyDataTablesViaVersion():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS versionhistory (version varchar(255))";
				stmt.execute();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT version from versionhistory";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				if (resData.length != 0){
					var versiontocheck:String = resData[0].version;
					if (versiontocheck != VERSIONID.toString()){
						dropalldatatables();
					}
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update versionhistory set version = ('"+VERSIONID.toString()+"')";
					stmt.execute();
				}
				else {
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "insert into versionhistory values ('"+VERSIONID.toString()+"')";
					stmt.execute();
					dropalldatatables();
				}
			}
			public function dropalldatatables():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE merchusers";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE localuser";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
			}
			protected function onActivate(event:Event):void
 			{
				stage.frameRate=120; 
			}
			protected function onDeactivate(event:Event):void 
			{
				stage.frameRate=2;
				
			}
			protected function onError(e:UncaughtErrorEvent):void
			{
    			//e.preventDefault();
			}
			
			public function initz(event:FlexEvent):void
			{
				
			
				
				
				GoViral.create();
				GoViral.goViral.initFacebook(FACEBOOK_APP_ID, "");
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_IN,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_OUT,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_CANCELED,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_FAILED,onFacebookEvent);
				
				
				if(GoViral.goViral.isFacebookAuthenticated())
				{
					this.navigator.pushView(Home,null,null,crosstrans);
					
				}
				
				
				
				
				try{
					NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
					NativeApplication.nativeApplication.autoExit = false;
					NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
					NativeApplication.nativeApplication.executeInBackground = true;
				}
				catch(e:Error){
					
				}
				
			}
			private function onFacebookEvent(e:GVFacebookEvent):void
			{
				var s:String = "";
				switch(e.type)
				{
					case GVFacebookEvent.FB_LOGGED_IN:
						this.navigator.pushView(Home,null,null,crosstrans);
						s = "Logged in to facebook:"+GoViral.VERSION+
						",denied: ["+GoViral.goViral.getDeclinedFacebookPermissions()+
						"], profile permission?"+GoViral.goViral.isFacebookPermissionGranted("public_profile");
						break;
					case GVFacebookEvent.FB_LOGGED_OUT:
						s = "Logged out of facebook.";
						break;
					case GVFacebookEvent.FB_LOGIN_CANCELED:
						s = "Canceled facebook login.";
						break;
					case GVFacebookEvent.FB_LOGIN_FAILED:
						s = "Login failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId;
						break;
					case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_FAILED:
					case GVFacebookEvent.FB_READ_PERMISSIONS_FAILED:
						s =  "perms failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId+","+e.permissions;
						break;
					case GVFacebookEvent.FB_READ_PERMISSIONS_UPDATED:
					case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_UPDATED:
						s = "Perms updated:"+e.permissions;
				}
			}
			public var stillnotin:Boolean = true;
			public function facebookloging():void {
				if(!GoViral.goViral.isFacebookAuthenticated())
				{
					GoViral.goViral.authenticateWithFacebook("public_profile");
				}
				else {
					this.navigator.pushView(Home,null,null,crosstrans);
				}
			}
			public function refresh(email:String):void {
				this.navigator.pushView(Home);
			}
			protected function creationcomplete(event:FlexEvent):void
			{
				verifyDataTablesViaVersion();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
				stmt.execute();
				resData = new ArrayCollection(stmt.getResult().data);				
				loadStuff(resData);
			}
			
		]]>
	</fx:Script>
</s:ViewNavigatorApplication>