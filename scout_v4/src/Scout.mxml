<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"						
								  runtimeDPIProvider="com.renaun.mobile.dpi.CustomDPIProvider"
								  applicationComplete="onApplicationComplete()"
								  contentBackgroundAlpha="1"
								  contentBackgroundColor="#0aaae5"
								  backgroundColor="#ffffff"
								  preloader="com.renaun.caltrain.components.MultiDPISplashScreen"
								  splashScreenScaleMode="stretch"
								  frameRate="120"
								  splashScreenMinimumDisplayTime="1000"
								  persistNavigatorState="true"  
								  navigatorStateSaving="onPersisting(event)"
								  navigatorStateLoading="onRestoring(event)" >
	<fx:Style source="./main.css"/>
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.sensors.Geolocation;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import spark.components.BusyIndicator;
			import spark.components.ButtonBar;
			import spark.components.Group;
			import spark.components.View;
			import spark.components.ViewNavigator;
			import spark.effects.Resize;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			import spark.transitions.CrossFadeViewTransition;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.ViewTransitionBase;
			import spark.transitions.ZoomViewTransition;
			import views.AccountHome;
			import views.Login;
			import views.LoyaltyHome;
			import views.StoresHome;
			[Bindable]
			public var gps:Geolocation;
			public var gpsIsSupported:Boolean = false;
			public var trafficEnabled:Boolean = false;
			public var gpsTried:Boolean = false;
			public var imgSize:int;
			[Bindable]
			public var assetPath:String;
			[Bindable]
			public var VERSIONID:Number = 5;
			public var biBusyIndicator:BusyIndicator;		
			public var searchLocation:String;
			public var searchTerm:String;
			public var directionsLocations:Array;
			public var crosstrans:CrossFadeViewTransition = new CrossFadeViewTransition(); 
			protected var sqlConnection:SQLConnection;
			protected function tabbedmobileapplication1_applicationCompleteHandler(event:FlexEvent):void {
				trace(numElements);
			}
			public var resData:ArrayCollection = new ArrayCollection();
			protected function onApplicationComplete():void
			{
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				this.addEventListener(ResizeEvent.RESIZE,this.onResize,false,0,true);
				verifyDataTablesViaVersion();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
				stmt.execute();
				resData = new ArrayCollection(stmt.getResult().data);
				var loadManager:PersistenceManager = new PersistenceManager();
				loadStuff(resData);

			}
			protected function onUpdate(event:GeolocationEvent):void
			{
				loadStuff(resData,event.latitude,event.longitude);
			}
			public function loadStuff(r:ArrayCollection,mylat:Number = 53.55921, mylong:Number = -113.54009):void {
				if (r.length != 0){
					if (navigator.firstView == null){
						if (navigator.activeView == null){
					this.navigator.pushView(AccountHome,null,null,crosstrans);
						}
					}
				}
				else {
					this.navigator.pushView(Login,null,null,crosstrans);
					
				}
			}
			public function refresh(email:String):void {
				this.navigator.pushView(AccountHome);
			}
			public function logout():void {
				this.navigator.pushView(Login);
			}
			
			
			public function verifyDataTablesViaVersion():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS versionhistory (version varchar(255))";
				stmt.execute();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT version from versionhistory";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				if (resData.length != 0){
					var versiontocheck:String = resData[0].version;
					if (versiontocheck != VERSIONID.toString()){
						dropalldatatables();
					}
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update versionhistory set version = ('"+VERSIONID.toString()+"')";
					stmt.execute();
				}
				else {
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "insert into versionhistory values ('"+VERSIONID.toString()+"')";
					stmt.execute();
					dropalldatatables();
				}
			}
			public function dropalldatatables():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE merchusers";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
	
				catch(e:Error){}
				
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE localuser";
				try{
					stmt.execute();	
				}
				catch(e:Error){}

			}

			/*
			function to resize the map when the app resizes
			*/
			private function onResize(e:ResizeEvent):void {
				//resize the map when the app does
			}
			
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
 			{
				trace("Handling application activate event");
				stage.frameRate=60; 
			}
			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				//System.gc();
				stage.frameRate=2;
			}
			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{	
				trace("Handling invoke event");
			}
			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}
			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}
			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
			}
		]]>
	</fx:Script>
</s:ViewNavigatorApplication>