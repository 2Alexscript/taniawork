<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		menuKeyPressed="navigator.popView()"
		backKeyPressed="navigator.popView()"
		xmlns:s="library://ns.adobe.com/flex/spark"
		viewActivate="view1_activateHandler(event)" 
		creationComplete="init(event)"
		title="Stores"  backgroundAlpha="1">
	<s:navigationContent>
		<s:CalloutButton id="filterBTN" enabled="{internetPopup.visible == false}" label="Filter" horizontalPosition="after" 
						 verticalPosition="after" calloutDestructionPolicy="never">
			<s:calloutLayout>
				<s:VerticalLayout paddingTop="2" paddingBottom="2" paddingLeft="2" 
								  paddingRight="2" horizontalAlign="center" gap="3"/>
			</s:calloutLayout>
			<s:calloutContent>
				<s:Button id="filter1" visible="false" label="Total" enabled="true" fontSize="13" width="100" click="filterPress(0);"/>
				<s:Button id="filter2" visible="false" label="Day" enabled="true"  fontSize="13" width="100" click="filterPress(1);"/>
				<s:Button id="filter3" visible="false" label="Location" enabled="true" fontSize="13"  width="100" click="filterPress(2);"/>
			</s:calloutContent>
		</s:CalloutButton>
	</s:navigationContent>
	<s:titleContent>	
		<s:BorderContainer backgroundAlpha="0" borderAlpha="0"   width="100%" height="100%">
			<s:Image source="assets/map-list1.png" enabled="{internetPopup.visible == false}"  mouseUp="togUp(event)" mouseDown="togDown(event)" 
					 id="maplisttog"
					 verticalCenter="0"  click="viewChoice(event)" height="27" horizontalCenter="0"/>
			
		</s:BorderContainer>
		  
	</s:titleContent>
	<s:actionContent>	
		<s:CalloutButton id="sortBTN" enabled="{internetPopup.visible == false}" label="Sort" horizontalPosition="before" 
						 verticalPosition="after" calloutDestructionPolicy="never">
			<s:calloutLayout>
				<s:VerticalLayout paddingTop="2" paddingBottom="2" paddingLeft="2" 
								  paddingRight="2" horizontalAlign="center" gap="3"/>
			</s:calloutLayout>
			<s:calloutContent>
				<s:Button id="sort1" label="Name" enabled="true" fontSize="13" width="100" click="sortPress(0);"/>
				<s:Button id="sort2" label="Distance" enabled="true"  fontSize="13" width="100" click="sortPress(1);"/>
			</s:calloutContent>
		</s:CalloutButton>
	</s:actionContent>
	
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.Config;
			import com.mapquest.DistanceUnits;
			import com.mapquest.LatLng;
			import com.mapquest.mobile.TextUtil;
			import com.mapquest.services.directions.DirectionsConstants;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.ShapeCollection;
			import com.mapquest.tilemap.controls.shadymeadow.SMZoomControl;
			import com.mapquest.tilemap.pois.*;
			
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;

			
			
			[Bindable]
			public var actions:ArrayCollection;
			[Bindable]
			private var _data:Object;
			
			[Bindable]
			private var _addrString:String;
			
			[Bindable]
			private var _distString:String;
			
			private var _tu:TextUtil;
			private var _sc:ShapeCollection;
			
			[Embed("../assets/sms.png")]
			private var smsIcon:Class;
			
			[Embed("../assets/phone.png")]
			private var phoneIcon:Class;
			
			[Embed("../assets/mail.png")]
			private var mailIcon:Class;
			[Bindable]
			public var googleTravelUrl:String = "";
			
			protected var g:Geolocation = new Geolocation();    
			[Bindable]
			public var frontview:Boolean = true;
			[Bindable]
			public var listData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var locationType:String = "1";
			[Bindable]
			public var currentSelectedLocationName:String = "";
			[Bindable]
			public var currentSelectedWaitTime:String = "7 min";
			[Bindable]
			public var currentSelectedAddress:String = "";
			[Bindable]
			public var mylat:Number = -1;
			[Bindable]
			public var mylong:Number = -1;
			[Bindable]
			public var myradius:Number = 50;
			[Bindable]
			public var radiusOptions:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mysearch:String = "";
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var emailGo:String = "none";
			[Bindable]
			public var locatoinidGo:Number = -1;
			protected var sqlConnection:SQLConnection;
			protected function view1_activateHandler(event:Event):void
			{
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country FROM localuser";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				
				if (resData.length != 0){
					//good login
					emailGo = resData[0].email;
						
				}
				else {
					//bad login or no local saved login.
					emailGo = "none";
				}	
				
				
				internetPopup.visible = false;
				if (checkInternet()){
				try{
					storeList.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onPropertyChange);	
					locationType = "1";
					if (Geolocation.isSupported)
					{
						g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
						addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
					}
					else
					{	
						mylat = 53.59221;
						mylong = -113.54009;
						getLocations.send();
						trace ("Updating List");
					}		
				}
				catch(e:Error){
					mylat = 53.59221;
					mylong = -113.54009;
					getLocations.send();
					trace ("Updating List");
				}
				
				
				
				
				if (this.parentApplication.map) {	
					if (!this.mapContainer.getChildByName("myMap")) this.mapContainer.addChild(this.parentApplication.map);
				}
				else {
					if (!this.parentApplication.map) this.parentApplication.makeMap();
					this.mapContainer.addChild(this.parentApplication.map);
				}
				
				
				if (!this.parentApplication.gpsTried) this.parentApplication.initGPS();
				
				if (this.parentApplication.gpsTried && this.parentApplication.gpsIsSupported) {
					this.parentApplication.setGpsLatLng();
				}
				else {
				}
				this.parentApplication.removeShapesFromMap();
				
				busyTime.visible = false;
				
				
				}
				else {
					//display popup
					internetPopup.visible = true;
				}
			}	
			protected function onPropertyChange(event:PropertyChangeEvent):void
			{
				if (event.source == event.target && event.property == "verticalScrollPosition")
				{
					
					var vScroll:Number = storeList.dataGroup.verticalScrollPosition;
					if(vScroll < -20){
					//	trace(vScroll);
						if(!loadingGroup.visible){
							loadingGroup.visible = true;
							fadeIn.play();
						}
						loadingGroup.y = vScroll*-1 - 60;
						
						if(vScroll < -90){
						//	trace(arrowImage.rotation);
							if(arrowImage.rotation == 0)  {
								arrowImage.rotation = 180;
							}
							loadText.text = "Release to refesh...";
							
						}else{
							if(arrowImage.rotation == 180)  {
								arrowImage.rotation = 0;
							}
							loadText.text = "Pull down to refresh";
						}
						
					}else{
						loadingGroup.visible = false;
					}
				}
			}
			public function filterPress(u:uint):void {
				
			}
			public function sortPress(u:uint):void {
				var dataSortField:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField2:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField3:mx.collections.SortField = new mx.collections.SortField();
				var numericDataSort:Sort = new Sort();
				var stringDataSort:Sort = new Sort();
				
				
				if (sortMode == u){
					if (reverse){
						reverse = false;
					}
					else {
						reverse = true;
					}
				}
				else {
					reverse = false;
				}
				
				
				dataSortField.descending = reverse;
				dataSortField2.descending = reverse;
				dataSortField3.descending = reverse;
				
				
				
				sortMode = u;
				
				
				if (u == 0){
					dataSortField.name = "name";
					dataSortField.numeric = false;
					stringDataSort.fields = [dataSortField];
					listData.sort = stringDataSort;
				}
				else if (u == 1){
					dataSortField.name = "distance";
					dataSortField.numeric = true;
					
					numericDataSort.fields = [dataSortField];
					listData.sort = numericDataSort;
					
				}
				
				listData.refresh();
				storeList.dataProvider = listData;
			}
			protected function onUpdate(event:GeolocationEvent):void
			{
				//if (key.text == ""){
					mylat = event.latitude;
					mylong = event.longitude;
					getLocations.send();
					trace ("Updating List");
				//}
				
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			public function init(event:FlexEvent):void
			{
				navigator.actionBar.height = 40;
				radiusOptions = new ArrayCollection();
				radiusOptions.addItem({label:10});
				radiusOptions.addItem({label:20});
				radiusOptions.addItem({label:50});
				radiusOptions.addItem({label:75});
				radiusOptions.addItem({label:90});
				//avgRadius.selectedIndex = 2;
				currentSelectedLocationName = "Local Wait Times";	
			}
			
			public function afterGetLocations(event:ResultEvent):void
			{
				var stop:String = "";
				this._sc = new ShapeCollection();
	
				
				listData = new ArrayCollection();
				try{
					
					listData = event.result[0].res.re;
					storeList.dataProvider = listData;
					var totalDistance:Number = 0;
					for (var i:uint = 0; i < listData.length; i++){
						var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
						totalDistance = totalDistance + Number(listData[i].distance);
						showItemOnMap(listData[i].name,listData[i].lat,listData[i].long,listData[i].address);
					}
					var avgText:String = (totalDistance/i).toString();
					if (avgText.length > 4){
						avgText = avgText.substr(0,3);
					}
					//avgMin.text = avgText+" km";

					
					
				}
				catch(e:Error){
					try{
						
						listData.addItem(event.result[0].res.re);
						storeList.dataProvider = listData;
						var totalDistance:Number = 0;
						for (var i:uint = 0; i < listData.length; i++){
							var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
							totalDistance = totalDistance + Number(listData[i].distance);
							showItemOnMap(listData[i].name,listData[i].lat,listData[i].long,listData[i].address);
						}
						var avgText:String = (totalDistance/i).toString();
						if (avgText.length > 4){
							avgText = avgText.substr(0,4);
						}
						//avgMin.text = avgText+" km";
					}
					catch(e:Error){
						
					}
				}
				sortPress(sortMode);
				searchClick();
				if (listData.length == 0){
					getLocations.send();
				}
				
				this.parentApplication.map.addShapeCollection(this._sc);
				this.parentApplication.map.bestFit(false,2,16);	
			} 
			
			public function storeListChange(ev:IndexChangeEvent):void {
				var stop:String = "";
				if (ev.newIndex != -1){
					var address:String = ev.currentTarget.selectedItems[0].address;
					//var description:String = ev.currentTarget.selectedItems.address;
					var id:String = ev.currentTarget.selectedItems[0].id;
					var lat:Number = Number(ev.currentTarget.selectedItems[0].lat);
					var long:Number = Number(ev.currentTarget.selectedItems[0].long);
					var name:String = ev.currentTarget.selectedItems[0].name;
					var number:String = ev.currentTarget.selectedItems[0].number;
					var type:String = ev.currentTarget.selectedItems[0].type;
					var tagline:String = ev.currentTarget.selectedItems[0].tagline;
					var email:String = ev.currentTarget.selectedItems[0].email;
					var imagelarge:String = ev.currentTarget.selectedItems[0].imagelarge;
					var imagesmall:String = ev.currentTarget.selectedItems[0].imagesmall;
					var isfav:Number = ev.currentTarget.selectedItems[0].isfav;
					if ( ev.currentTarget.selectedItems[0].favpressed == true){
						ev.currentTarget.selectedItems[0].favpressed = false;
						listData[ev.currentTarget.selectedIndex].favpressed = false;
						var stop3:String = "";
						locatoinidGo = Number(id);
						if (emailGo != "none"){
							// values 1 aand 0 are switched becaues i auto siwtch them
							if (isfav == 1){
								//add it
								// add (,emailGo,id)
								createFav.send();
								
							}
							else if (isfav == 0){
								//delete it
								//delete where email = emailGo and locationid = id
								deleteFav.send();
							}
						}
						
						
						
					}
					else {
						currentSelectedLocationName = name;
						currentSelectedAddress = lat+", "+long;
						var waittimeText:String = (ev.currentTarget.selectedItems[0].distance).toString();
						if (waittimeText.length > 4){
							waittimeText = waittimeText.substr(0,4);
						}
						currentSelectedWaitTime = waittimeText+" km";
						navigator.pushView(itemDescription, {id:id,address:address,lat:lat,long:long,name:name,type:type,number:number,
							currentSelectedLocationName:currentSelectedLocationName,currentSelectedAddress:currentSelectedAddress,
							mylat:mylat,mylong:mylong,tagline:tagline,imagelarge:imagelarge,email:email,imagesmall:imagesmall,
							currentSelectedWaitTime:currentSelectedWaitTime});	
					}
									
				}
				
			}
			public function radiusChange(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				//myradius = Number(avgRadius.selectedItem.label);
				getLocations.send();
				trace ("Updating List");
			}
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				key.text = "";
				try{
					//trace(storeList.scroller.verticalScrollBar.value);
					if(storeList.scroller.verticalScrollBar.value < -90){
						loadingGroup.visible = false;
						listData.addItemAt({text:"loading...", name:"aaaaaa", distance :0},0);
						locationType = "1";
						if (Geolocation.isSupported)
						{
							g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
							addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
						}
						else
						{	
							mylat = 53.59221+Math.random();
							mylong = -113.54009+Math.random();
							getLocations.send();
							trace ("Updating List");
						}		
					} 
				}
				catch(e:Error){
					trace ("mouse up on list refresh error");
				}
			}
			
			protected function list_mouseMoveHandler(event:MouseEvent):void
			{ 
				try{
					var vScroll:Number = storeList.scroller.verticalScrollBar.value;
					if(vScroll < -20){
						//trace(vScroll);
						if(!loadingGroup.visible){
							loadingGroup.visible = true;
							fadeIn.play();
						}
						loadingGroup.y = vScroll*-1 - 60;
						
						if(vScroll < -90){
							//trace(arrowImage.rotation); 
							if(arrowImage.rotation == 0)  {
								arrowImage.rotation = 180;
							}
							loadText.text = "Release to refesh...";
							
						}else{
							if(arrowImage.rotation == 180)  {
								arrowImage.rotation = 0;
							}
							loadText.text = "Pull down to refresh";
						}
						
					}else{
						loadingGroup.visible = false;
					}
				}
				catch(e:Error){
					
				}
			}
			
			public function searchClick():void
			{
				if (key.text != ""){
					listData.filterFunction = filterCompleted;
				}
				else {
					listData.filterFunction = returnall;
				}
			
				listData.refresh();
				storeList.dataProvider = listData;
				var s:String = "";
				s.toLowerCase()
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			private function returnall(item:Object):Boolean{
				return true;
			}
			public function viewChoice(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (listCont.visible){
					listCont.visible = false;
					mapCont.visible = true;
				}
				else {
					listCont.visible = true;
					mapCont.visible = false;
				}
			}
			private function onViewDeactivate():void {
				//hide the map's infowindow
				this.parentApplication.map.infoWindow.hide();
				this.parentApplication.disableTraffic();
			}
			private function showItemOnMap(name:String,lat:String,long:String,address:String):void {
				var p:Poi = new Poi(new LatLng(0,0));
				p.infoWindowTitleText = name;
				p.latLng = new LatLng(Number(lat),Number(long));
				p.infoContent = address;
				if (this.parentApplication.applicationDPI >= 240) {
					var i:PinMapIcon = (p.icon as PinMapIcon);
					i.iconWidth = 48;
					p.icon = i;
				}
				//this.parentApplication.removeShapesFromMap();
				this._sc.name = "searchShapeCollection";
				this._sc.add(p);	
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			
			protected function togDown(event:MouseEvent):void
			{
				if (maplisttog.source == "assets/map-list1.png"){
					maplisttog.source = "assets/map-list2.png"
				}
				else {
					maplisttog.source = "assets/map-list1.png"
				}
				
			}
			
			protected function togUp(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			public function press(event:KeyboardEvent):void {
				//if ((event.keyCode == 13)||(event.charCode == 13)){
					searchClick();
				//}
			}
			
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
				var s:String = "";
				
			}
			private function checkInternet():Boolean {
				var interfaces:Vector.<NetworkInterface> = NetworkInfo.networkInfo.findInterfaces();
				var foundactive:Boolean = false;
				for(var i:uint = 0; i < interfaces.length; i++) {
					/*
					if(interfaces[i].name.toLowerCase() == "wifi" && interfaces[i].active) {
						//lbl.text = "WiFi connection enabled";
						trace("wifi");
						return true;
						break;
					} else if(interfaces[i].name.toLowerCase() == "mobile" && interfaces[i].active) {
						//lbl.text = "Mobile data connection enabled";
						trace("3G");
						return true;
						break;
					}
					else {
						trace("None");
						return false;
						break;
					}*/
					if (interfaces[i].active){
						foundactive = true;
					}
					
				}
				return foundactive;
			}
			public function afterCreateFav(ev:ResultEvent):void {
				var s:String = "";
			}
			public function afterDeleteFav(ev:ResultEvent):void {
				var s:String = "";
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getLocations" method="POST" resultFormat="array"
					   url="http://simplipay.ca/php/locations/getLocationsMobile.php"
					   result="afterGetLocations(event)" >
			<s:request xmlns="">
				<type>{locationType}</type>		
				<mylat>{mylat}</mylat>		
				<mylong>{mylong}</mylong>		
				<myradius>{myradius}</myradius>	
				<emailGo>{emailGo}</emailGo>	
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="createFav" method="POST" resultFormat="array"
					   url="http://simplipay.ca/php/myfav/createFav.php"
					   >
			<s:request xmlns="">		
				<emailGo>{emailGo}</emailGo>	
				<id>{locatoinidGo}</id>	
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="deleteFav" method="POST" resultFormat="array"
					   url="http://simplipay.ca/php/myfav/deleteFav.php"
					    >
			<s:request xmlns="">		
				<emailGo>{emailGo}</emailGo>	
				<id>{locatoinidGo}</id>	
			</s:request>
		</s:HTTPService>
		<!--s:HTTPService id="searchLocations" method="POST" resultFormat="array"
					   url="http://simplipay.ca/php/locations/searchLocationsMobile.php" result="afterSearchLocations(event)" >
			<s:request xmlns="">
				<type>{locationType}</type>		
				<mylat>{mylat}</mylat>		
				<mylong>{mylong}</mylong>		
				<myradius>{myradius}</myradius>	
				<mysearch>{mysearch}</mysearch>
			</s:request>
		</s:HTTPService-->
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:BorderContainer x="0" y="0" height="30" backgroundAlpha="1" backgroundColor="#0977b6" width="100%">
		<s:HGroup width="100%" height="100%">
			<s:TextInput id="key" width="100%" prompt="Search Stores" returnKeyLabel="search" 
						 enter="searchClick();" keyUp="press(event);"
						 skinClass="skins.searchInput" height="27" />
			<s:Image source="assets/search.png" mouseDown="profDown(event)" mouseUp="profUp(event)" click="searchClick();" />
		</s:HGroup>	
	</s:BorderContainer>
	<s:BorderContainer width="100%" x="0" top="30" bottom="0" visible="true" id="listCont"
					   backgroundColor="#FFFFFF" backgroundAlpha="1"  borderAlpha="0" >
		
			<s:BorderContainer  backgroundColor="#FFFFFF" backgroundAlpha="1" top="0" bottom="0" borderAlpha="0" width="100%"  >
				<s:List width="100%" top="0" bottom="0" contentBackgroundAlpha="1" contentBackgroundColor="#FFFFFF" 
						id="storeList" labelField="name"  
						dataProvider="{listData}" itemRenderer="components.storeResult"
						selectedIndex="1" change="storeListChange(event);"
						mouseMove="list_mouseMoveHandler(event)" mouseUp="list_mouseUpHandler(event)" >
					
				</s:List>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" id="loadingGroup" visible="false" height="50">
					<s:Image id="arrowImage"  source="@Embed('assets/Arrow-double-up-48.png')"/>
					<s:Label text="Pull down to refresh"  id="loadText"/>
				</s:HGroup>
			</s:BorderContainer>
			
	</s:BorderContainer>	
	<s:BorderContainer width="100%" x="0"  top="30" bottom="0" visible="false" id="mapCont" backgroundColor="#FFFFFF" backgroundAlpha="1"   borderAlpha="0" >
		<mx:UIComponent id="mapContainer"
						width="100%"
						height="100%"
						/>
		<s:BusyIndicator horizontalCenter="0" id="busyTime" 
						 verticalCenter="0" visible="true" 
						 symbolColor="blue" rotationInterval="200"/>
	</s:BorderContainer>
	<s:BorderContainer id="internetPopup" visible="false" width="100%" height="100%" borderAlpha="0" backgroundAlpha="0" >
		<s:BorderContainer  width="200" height="200" backgroundAlpha="0.6"
						   backgroundColor="#000000" cornerRadius="5" horizontalCenter="0"
						   verticalCenter="0">
			<s:Label width="126" height="65" color="#FFFFFF" fontSize="20" horizontalCenter="0"
					 text="Internet Connection Required" textAlign="center" verticalCenter="-15"/>
			
		</s:BorderContainer>
	</s:BorderContainer>
	
	
</s:View>