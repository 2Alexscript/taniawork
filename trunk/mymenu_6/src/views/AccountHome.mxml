<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:maps="com.google.maps.*" 	
		xmlns:mx="library://ns.adobe.com/flex/mx" viewActivate="onActivate(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:model="model.*" 
		  backgroundColor="#e8e8e8"
		title="My Menu"  xmlns:components="components.*" >
	<s:navigationContent >
		<s:Image x="0" y="-2" click="navigator.popView();">
			<s:source>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/pocketicons/PKT_BackArrow.png')"
										source240dpi="@Embed('assets/pocketicons/PKT_BackArrow@2x.png')"
										source320dpi="@Embed('assets//pocketicons/PKT_BackArrow@2x.png')"/>
			</s:source>
		</s:Image>
	</s:navigationContent>
	<s:actionContent >	
	</s:actionContent>
	
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Bitmap;
			import flash.display.Sprite;
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			[Bindable]
			public var emailGo:String = "";
			[Bindable]
			public var nameGo:String = "";
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var togstatus:Boolean = false;
			[Bindable]
			public var catArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var busy:Boolean = true;
			[Bindable]
			public var alerArray:ArrayCollection = new ArrayCollection();
			public function onActivate(event:Event):void
			{
					try{
						var loadManager:PersistenceManager = new PersistenceManager();
						if(loadManager.load()){
							var savedData:Object = loadManager.getProperty("useremail");
							if(savedData){
								if (savedData.toString() != "ERRORBADERRORBAD"){
									emailGo = savedData.toString();
									var saveManager:PersistenceManager = new PersistenceManager();
									saveManager.setProperty("useremail",savedData.toString());
								
									thisscroll.visible = true;	
								}
							}
							else {
								try{
									sqlConnection = new SQLConnection();
									sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
									var stmt:SQLStatement = new SQLStatement();
									stmt.sqlConnection = sqlConnection;
									stmt.text = "SELECT email, name, country, active FROM localuser";
									stmt.execute();
									var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
									
									if (resData.length != 0){
										//good login
										var foundactive:Boolean = false;
										for (var i:uint = 0; i < resData.length; i++){
											if (resData[i].active == "yes"){
												foundactive = true;
												emailGo = resData[i].email;
												nameGo = resData[i].name;
												this.title = emailGo;
											}
										}
									}
									else {
										//bad login or no local saved login.
									}
								}
								catch(e:Error){
									
								}
							}
						}
					}
					catch(e:Error){

					}	
					
					busy = false;
					catArray =  new ArrayCollection();
					catArray.addItem({name:"Change Password"});
					storeList.dataProvider = catArray;
					
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(ffffff,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(ffffff,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function usermenuclick():void {
				navigator.pushView(AccountSettings);
			}
			public function logout():void {
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update localuser set active = 'no' where email = '"+emailGo+"'";
					stmt.execute();
					emailGo = "";
					nameGo = "";
					var saveManager:PersistenceManager = new PersistenceManager();
					saveManager.setProperty("useremail", "ERRORBADERRORBAD");
					//navigator.pushView(Login,{newmode:true});
					navigator.pushView(Login);
				}
				catch(e:Error){
					navigator.pushView(Login);
				}
			}
			public function catListChange(ev:IndexChangeEvent):void {
				//storeList.selectedItem.name
				try{
					if (storeList.selectedItem.name == "Change Password"){
						navigator.pushView(AccountSettingsChangePwd);
					}
					else if (storeList.selectedItem.name == "Change Quick Pin"){
						//navigator.pushView(AccountSettingsChangeQuickPin);
					}
				}
				catch(e:Error){
					
				}
				
				
			}
			public function alerListChange(ev:IndexChangeEvent):void {
				//storeList.selectedItem.name
				
				
				
			}
			public function option(u:uint):void {
				
				if (u == 0){
					opcont2.visible = false;
					opcont1.visible = true;
					opl1.setStyle('color','#F7D781');
					opl2.setStyle('color','#000000');
					
				}
				else if (u == 1){
					
					opcont1.visible = false;
					opcont2.visible = true;
					opl1.setStyle('color','#000000');
					opl2.setStyle('color','#F7D781');
				}
			}
			public function addAler():void {
				navigator.pushView(AddAllergy);
				
			}
		]]>
	</fx:Script>
		<s:Scroller left="5" right="5" id="thisscroll" top="0" visible="true" 
					bottom="0" verticalScrollPolicy="off" horizontalScrollPolicy="off" >
			<s:VGroup width="100%"  gap="20" paddingTop="10" >
				<s:Label  width="100%" color="#000000"  horizontalCenter="0"
						 lineThrough="false" text="{emailGo}" 
						/>
				<s:Group  width="100%" height="100%">
					<s:HGroup  id="headergroup" gap="20" top="0" x="0" width="100%">
						<s:Label id="opl1" width="50%" color="#F7D781" click="option(0);" styleName="textsize10" text="Dietary Constraints"
								 textAlign="center"/>
						<s:Label id="opl2" width="50%" color="#000000" click="option(1);" styleName="textsize10" text="Options"
								 textAlign="center"/>
					</s:HGroup>
					<s:VGroup id="opcont1" width="100%" height="100%" top="{headergroup.height*1.8}">
						<s:Label  width="100%" color="#000000"  horizontalCenter="0"
								  lineThrough="false" text="Your list of allergies" />
						<s:List width="100%" horizontalCenter="0" top="0" 
								bottom="0" contentBackgroundAlpha="1" 
								id="alerList" labelField="name"  
								dataProvider="{alerArray}" itemRenderer="components.alerResult"
								selectedIndex="1" change="alerListChange(event);" 
								>
							
						</s:List>
						<s:HGroup width="100%" horizontalAlign="center">
							<s:Label width="100%" color="#000000" horizontalCenter="0"
									 text="+ Add New Allergy" textAlign="center" click="addAler();"
									 verticalAlign="middle"/>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup id="opcont2" visible="false" width="100%" height="100%" top="{headergroup.height*1.8}">
						<s:List width="100%" horizontalCenter="0" top="40" bottom="0" contentBackgroundAlpha="1" 
								id="storeList" labelField="name"  
								dataProvider="{catArray}" itemRenderer="components.catResult"
								selectedIndex="1" change="catListChange(event);" 
								>
							
						</s:List>
					</s:VGroup>
				</s:Group>
				
			</s:VGroup>
		</s:Scroller>
</s:View>