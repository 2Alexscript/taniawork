<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
			
				creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import spark.filters.GlowFilter;
			[Bindable]
			public var bcolor:String = "#FFFFFF";
			[Bindable]
			public var clickStatus:String = "none";
			[Bindable]
			public var listoftemps:ArrayCollection = new ArrayCollection();
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,1,5,5,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
				var s:String = "";
				
			}
			public function gOver(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(0x0a4972,0.4,200,200,50,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function init(event:FlexEvent):void
			{
				var s:String = "";
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
		<s:State name="up"/>
	</s:states>
	<s:Group width="100%"  height="100%"  >
		<s:BorderContainer   width="100%" height="100%" bottom="0" backgroundAlpha="0" borderAlpha="0">
			<s:HGroup height="100%" paddingBottom="0" paddingLeft="5" paddingRight="0" paddingTop="0"
					  verticalAlign="middle">
	
				<s:VGroup top="3" height="100%"  paddingRight="5" paddingTop="5" paddingBottom="5">
					<s:Label color="#000000" fontSize="15" fontWeight="bold" text="{data.name}"
							  verticalCenter="0"></s:Label>
					<s:Group>
						<s:Label  
								  fontSize="15" text="{data.iscurrent + ': ' + data.answerdate}" visible="{data.iscurrent == 'Current'}"
								  color="#1BB73F" fontWeight="bold"></s:Label>
						<s:Label  
								  fontSize="15" text="{data.iscurrent + ': ' + data.answerdate}" visible="{data.iscurrent == 'Previous'}"
								  color="#B30F0F" fontWeight="bold"></s:Label>
					</s:Group>
					<s:Group>
						<s:Label   visible="{data.status == 'good'}" 
								  fontSize="15" text="Complete"
								  color="#1BB73F" fontWeight="bold"></s:Label>
						
						<s:Label visible="{data.status == 'bad'}" 
								  fontSize="15" text="Incomplete"
								 color="#B30F0F" fontWeight="bold"></s:Label>
					</s:Group>
					<s:Label color="#000000" fontSize="15" fontWeight="bold" text="{data.datestart+'-'+data.dateend}"
							 verticalCenter="0"></s:Label>
				</s:VGroup>
			</s:HGroup>
			<s:BorderContainer bottom="0" width="100%" backgroundAlpha="0" borderAlpha="1"  borderColor="#dcdcdc" height="1" />
		</s:BorderContainer>
		<s:Image  source="assets/arrowHigh.png"  smooth="true"
				 right="10" width="19" height="19" verticalCenter="0"/>
	</s:Group>
	
	
</s:ItemRenderer>