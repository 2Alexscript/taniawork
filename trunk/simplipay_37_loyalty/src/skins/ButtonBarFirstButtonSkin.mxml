<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.  

@see spark.components.ButtonBar
@see spark.components.ButtonBarButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
				   minWidth="21" minHeight="21" 
				   alpha.disabled="1">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
        
		/* Define the skin elements that should not be colorized. 
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = false;
			super.initializationComplete();
			//this.iconDisplay.visible = false;
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				
			}
			
			
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:Image bottom="0" 
			 alpha.up="1" visible="{this.iconDisplay == null}"
			 alpha.over="1" width="100%"
			 alpha.disabled="1" scaleMode="stretch" smooth="true"
			 alpha.down="0" 
			 alpha.overAndSelected="0" 
			 alpha.downAndSelected="0" 
			 alpha.disabledAndSelected="0" 
			 alpha.upAndSelected="0"  
			 source="../assets/t1.png"/>
	<s:Image bottom="0" 
			 alpha.up="0" visible="{this.iconDisplay == null}"
			 alpha.over="0" width="100%"
			 alpha.disabled="0"
			 alpha.down="1"  scaleMode="stretch" smooth="true"
			 alpha.overAndSelected="1" 
			 alpha.downAndSelected="1" 
			 alpha.disabledAndSelected="1" 
			 alpha.upAndSelected="1"  
			 source="../assets/t1down.png"/>
	
	
	
	<!-- layer 8: text -->
	<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle" visible="false"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkButtonSkin>