<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:maps="com.google.maps.*" 	
		xmlns:components="components.*" 
		backgroundAlpha="1"
		backgroundColor="#e5e5e5"
		contentBackgroundAlpha="1"
		contentBackgroundColor="#e5e5e5"
		destructionPolicy="auto"
		viewActivate="init()"
		creationComplete="init2()"
		title="Specials"   >
	<fx:Script source="../func/global.as"/>
	<fx:Script source="../func/specialscommon.as"/>
	<fx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.events.ViewNavigatorEvent;
			import spark.transitions.SlideViewTransition;
			import spark.transitions.SlideViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			[Bindable]
			public var togstatus:Boolean = false;
			[Bindable]
			public var specialsData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var backupspecialsData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var currentfilterweekday:String = "monday";
			[Bindable]
			public var locationid:String = "";
			[Bindable]
			public var currentselectmode:Number = 1;
			[Bindable]
			public var selectedspecialid:Number = -1;
			[Bindable]
			public var liketype:Number = -1;
			[Bindable]
			public var selectedmerchid:Number = -1;
			[Bindable]
			public var selectedlocationid:Number = -1;
			[Bindable]
			public var postalString:String = "";
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var filterData1:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filterData2:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filterData3:ArrayCollection = new ArrayCollection();
			public function init():void
			{
				
				createIfNotExsist("introtasks");
				var resData:ArrayCollection = getDatabaseArray("SELECT * FROM introtasks where name = 'specials';");
				if (resData.length == 0){
					doQuery("insert into introtasks values('specials')");
					popupholder1.visible = true;
				}
				goingtonext = false;
				this.parentDocument.showBusy();
				warn.visible = false;
				setLoginVars();
				scroller.visible = true;
				getSpecials.send();
			}
			public function init2():void {
				filterData1 = new ArrayCollection();
				filterData2 = new ArrayCollection();
				filterData3 = new ArrayCollection();
				filterData1.addItem({name:"Nearby"});
				filterData1.addItem({name:"Postal Code"});
				filterData1.addItem({name:"Address"});
				filterData2.addItem({name:"All"});
				filterData3.addItem({name:"Recent"});
				filterData3.addItem({name:"Oldest"});				
			}
			public function afterGetSpecials(ev:ResultEvent):void {	
				loadingtext.visible = false
				backupspecialsData = new ArrayCollection();
				try{			
					backupspecialsData = ev.result[0].ress.res;		
				}
				catch(e:Error){
					try{
						
						backupspecialsData.addItem(ev.result[0].ress.res);
					}
					catch(e:Error){
					}
				}
				for (var i:uint = 0; i < backupspecialsData.length; i++){
					backupspecialsData[i].distance = Number(getDistance(mylat,mylong,backupspecialsData[i].lat,backupspecialsData[i].longa));
				}
				var dataSortField:SortField = new SortField();
				dataSortField.name = "distance";
				dataSortField.numeric = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				backupspecialsData.sort = numericDataSort;
				backupspecialsData.refresh();
				populatelist();
				this.parentDocument.hideBusy();
				generateCategoryFilterArray();
			} 
			public function afterGetSpecialsPostal(ev:ResultEvent):void {
				this.parentApplication.hideloading();
				var tempstring:String = ev.result[0].toString();
				tempstring = tempstring.substring(tempstring.indexOf("lat")+3,tempstring.length);
				tempstring = tempstring.substring(tempstring.indexOf(">")+2,tempstring.length);
				var newlat:String = tempstring.substring(0,tempstring.indexOf("\n"));
				tempstring = tempstring.substring(tempstring.indexOf("long")+3,tempstring.length);
				tempstring = tempstring.substring(tempstring.indexOf(">")+2,tempstring.length);
				var newlong:String = tempstring.substring(0,tempstring.indexOf("\n"));
				var i:uint = 0;
				for (i =  0; i < specialsData.length; i++){
					specialsData[i].distance = Number(getDistance(Number(newlat),Number(newlong),specialsData[i].lat,specialsData[i].longa));
				}
				specialsData.refresh();
				populatelist();
				generateCategoryFilterArray();
			}
			public function generateCategoryFilterArray():void {
				var tempfilter2:ArrayCollection = new ArrayCollection();	
				if (specialsData.length > 0){
					for (var i:uint =  0; i < specialsData.length; i++){
						if (specialsData[i].categoryname.length > 0){
							var tempfail:Boolean = false;
							for (var j:uint = 0; j < tempfilter2.length; j++){
								if (tempfilter2[j].name == specialsData[i].categoryname){
									tempfail = true;
								}
							}
							if (tempfail == false){
								tempfilter2.addItem({name:specialsData[i].categoryname});
							}
						}			
					}
				}
				var filtercatsf:SortField = new SortField();
				filtercatsf.name = "name";
				filtercatsf.numeric = false;
				var fcst:Sort = new Sort();
				fcst.fields = [filtercatsf];
				tempfilter2.sort = fcst;
				tempfilter2.addItemAt({name:"All"},0);
				tempfilter2.refresh();
				
				filterData2 = new ArrayCollection();
				for (var k:uint = 0; k < tempfilter2.length; k++){
					filterData2.addItem({name:tempfilter2[k].name});
				}
			}
			public function populatelist():void {
				specialsData = new ArrayCollection();
				var datevar:Date = new Date();
				var todaysdate:Date = new Date();
				if (reverse){
					datevar.setDate(datevar.getDate() + 6);
				}
				for (var j:uint = 0; j < 7; j++){
					if (j != 0){
						if (reverse){
							datevar.setDate(datevar.getDate() - 1);
						}
						else {
							datevar.setDate(datevar.getDate() + 1);
						}
						
					}
					var weekdaynum:Number = datevar.day;
					var yearnum:Number = datevar.fullYear;
					var monthstring:String = datevar.toDateString().split(' ')[1];
					var daystring:String = datevar.toDateString().split(' ')[2];	
					var currentfilterweekday:String = gettextweekday(weekdaynum);
					var tempweekstring:String = currentfilterweekday.charAt(0).toUpperCase()+currentfilterweekday.substring(1,currentfilterweekday.length);
					var addedheaderlabel:Boolean = false;
					for (var i:uint = 0; i < backupspecialsData.length; i++){
						var stringmatch:Boolean = true;
						if (key.text.length > 0){
							stringmatch = false;
							try{
								if((backupspecialsData[i].business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
									(backupspecialsData[i].description.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)){
									stringmatch = true;
								}
							}
							catch(e:Error){}
						
						}
						var goodo:Boolean = true;
						
						try{
							if ((backupspecialsData[i].yearly == 'n')&&(goodo)&&(stringmatch)){
								if (backupspecialsData[i].weekday.toLowerCase() == currentfilterweekday.toLowerCase()){
									backupspecialsData[i].type = 1;
									if (addedheaderlabel == false){
										addedheaderlabel = true;
										if (datevar.toDateString() == todaysdate.toDateString()){
											specialsData.addItem({name:"Today",description:"",
												categoryname:"",type:0,weekday:"",business_picture:""});
										}
										else {
											specialsData.addItem({name:tempweekstring+", "+monthstring+" "+daystring,description:"",
												categoryname:"",type:0,weekday:"",business_picture:""});
										}
									}
									specialsData.addItem(backupspecialsData[i]);
								}	
							}
							else if ((goodo)&&(stringmatch)){
								var spdatestring1:String = backupspecialsData[i].startdate;
								var spdatestring2:String = backupspecialsData[i].enddate;
								var datespan1:Array = new Array();
								datespan1.push(spdatestring1.substr(0,4));
								datespan1.push(Number(spdatestring1.substr(5,7).substr(0,2))-1);
								datespan1.push(spdatestring1.substr(8,spdatestring1.length));
								var date1:Date = new Date(datespan1[0],datespan1[1],datespan1[2]);
								var datespan2:Array = new Array();
								datespan2.push(spdatestring2.substr(0,4));
								datespan2.push(Number(spdatestring2.substr(5,7).substr(0,2))-1);
								datespan2.push(spdatestring2.substr(8,spdatestring2.length));
								var date2:Date = new Date(datespan2[0],datespan2[1],datespan2[2]);
								
								var currentdatetime:Number = datevar.getTime();
								var date1time:Number = date1.getTime();
								var date2time:Number = date2.getTime();
								
								if ((date1.getTime() <= datevar.getTime())&&(date2.getTime() >= datevar.getTime())){
									backupspecialsData[i].type = 1;
									if (addedheaderlabel == false){
										addedheaderlabel = true;
										if (datevar.toDateString() == todaysdate.toDateString()){
											specialsData.addItem({name:"Today",description:"",
												categoryname:"",type:0,weekday:"",business_picture:""});
										}
										else {
											specialsData.addItem({name:tempweekstring+", "+monthstring+" "+daystring,description:"",
												categoryname:"",type:0,weekday:"",business_picture:""});
										}
									}
									specialsData.addItem(backupspecialsData[i]);
								}	
							}
						}
						catch(e:Error){
						var errorstring:String = "";
						}
						
					}
				}
				if (specialsData.length <= 0){
					warn.visible = true;
				}
				else {
					warn.visible = false;
				}
				specialsData.refresh();
				specialsList.dataProvider = specialsData;
			}
			public var goingtonext:Boolean = false;
			public function dataListClick():void {	
				try{
					if (specialsList.selectedItem.heartclick == 1){
						specialsList.selectedItem.heartclick = 0;
						selectedspecialid = specialsData[specialsList.selectedIndex].id;
						selectedmerchid = specialsData[specialsList.selectedIndex].merchid;
						selectedlocationid = specialsData[specialsList.selectedIndex].locationid;
						if (specialsList.selectedItem.liked == 'yes'){
							liketype = 1;
						}
						else {
							liketype = 0;
						}
						updateLikeStatus.send();
					}
					else {
						if (goingtonext == false){
							goingtonext = true;
							if (specialsList.selectedIndex != -1){
								navigator.pushView(SpecialsDescription, specialsData[specialsList.selectedIndex]);		
							}
							else {
								goingtonext = false;
							}
						}
					}
				}
				catch(e:Error){}
			}
			public function filterCompleted2(item:Object):Boolean{
				if((item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.description.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			public function press(event:KeyboardEvent):void {
				populatelist();
			}
			public function postalpress(event:KeyboardEvent):void {
				var tempText:String = svi2.text;
				var rex:RegExp = /[\s\r\n]*/gim;
				var dashes:RegExp = /-/gi; // match "dashes" in a string
				tempText = tempText.replace(rex,'');
				tempText = tempText.replace(dashes,'');
				
				if (tempText.length == 6){
					postalString = tempText;
					getSpecialsPostal.send();
					this.parentApplication.showloading();
				}
				else {
					calculateDistanceandmap();	
					currentselectmode = 0;
					populatelist();
				}
			}
			public function addressPress(event:KeyboardEvent):void {
				var tempText:String = svi3.text;
				if (tempText.length >= 6){
					postalString = tempText;
					getSpecialsPostal.send();
					this.parentApplication.showloading();
				}
				else {
					calculateDistanceandmap();	
					currentselectmode = 0;
					populatelist();
				}
			}
			public function calculateDistanceandmap():void {
				if (backupspecialsData.length > 0){
					var i:uint = 0;
					for (i=  0; i < backupspecialsData.length; i++){
						backupspecialsData[i].distance = Number(getDistance(mylat,mylong,backupspecialsData[i].lat,backupspecialsData[i].longa));
					}
				}
			}
			public function filterClick(u:uint):void {
				backupspecialsData.filterFunction = allFilter;
				backupspecialsData.refresh();
				
				var fadein:Fade = new Fade();
				fadein.alphaFrom = 0;
				fadein.alphaTo = 1;
				fadein.duration = 500;
				
				var fadeout:Fade = new Fade();
				fadeout.alphaFrom = 1;
				fadeout.alphaTo = 0;
				fadeout.duration = 500;
				
				if ((currentselectmode == 1)&&(currentselectmode != u)){
					fadeout.targets = [filterimage1];
				}
				else if ((currentselectmode == 2)&&(currentselectmode != u)){
					fadeout.targets = [filterimage2];
				}
				else if ((currentselectmode == 3)&&(currentselectmode != u)){
					fadeout.targets = [filterimage3];
				}
				if ((u == 1)&&(currentselectmode != u)){
					
					filterList1.visible = true;
					filterList2.visible = false;
					filterList3.visible = false;
					
					selectview1.alpha = 1;
					selectview2.alpha = 0;
					selectview3.alpha = 0;
					
					fadein.targets = [filterimage1];
					
					selectview1.mouseEnabled = true;
					selectview1.mouseEnabledWhereTransparent = true;
					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;	
				}
				else if ((u == 2)&&(currentselectmode != u)){
					filterList1.visible = false;
					filterList2.visible = true;
					filterList3.visible = false;
					
					selectview1.alpha = 0;
					selectview2.alpha = 1;
					selectview3.alpha = 0;
					
					fadein.targets = [filterimage2];
					
					selectview1.mouseEnabled = false;
					selectview1.mouseEnabledWhereTransparent = false;
					
					selectview2.mouseEnabled = true;
					selectview2.mouseEnabledWhereTransparent = true;
					
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;
		
				}
				else if ((u == 3)&&(currentselectmode != u)){
					filterList1.visible = false;
					filterList2.visible = false;
					filterList3.visible = true;
					selectview1.alpha = 0;
					selectview2.alpha = 0;
					selectview3.alpha = 1;
					
					fadein.targets = [filterimage3];
					
					selectview1.mouseEnabled = false;
					selectview1.mouseEnabledWhereTransparent = false;
					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					
					selectview3.mouseEnabled = true;
					selectview3.mouseEnabledWhereTransparent = true;
	
				}
				
				if (currentselectmode != u){
					fadeout.play();
					fadein.play();
					currentselectmode = u;
					setTimeout(	populatelist,500);
				}
			}
			private function allFilter(item:Object):Boolean{
				return true;
			}
			public function goFilterScreen(u:uint):void {
				if (clickingsvi == false){
					if (dropDownContainer.visible){
						//close dropdown menu
						var fadeout:Fade = new Fade();
						fadeout.alphaFrom = 1;
						fadeout.alphaTo = 0;
						fadeout.duration = 500;
						fadeout.target = dropDownContainer;
						fadeout.play();
						fadeout.addEventListener(EffectEvent.EFFECT_END, afterdrophide);
					}
					else{
						//show dropdown menu
						var fadein:Fade = new Fade();
						fadein.alphaFrom = 0;
						fadein.alphaTo = 1;
						fadein.duration = 500;
						dropDownContainer.visible = true;
						fadein.target = dropDownContainer;
						fadein.play();
					}	
				}
				else {
					clickingsvi = false;
				}
			}
			public function afterdrophide(ev:EffectEvent):void {
				dropDownContainer.visible = false;
			}
			public function filter1Click():void {
				backupspecialsData.filterFunction = allFilter;
				if (filterList1.selectedItem.name == "Nearby"){
					svi1.visible = true;
					svi2.visible = false;
					svi3.visible = false;
					for (var i:uint =  0; i < backupspecialsData.length; i++){
						backupspecialsData[i].distance = Number(getDistance(mylat,mylong,backupspecialsData[i].lat,backupspecialsData[i].longa));
					}
					populatelist();
				}
				else if (filterList1.selectedItem.name == "Postal Code"){
					svi1.visible = false;
					svi2.visible = true;
					svi3.visible = false;
				}
				else if (filterList1.selectedItem.name == "Address"){
					svi1.visible = false;
					svi2.visible = false;
					svi3.visible = true;
				}
				goFilterScreen(0);
				backupspecialsData.filterFunction = allFilter;
				
			}
			public function filter2Click():void {
				sv2label.text = filterList2.selectedItem.name;
				goFilterScreen(1);
				if (filterList2.selectedItem.name.toLowerCase() == "all"){
					backupspecialsData.filterFunction = allFilter;
				}
				else {
					backupspecialsData.filterFunction = catFilter;
				}
				backupspecialsData.refresh();
				setTimeout(	populatelist,50);
			}
			public function catFilter(item:Object):Boolean{
				if((item.categoryname.toString().toLowerCase().indexOf(	sv2label.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			public function filter3Click():void {
				backupspecialsData.filterFunction = allFilter;
				if (filterList3.selectedItem.name == "Recent"){				
					currentselectmode = 3;
					reverse = false;
				}
				else if (filterList3.selectedItem.name == "Oldest"){
					currentselectmode = 3;
					reverse = true;
				}
				populatelist();
				sv3label.text = filterList3.selectedItem.name;
				goFilterScreen(2);
				
			}
			
			public var clickingsvi:Boolean = false;
			public function svilabelclick():void {
				clickingsvi = true;
				if (dropDownContainer.visible){
					//close dropdown menu
					var fadeout:Fade = new Fade();
					fadeout.alphaFrom = 1;
					fadeout.alphaTo = 0;
					fadeout.duration = 500;
					fadeout.target = dropDownContainer;
					fadeout.play();
					fadeout.addEventListener(EffectEvent.EFFECT_END, afterdrophide);
				}
			}
		]]>
	</fx:Script>
	<s:titleContent>
		<s:Group horizontalCenter="0" verticalCenter="0" width="{this.width/1.5}"  height="60%">
			<s:Rect width="100%"  height="100%"
					radiusX="{25/(320/Capabilities.screenDPI)}"
					radiusY="{25/(320/Capabilities.screenDPI)}">
				<s:fill>
					<s:SolidColor alpha="1" color="#39a994"/>
				</s:fill>
			</s:Rect>
			<s:BitmapImage left="{20/(320/Capabilities.screenDPI)}" verticalCenter="0" contentLoader="{s_imageCache}">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/glass.png')"
											source240dpi="@Embed('../assets/240/glass.png')"
											source320dpi="@Embed('../assets/320/glass.png')"
											source480dpi="@Embed('../assets/480/glass.png')"
											source640dpi="@Embed('../assets/640/glass.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:TextInput   fontFamily="Arial"  keyUp="press(event);" verticalCenter="0"  styleName="textsize0"    
						   color="#FFFFFF"  right="0" left="{35/(320/Capabilities.screenDPI)}"
						   id="key"  top="{6/(320/Capabilities.screenDPI)}"  height="98%" borderVisible="false" fontWeight="normal"  
						   contentBackgroundAlpha="0"
						   maxChars="20" prompt="Search Specials"
						   returnKeyLabel="search"/>
		</s:Group>
	</s:titleContent>
	<fx:Declarations>		
		<s:HTTPService id="getSpecials" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/getSpecialsAll.php"
					   result="afterGetSpecials(event)">
			<s:request xmlns="">
				<email>{emailGo}</email>			
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="updateLikeStatus" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/updateSpecialLikes.php">
			<s:request xmlns="">
				<email>{emailGo}</email>	
				<specialid>{selectedspecialid}</specialid>	
				<liketype>{liketype}</liketype>	
				<merchid>{selectedmerchid}</merchid>	
				<locationid>{selectedlocationid}</locationid>	
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="getSpecialsPostal" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/getSpecialsAllPostal.php"
					   result="afterGetSpecialsPostal(event)" >
			<s:request xmlns="">
				<postalString>{postalString}</postalString>
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:Scroller id="scroller" height="100%" width="100%" horizontalCenter="0"
				horizontalScrollPolicy="off" verticalScrollPolicy="on">
		<s:VGroup   height="100%" gap="0" width="100%" horizontalAlign="center" verticalAlign="bottom">	
			<s:Group id="filterarea" visible="true" width="100%" 
					 height="{75/(320/Capabilities.screenDPI)}">
				<s:Rect width="100%"  height="100%">
					<s:fill>
						<s:SolidColor alpha="1" color="#8eddce"/>
					</s:fill>
				</s:Rect>
				<s:BitmapImage id="filterimage1" horizontalCenter="0"  
							   contentLoader="{s_imageCache}" alpha="1"
							   verticalCenter="0">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/specials-tabs1.png')"
												source240dpi="@Embed('../assets/240/specials-tabs1.png')"
												source320dpi="@Embed('../assets/320/specials-tabs1.png')"
												source480dpi="@Embed('../assets/480/specials-tabs1.png')"
												source640dpi="@Embed('../assets/640/specials-tabs1.png')"/>
					</s:source>
				</s:BitmapImage>
				<s:BitmapImage id="filterimage2" horizontalCenter="0" 
							   contentLoader="{s_imageCache}" alpha="0"  
							   verticalCenter="0">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/specials-tabs2.png')"
												source240dpi="@Embed('../assets/240/specials-tabs2.png')"
												source320dpi="@Embed('../assets/320/specials-tabs2.png')"
												source480dpi="@Embed('../assets/480/specials-tabs2.png')"
												source640dpi="@Embed('../assets/640/specials-tabs2.png')"/>
					</s:source>
				</s:BitmapImage>
				<s:BitmapImage id="filterimage3" horizontalCenter="0"  
							   contentLoader="{s_imageCache}" alpha="0"  
							   verticalCenter="0">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/specials-tabs3.png')"
												source240dpi="@Embed('../assets/240/specials-tabs3.png')"
												source320dpi="@Embed('../assets/320/specials-tabs3.png')"
												source480dpi="@Embed('../assets/480/specials-tabs3.png')"
												source640dpi="@Embed('../assets/640/specials-tabs3.png')"/>
					</s:source>			
				</s:BitmapImage>
				<s:HGroup width="{filterimage1.width}" horizontalCenter="0" height="100%" >
					<s:Group width="33%"  height="100%" id="toggleclick1" click="filterClick(1);" 
							 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
					<s:Group width="33%"  height="100%" id="toggleclick2" click="filterClick(2);" 
							 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
					<s:Group width="33%"  height="100%" id="toggleclick3" click="filterClick(3);" 
							 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
				</s:HGroup>
			</s:Group>
			<s:Group id="selectdroparea" width="100%" maxWidth="{this.width}" height="{75/(320/Capabilities.screenDPI)}">
				<s:Rect left="0" right="0" top="0" bottom="0" width="100%" height="100%">
					<s:fill>
						<s:SolidColor alpha="1" color="#f2f2f2"/>
					</s:fill>
				</s:Rect>
				<s:Image right="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" 
						 visible="{dropDownContainer.alpha == 1}" rotation="90"  verticalCenter="0" contentLoader="{s_imageCache}">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/dropdown.png')"
												source240dpi="@Embed('../assets/240/dropdown.png')"
												source320dpi="@Embed('../assets/320/dropdown.png')"
												source480dpi="@Embed('../assets/480/dropdown.png')"
												source640dpi="@Embed('../assets/640/dropdown.png')"
												/>
					</s:source>
				</s:Image>
				<s:Image right="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" 
						 visible="{dropDownContainer.alpha == 0}"  verticalCenter="0" contentLoader="{s_imageCache}">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/dropdown.png')"
												source240dpi="@Embed('../assets/240/dropdown.png')"
												source320dpi="@Embed('../assets/320/dropdown.png')"
												source480dpi="@Embed('../assets/480/dropdown.png')"
												source640dpi="@Embed('../assets/640/dropdown.png')"
												/>
					</s:source>
				</s:Image>
				<s:HGroup id="selectview1" right="0" left="0" maxWidth="{this.width}"  height="100%" alpha="1"
						  mouseDown="goFilterScreen(0);" 
						  mouseEnabled="true" mouseEnabledWhereTransparent="true" mouseOut="gOut(event)"
						  mouseOver="gOver(event)" mouseUp="gOut(event)" 
						  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle" >
					<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" color="#2dad9e" styleName="textsize1" text="Sort" 
							 verticalAlign="middle" verticalCenter="0"/>
					
					<s:Group left="{90/(320/Capabilities.screenDPI)}" right="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0">
						
						<s:Label id="svi1" visible="true" left="0"  mouseEnabled="false"
								 color="#4d4d4d"  styleName="textsize1"  fontWeight="bold"
								 text="Current Location" verticalCenter="0"/>
						<s:TextInput id="svi2" height="90%" right="{10/(320/Capabilities.screenDPI)}" width="80%" verticalCenter="0" color="#b2b2b2" styleName="textsize1"
									 visible="false" click="svilabelclick();" fontFamily="Arial" keyUp="postalpress(event);" left="0" prompt="Enter Postal Code"
									 borderVisible="false" fontWeight="normal"  contentBackgroundAlpha="0"/>
						<s:TextInput id="svi3" height="90%" click="svilabelclick();" width="80%" keyUp="addressPress(event)" right="{10/(320/Capabilities.screenDPI)}" verticalCenter="0"
									 visible="false" left="0" prompt="Enter Address" color="#b2b2b2" styleName="textsize1"
									 borderVisible="false" fontWeight="normal" fontFamily="Arial"  contentBackgroundAlpha="0"/>
					</s:Group>
					
				</s:HGroup>
				<s:HGroup id="selectview2"  mouseDown="goFilterScreen(1);" maxWidth="{this.width}"    alpha="0" height="100%" width="100%"
						  mouseEnabled="false" mouseEnabledWhereTransparent="false"
						  mouseOver="gOver(event)" mouseOut="gOut(event)" mouseUp="gOut(event)"
						  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle">
					<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false"  color="#2dad9e" 
							 styleName="textsize1" text="Sort" verticalAlign="middle" verticalCenter="0"/>
					<s:Label left="{115/(320/Capabilities.screenDPI)}" id="sv2label" mouseEnabled="false"  color="#4d4d4d" fontWeight="bold" styleName="textsize1"
							 text="All" verticalAlign="middle" verticalCenter="0"/>
				</s:HGroup>
				<s:HGroup id="selectview3"  mouseDown="goFilterScreen(2);" maxWidth="{this.width}"   alpha="0" height="100%" width="100%"
						  mouseEnabled="false" mouseEnabledWhereTransparent="false"
						  mouseOver="gOver(event)" mouseOut="gOut(event)" mouseUp="gOut(event)"
						  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle">
					<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false"  color="#2dad9e" styleName="textsize1" text="Sort"
							 verticalAlign="middle" verticalCenter="0"/>
					<s:Label left="{107/(320/Capabilities.screenDPI)}" id="sv3label" width="{124/(320/Capabilities.screenDPI)}" color="#4d4d4d" fontWeight="bold"
							 mouseEnabled="false" styleName="textsize1" text="Recent"
							 verticalAlign="middle" verticalCenter="0"/>
				</s:HGroup>
			</s:Group>
			<s:List id="specialsList" width="100%" height="100%" 
					horizontalScrollPolicy="off"
					horizontalCenter="0"
					itemRenderer="components.specialsResult" 
					selectedIndex="1"
					click="dataListClick();" >
				<s:layout>
					<s:VerticalLayout horizontalAlign="contentJustify" 
									  variableRowHeight="true" gap="0"/>
				</s:layout>
			</s:List>
		</s:VGroup>
	</s:Scroller>
	<s:Label color="#494949"  id="warn" visible="false" horizontalCenter="0" 
			 styleName="textsize8"  text="No Specials Available" verticalCenter="0"/>
	<s:Label color="#494949"  id="loadingtext" visible="true" horizontalCenter="0" 
			 styleName="textsize8"  text="Loading Specials..." verticalCenter="0"/>
	<s:Group id="dropDownContainer" visible="false" alpha="0" width="100%" 
			 bottom="0" top="{filterarea.height+selectdroparea.height}">
		<s:Rect width="100%"  height="100%" left="0" right="0" top="0" bottom="0" >
			<s:fill>
				<s:SolidColor alpha="0.8" color="#ffffff"/>
			</s:fill>
		</s:Rect>
		<s:List width="100%" horizontalCenter="0" height="100%"
				contentBackgroundAlpha="0" visible="true"
				id="filterList1"  horizontalScrollPolicy="off" 
				dataProvider="{filterData1}"
				itemRenderer="components.dropdownitem"
				click="filter1Click();" >
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify" 
								  gap="0"/>
			</s:layout>
		</s:List>
		<s:List width="100%" horizontalCenter="0" height="100%"
				contentBackgroundAlpha="0" visible="false"
				id="filterList2"  horizontalScrollPolicy="off" 
				dataProvider="{filterData2}"
				itemRenderer="components.dropdownitem"
				click="filter2Click();" >
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify" 
								  gap="0"/>
			</s:layout>
		</s:List>		
		<s:List width="100%" horizontalCenter="0" height="100%"
				contentBackgroundAlpha="0" visible="false"
				id="filterList3"  horizontalScrollPolicy="off" 
				dataProvider="{filterData3}"
				itemRenderer="components.dropdownitem"
				click="filter3Click();" >
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify" 
								  gap="0"/>
			</s:layout>
		</s:List>
		
	</s:Group>
	<components:genericpopup id="popupholder1" icontext="bottomspecialsgreen.png"  text1="Specials" text2="This page shows you specials happening in your area! You can also sort these specials by date and type (food, drink, or events)."  width="100%" height="100%"/>

</s:View>