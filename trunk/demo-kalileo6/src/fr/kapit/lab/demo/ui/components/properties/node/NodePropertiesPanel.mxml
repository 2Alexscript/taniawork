<?xml version="1.0" encoding="utf-8"?>
<s:Group implements="fr.kapit.lab.demo.ui.components.IConfigPanel"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:component="fr.kapit.lab.demo.panel.component.*"
	xmlns:node="fr.kapit.lab.demo.ui.components.properties.node.*"
	width="100%"
>
	<fx:Declarations>
		<s:ArrayCollection id="settingList">
			<component:PropertySelectorHeaderButton
				propertyType="shape"
				state="shapeSettings"
				label="Shape"
				icon="{EmbeddedAssets.IMG_PROPERTY_SHAPE}"
				/>
			<component:PropertySelectorHeaderButton
				propertyType="stroke"
				state="strokeSettings"
				label="Stroke"
				icon="{EmbeddedAssets.IMG_PROPERTY_STROKE}"
				/>
			<component:PropertySelectorHeaderButton
				propertyType="text"
				state="textSettings"
				label="Text"
				icon="{EmbeddedAssets.IMG_PROPERTY_FONT}"
				/>
		</s:ArrayCollection>
	</fx:Declarations>

	<fx:Script>
	<![CDATA[
		import fr.kapit.datavisualization.assets.EmbeddedAssets;
		import fr.kapit.lab.demo.model.ApplicationModel;
		import fr.kapit.lab.demo.ui.components.IConfigPanel;

		import spark.events.IndexChangeEvent;

		/**
		 * @private
		 * Reference to the application model.
		 */
		private var _applicationModel:ApplicationModel = null;

		/**
		 * Method invoked to update the panel according to state of
		 * the data visualization component (selection, style...).
		 */
		public function synchronize():void
		{
			shapeSettings.synchronize();
			strokeSettings.synchronize();
			textSettings.synchronize();
		}

		/**
		 * @private
		 * Handles the click on header buttons, change the settings form.
		 *
		 * @param event
		 */
		protected function settingSelector_changeHandler(event:IndexChangeEvent):void
		{
			currentState = PropertySelectorHeaderButton(settingSelector.selectedItem).state;
		}

		/**
		 * Reference to the current application model.
		 */
		[Bindable]
		public function get appModel():ApplicationModel
		{
			return _applicationModel;
		}
		/** @private */
		public function set appModel(objValue:ApplicationModel):void
		{
			_applicationModel = objValue;
		}
	]]>
	</fx:Script>

	<s:states>
		<s:State name="shapeSettings" />
		<s:State name="strokeSettings" />
		<s:State name="textSettings" />
	</s:states>

	<component:KapPanel width="100%" label="Properties" labelProperty="{settingSelector.selectedItem.label}">

		<component:headerContent>
			<s:Group width="160">
				<component:KapHeaderPanelButtonBar id="settingSelector"
					dataProvider="{settingList}"
					numRows="1" requireSelection="true"
					left="10" top="10" bottom="10"
					change="settingSelector_changeHandler(event)"
				/>
			</s:Group>
		</component:headerContent>

		<component:panelContent>
			<s:VGroup top="10" bottom="10" left="10" width="140">

		<!-- Shape : background properties -->
				<node:ShapeSettings id="shapeSettings"
					appModel="{appModel}"
					includeIn="shapeSettings" itemCreationPolicy="immediate"
					width="100%" gap="10"
				/>
		<!-- Stroke : border properties -->
				<node:StrokeSettings id="strokeSettings"
					appModel="{appModel}"
					includeIn="strokeSettings" itemCreationPolicy="immediate"
					width="100%" gap="10"
				/>
		<!-- Text : font and data properties -->
				<node:TextSettings id="textSettings"
					appModel="{appModel}"
					includeIn="textSettings" itemCreationPolicy="immediate"
					width="100%" gap="10"
				/>

			</s:VGroup>
		</component:panelContent>

	</component:KapPanel>

</s:Group>
