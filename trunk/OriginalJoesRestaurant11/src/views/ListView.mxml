<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:components="components.*"
		dataChange="dataChange(event)"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:dao="dao.*"
		xmlns:renderers="renderers.*"
		title="Check Lists"
		creationComplete="init()">
	<s:navigationContent></s:navigationContent>
	<s:actionContent></s:actionContent>
	<fx:Script source="../func/globalFunctions.as"/>
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import spark.events.IndexChangeEvent;
			import spark.filters.GlowFilter;		
			import events.ReportEvent;
			import model.Report;
			protected var sqlConnection:SQLConnection;
			[Bindable]
			protected var listdata:ArrayCollection;
			[Bindable]
			public var storetitle:String = "Original Joe's";
			[Bindable]
			public var storename:String = "Test Store";
			[Bindable]
			public var storeid:String = "-1";
			[Bindable]
			public var dateFrom:String = "";
			[Bindable]
			public var dateTo:String = "";
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var ti:Timer = new Timer(5000,0);
			[Bindable]
			public var logedin:Boolean = false;
			[Bindable]
			public var ridout:String = "";
			[Bindable]
			public var rnameout:String = "";
			[Bindable]
			public var aauthout:String = "";
			[Bindable]
			public var currentfilter:Number = 1;
			[Bindable]
			public var currentsort:Number = -1;
			[Bindable]
			protected var busy:Boolean = false;
			protected function init():void
			{
				busy = true;
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("restu.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS restu (" +
					"id INTEGER, " +
					"name varchar(255))";
				stmt.execute();
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT * from restu";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				if (resData.length != 0){
					logedin = true;
					setupcont.visible = false;
					mycont.visible = true;
					loadInterface(resData[0].id.toString(),resData[0].name);
				}
				else {
					setupcont.visible = true;
					mycont.visible = false;
					logedin = false;
					busy = false;
				}
			}
			public function loadInterface(id:String, name:String):void {
				storeid = id;
				storename = name;
				/*var pusher:EasyPushExample = new EasyPushExample(storeid);
				var uii:UIComponent = new UIComponent();
				uii.height = 0;
				uii.visible = false;
				uii.width = 0;
				uii.addChild(pusher); 
				mycont.addElement(uii);*/
			
				getTodaysChecklists.send();
				systemManager.addEventListener(ReportEvent.EXPENSE_SAVED, function(event:ReportEvent):void
				{
					getTodaysChecklists.send();
				});
				
			}
			public function verifysetup(event:MouseEvent):void
			{
				warn.visible = false;
				if ((ridinput.text != "")&&(aauthinput.text != "")){
					ridout = ridinput.text;
					aauthout = aauthinput.text;
					setupDevice.send();
				}
			}
			public function afterGetSetupDevice(ev:ResultEvent):void {
				
				var stop:String = "";
				try{
					warn.text = ev.result[0].res.message;
					warn.visible = true;	
					
					if (ev.result[0].res.message == "Success"){
						mycont.visible = true;
						setupcont.visible = false;
						var stmt:SQLStatement = new SQLStatement();
						sqlConnection = new SQLConnection();
						sqlConnection.open(File.applicationStorageDirectory.resolvePath("restu.db"));
						stmt = new SQLStatement();
						stmt.sqlConnection = sqlConnection;
						stmt.sqlConnection = sqlConnection;
						stmt.text = "INSERT into restu values(:id,:name)";
						stmt.parameters[":id"] = ev.result[0].res.id;
						stmt.parameters[":name"] = ev.result[0].res.name;
						
						stmt.execute();
						loadInterface(ev.result[0].res.id.toString(),ev.result[0].res.name);
					}
					else {
						//bad
					}
				}
				catch(e:Error){
					warn.text = ev.result[0].res.message;
					warn.visible = true;
				}	
			}
			public function afterGetTodaysChecklists(ev:ResultEvent):void {
				busy = false;
				listdata = new ArrayCollection();
				try{
					listdata = ev.result[0].ress.res;	
				}
				catch(e:Error){
					try{
						listdata.addItem(ev.result[0].ress.res);
					}
					catch(e:Error){
						//NO CHECK LISTS FOR THIS PERSON
					}
				}
				sortPress(0);
				calculategoodbadcount()
			}
			public function afterGetPreviousCheckLists(ev:ResultEvent):void {
				busy = false
				listdata = new ArrayCollection();
				try{
					listdata = ev.result[0].ress.res;	
				}
				catch(e:Error){
					try{
						listdata.addItem(ev.result[0].ress.res);
					}
					catch(e:Error){
						//NO CHECK LISTS FOR THIS PERSON
					}
				}
				calculategoodbadcount()
			}
			
			
			//FILTER STUFF
			public function filterPress(u:uint):void {
				// 1 : Todays    2 : Previous
				filterBTN.closeDropDown();
				if (currentfilter != u){
					currentfilter = u;
					// Do Action
					if (u == 1){
						//Today
						comp1.visible = false;
						goodcounttext.visible = false;
						hidedatespanprevious();
						getTodaysChecklists.send();
					}
					else if (u == 2){
						//Previous
						comp1.visible = true;
						goodcounttext.visible = true;
						listdata = new ArrayCollection();
						showdatespanprevious();
					}
				}	
			}
			public function searchPreviousDates():void {
				listdata = new ArrayCollection();
				if (previousdate2.selectedDate < previousdate1.selectedDate){
					previousdate2.selectedDate = new Date();
				}
				
				var fmonth:String = (previousdate1.selectedDate.month+1).toString();
				if (fmonth.length == 1){
					fmonth = "0"+fmonth;
				}
				var fday:String = previousdate1.selectedDate.date.toString();
				if (fday.length == 1){
					fday = "0"+fday;
				}
				
				var tmonth:String = (previousdate2.selectedDate.month+1).toString();
				if (tmonth.length == 1){
					tmonth = "0"+tmonth;
				}
				var tday:String = previousdate2.selectedDate.date.toString();
				if (tday.length == 1){
					tday = "0"+tday;
				}

				dateFrom = previousdate1.selectedDate.fullYear.toString()+"-"+fmonth+"-"+fday
				dateTo = previousdate2.selectedDate.fullYear.toString()+"-"+tmonth+"-"+tday
				getPreviousChecklists.send();
				busy = true;
			}
			
			public function sortPress(u:uint):void {
				sortBTN.closeDropDown();
				var dataSortField:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField2:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField3:mx.collections.SortField = new mx.collections.SortField();
				var numericDataSort:Sort = new Sort();
				var stringDataSort:Sort = new Sort();
				currentsort = u;
				sortMode = u;
				if (u == 0){
					dataSortField.name = "datestart";
					dataSortField.compareFunction = function (a:Object, b:Object) : int {
						var na:Number = Number(a.datestart.toString().substr(0,a.datestart.toString().indexOf(":")));
						var nb:Number = Number(b.datestart.toString().substr(0,b.datestart.toString().indexOf(":")));
						
						if (na < nb)
							return -1;
						
						if (na > nb)
							return 1;
						
						return 0;
					};
					dataSortField.numeric = true;
					numericDataSort.fields = [dataSortField];
					listdata.sort = numericDataSort;
				}
				else if (u == 1){
					dataSortField.name = "dateend";
					dataSortField.compareFunction = function (a:Object, b:Object) : int {
						var na:Number = Number(a.dateend.toString().substr(0,a.dateend.toString().indexOf(":")));
						var nb:Number = Number(b.dateend.toString().substr(0,b.dateend.toString().indexOf(":")));
						
						if (na < nb)
							return -1;
						
						if (na > nb)
							return 1;
						
						return 0;
					};
					dataSortField.numeric = true;
					stringDataSort.fields = [dataSortField];
					listdata.sort = stringDataSort;
					
				}
				listdata.refresh();
				list.dataProvider = listdata;
			}
			
			//DATE SPAN STUFF
			public function showdatespanprevious():void {
				var pdate1:Date = previousdate1.selectedDate;
				var pdate2:Date = previousdate2.selectedDate;
				if ((pdate1.fullYear > pdate2.fullYear)||
					((pdate1.month > pdate2.month)&&(pdate1.fullYear == pdate2.fullYear))||
					((pdate1.month == pdate2.month)&&(pdate1.fullYear == pdate2.fullYear)&&(pdate1.date > pdate2.date))){
					previousdate2.selectedDate = previousdate1.selectedDate;
				}
				datespanprevious.height = 150/(132/Capabilities.screenDPI);
				datespanprevious.visible = true;
			}
			public function hidedatespanprevious():void {
				datespanprevious.height = 0;
				datespanprevious.visible = false;
			}
			
			public function calculategoodbadcount():void {
				var goodcount:Number = 0;
				var badcount:Number = 0;
				try{
					for (var i:uint = 0; i < listdata.length; i++){
						if (listdata[i].status == "bad"){
							badcount++;
						}
						else if (listdata[i].status == "good"){
							goodcount++;
						}
					}
				}
				catch(e:Error){
					
				}
				goodcounttext.text = goodcount.toString();
				badcounttext.text = badcount.toString();	
			}
			public function dataChange(event:FlexEvent):void
			{
				try{
					if (this.data.finished == true){
						getTodaysChecklists.send();
					}
				}
				catch(e:Error){}
			}
			
			public function faulty(event:FaultEvent):void
			{
				busy = false;
			}
			public function listClick(){
				dispatchEvent(new ReportEvent(ReportEvent.EDIT_EXPENSE, list.selectedItem))
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<dao:ExpenseReportDAO id="srv"/>
		<s:CurrencyFormatter id="cf" useCurrencySymbol="true"/>
		<s:HTTPService id="getTodaysChecklists" method="GET" 
					   resultFormat="array" 
					   url="http://enactforum.org/originaljoes/v2/restaurant/getTodaysChecklists.php"
					   result="afterGetTodaysChecklists(event)" >
			<s:request xmlns="">
				<storeid>{storeid}</storeid>		
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="getPreviousChecklists" method="GET" 
					   resultFormat="array" fault="faulty(event)"
					   url="http://enactforum.org/originaljoes/v2/restaurant/getPreviousChecklists.php"
					   result="afterGetPreviousCheckLists(event)" >
			<s:request xmlns="">
				<storeid>{storeid}</storeid>	
				<dateFrom>{dateFrom}</dateFrom>	
				<dateTo>{dateTo}</dateTo>	
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="setupDevice" method="GET" 
					   resultFormat="array" 
					   url="http://enactforum.org/originaljoes/v2/restaurant/setupDeviceCheck.php"
					   result="afterGetSetupDevice(event)" >
			<s:request xmlns="">
				<ridout>{ridout}</ridout>
				<aauthout>{aauthout}</aauthout>	
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:VGroup id="setupcont" top="0" 
			  horizontalAlign="left"
			  paddingBottom="{30/(132/Capabilities.screenDPI)}" paddingRight="{30/(132/Capabilities.screenDPI)}" 
			  paddingLeft="{30/(132/Capabilities.screenDPI)}" paddingTop="{30/(132/Capabilities.screenDPI)}" 
			  left="0" visible="false"
			  right="0" bottom="0" gap="{20/(132/Capabilities.screenDPI)}">
		<s:Label text="First Time Setup Install"  styleName="textsize3"/>
		<s:TextInput id="ridinput" prompt="Store ID:"  styleName="textsize3"  autoCapitalize="sentence" width="100%"/>
		<s:TextInput id="aauthinput" prompt="Admin Auth"  styleName="textsize3"  autoCapitalize="sentence"  width="100%"/>
		<components:genericRedButton width="100%" click="verifysetup(event)"
									 height="{60/(132/Capabilities.screenDPI)}" lbl="Setup Device"/>
		<s:Label id="warn" width="100%" visible="false" height="{40/(132/Capabilities.screenDPI)}" text="Warning" textAlign="center"
				 verticalAlign="middle"/>
	</s:VGroup>
	<s:VGroup id="mycont" top="0" left="0" visible="true" right="0" bottom="0" gap="0">
		<s:Line top="0" left="0" right="0" width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#838484" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:Group width="100%">
			<s:CalloutButton id="filterBTN"   label="Filter" color="#177af9" 
							  verticalCenter="0" left="0" height="100%" 
							 calloutDestructionPolicy="never"  skinClass="skins.filterCallout"
							 horizontalPosition="middle" textShadowAlpha="0"
							 verticalPosition="after">
				<s:calloutLayout>
					<s:VerticalLayout paddingTop="{2/(132/Capabilities.screenDPI)}"
									  paddingBottom="{2/(132/Capabilities.screenDPI)}"
									  paddingLeft="{2/(132/Capabilities.screenDPI)}" 
									  paddingRight="{2/(132/Capabilities.screenDPI)}"
									  horizontalAlign="center" gap="{3/(132/Capabilities.screenDPI)}"/>
				</s:calloutLayout>
				<s:calloutContent>			
					<components:dropDownButton id="filter1" labeltext="Todays" 
											   mouseDown="gDown(event)" mouseOver="gOver(event)" 
											   mouseOut="gOut(event)" mouseUp="gOut(event);"
											   width="100%" 
											   height="{40/(132/Capabilities.screenDPI)}"
											   click="filterPress(1);"/>					
					<components:dropDownButton id="filter2" labeltext="Previous" 
											   mouseDown="gDown(event)" mouseOver="gOver(event)" 
											   mouseOut="gOut(event)" mouseUp="gOut(event);"
											   width="100%" 
											   height="{40/(132/Capabilities.screenDPI)}" 
											   click="filterPress(2);"/>							   
				</s:calloutContent>
			</s:CalloutButton>
			<s:VGroup paddingLeft="{10/(132/Capabilities.screenDPI)}" 
					  paddingRight="{10/(132/Capabilities.screenDPI)}" 
					  paddingTop="{14/(132/Capabilities.screenDPI)}"
					  paddingBottom="{8/(132/Capabilities.screenDPI)}"
					   verticalAlign="middle" horizontalAlign="center"
					  gap="{2/(132/Capabilities.screenDPI)}" horizontalCenter="0"  verticalCenter="0" width="50%">
				<s:Label text="{storetitle}"  styleName="textsize2"/>
				<s:Label text="{storename}" styleName="textsize2"/>
			</s:VGroup>
			<s:CalloutButton id="sortBTN" label="Sort"  
							 verticalCenter="0" right="0" height="100%"
							 skinClass="skins.sortCallout"
							 horizontalPosition="middle"  textShadowAlpha="0" color="#177af9"
							 verticalPosition="after" calloutDestructionPolicy="never">
				<s:calloutLayout>
					<s:VerticalLayout paddingTop="{2/(132/Capabilities.screenDPI)}" 
									  paddingBottom="{2/(132/Capabilities.screenDPI)}"
									  paddingLeft="{302(132/Capabilities.screenDPI)}" 
									  paddingRight="{2/(132/Capabilities.screenDPI)}" 
									  horizontalAlign="center" 
									  gap="{3/(132/Capabilities.screenDPI)}"/>
				</s:calloutLayout>
				<s:calloutContent>
					<components:dropDownButton id="sort1" labeltext="Start Time" 
											   mouseDown="gDown(event)" mouseOver="gOver(event)" 
											   mouseOut="gOut(event)" mouseUp="gOut(event);"
											   width="100%" height="{40/(132/Capabilities.screenDPI)}" click="sortPress(0);"/>	
					<components:dropDownButton id="sort2" labeltext="End Time" 
											   mouseDown="gDown(event)" mouseOver="gOver(event)" 
											   mouseOut="gOut(event)" mouseUp="gOut(event);"
											   width="100%" height="{40/(132/Capabilities.screenDPI)}" click="sortPress(1);"/>	
				</s:calloutContent>
			</s:CalloutButton>
		</s:Group>
		<s:VGroup verticalAlign="middle" id="datespanprevious" visible="false" height="0" width="100%">
			<s:Line top="0" left="0" right="0" width="100%">
				<s:stroke>
					<s:SolidColorStroke color="#838484" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Group width="100%">
				<s:HGroup verticalAlign="middle" 
						  paddingLeft="{8/(132/Capabilities.screenDPI)}" 
						  paddingTop="{5/(132/Capabilities.screenDPI)}" 
						  paddingRight="{8/(132/Capabilities.screenDPI)}" 
						  width="100%" gap="0">
					<s:Label width="50%" text="Date From"  styleName="textsize2" />
					<s:Label width="50%" text="Date To"  styleName="textsize2" />		
				</s:HGroup>
				<s:Label verticalCenter="0" right="{5/(132/Capabilities.screenDPI)}" 
						 mouseOut="tOut(event)" mouseOver="tOver(event)"
						 mouseDown="tOver(event)"  mouseUp="tOut(event)"
						 text="Search" color="#177af9" click="searchPreviousDates();" />	
			</s:Group>
			<s:HGroup   width="100%" gap="0">
				<s:DateSpinner id="previousdate1"   width="100%" height="{100/(132/Capabilities.screenDPI)}" displayMode="date" 
							   maxDate="{new Date()}"  minDate="{new Date(2012,01,01,0,0,0,0)}"	>	
				</s:DateSpinner>
				<s:DateSpinner id="previousdate2" width="100%" height="{100/(132/Capabilities.screenDPI)}" displayMode="date"
							   maxDate="{new Date()}" minDate="{new Date(2012,01,01,0,0,0,0)}"	>
				</s:DateSpinner>
			</s:HGroup>
		</s:VGroup>
		<s:Line top="{1/(132/Capabilities.screenDPI)}" left="0" right="0" width="100%">
			<s:stroke>
				<s:SolidColorStroke color="#838484" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:List id="list" width="100%" top="10" height="100%" dataProvider="{listdata}" 
				itemRenderer="components.checkListItem" alternatingItemColors="[0xf5f5f5,0xebebeb ]" 
				change="listClick();">
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify"  gap="1"
								  variableRowHeight="true"/>
			</s:layout>
		</s:List>
		<s:SkinnableContainer styleName="footer" width="100%"
							  height="{40/(132/Capabilities.screenDPI)}" backgroundAlpha="0">
			<s:Line top="0" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke color="#838484" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Line top="1" left="0" right="0">
				<s:stroke>
					<s:SolidColorStroke color="#FFFFFF" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
				<s:Label styleName="textsize3" text="Incomplete:" color="#970707" 
						 left="{8/(132/Capabilities.screenDPI)}" 
						 verticalCenter="2"/>
				<s:Label styleName="textsize3" id="badcounttext" text="" fontWeight="bold" 
						 right="{8/(132/Capabilities.screenDPI)}" 
						 verticalCenter="{2/(132/Capabilities.screenDPI)}"/>
				<s:Label id="comp1" text="Complete:"  
						 styleName="textsize3" color="#009F07" left="{8/(132/Capabilities.screenDPI)}" visible="false"
						 verticalCenter="{2/(132/Capabilities.screenDPI)}"/>
				<s:Label  id="goodcounttext" text=""   styleName="textsize3"
						  fontWeight="bold" visible="false" 
						  right="{8/(132/Capabilities.screenDPI)}"
						  verticalCenter="{2/(132/Capabilities.screenDPI)}"/>
			</s:HGroup>
		</s:SkinnableContainer>
	</s:VGroup>
	<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>
</s:View>