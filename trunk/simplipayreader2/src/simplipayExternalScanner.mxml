<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	splashScreenImage="@Embed('assets/logo.png')" splashScreenScaleMode="letterbox"
	persistNavigatorState="true" navigatorStateSaving="onPersisting(event)" 
	navigatorStateLoading="onRestoring(event)"
	applicationDPI="160"	applicationComplete="onApplicationComplete()">

	<fx:Style >
		/* CSS file */
		@namespace s "library://ns.adobe.com/flex/spark";
		s|ActionBar
		{
			
			defaultButtonAppearance: normal;
			skinClass: ClassReference("spark.skins.mobile.ActionBarSkin");
			textShadowAlpha: .65;
			textShadowColor: #000000;
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 2;
			chromeColor: #02446F;
			titleAlign: center;
			
		}
		
		s|ActionBar #titleDisplay
		{
			color: #FFFFFF; /* default color is white */
			fontSize: 20;
			fontFamily: "_sans";
		}
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #02446F;
			color: #FFFFFF;
			fontSize: 12;
			fontWeight: normal;
			iconPlacement: top;
			interactionMode: mouse;
			fontFamily: "_sans";
		}
		
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import flash.events.UncaughtErrorEvent; // Requires Flash Player 10.1
			import mx.events.FlexEvent;

			protected function onApplicationComplete():void
			{
				// Handle orientation change events if auto-orient is true
				if (stage.autoOrients)
				{
					this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
				}

				// Request to be notified when the display state changes (minimized, maximized)
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);

				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);

				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);

				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);

				// Capture exiting event
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);

				// Set the idle mode to KEEP AWAKE
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;

			}

			// Handle device orientation changes
			protected function onOrientationChange(event:StageOrientationEvent):void
			{
				trace("Orientation changed from " + event.beforeOrientation + " to " + event.afterOrientation);
				switch (event.afterOrientation)
				{
					case StageOrientation.DEFAULT:
						trace("Default orientation");
						break;
					case StageOrientation.ROTATED_RIGHT:
						trace("Rotated right");
						break;
					case StageOrientation.ROTATED_LEFT:
						trace("Rotated left");
						break;
					case StageOrientation.UPSIDE_DOWN:
						trace("Upside down");
						break;
					case StageOrientation.UNKNOWN:
						trace("Unknown");
						break;
				}
			}

			// The application display state has changed
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
 			{
				trace("Handling application activate event");
				stage.frameRate=24; 
			}

			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				System.gc();
				stage.frameRate=2;
			}

			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}

			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}

			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}

			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
			}
		]]>
	</fx:Script>

	<s:ViewNavigator label="Home"  firstView='views.Home' width="100%" height="100%"/>
	<s:ViewNavigator label='Scanner' firstView='views.EXScanner' width="100%" height="100%"/>
</s:TabbedViewNavigatorApplication>