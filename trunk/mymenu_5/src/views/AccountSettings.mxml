<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true"
		xmlns:s="library://ns.adobe.com/flex/spark" backgroundColor="#000000"
		menuKeyPressed="navigator.popView()"
		backKeyPressed="navigator.popView()" actionBarVisible="false"
		title="Account" viewActivate="onActivate(event)" xmlns:components="components.*" >

	<fx:Script>
		<![CDATA[
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			import mx.collections.ArrayCollection;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.components.supportClasses.StyleableTextField;
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			public var profDraging:Boolean = false;
			[Bindable]
			public var locationType:String = "1";
			[Bindable]
			public var currentSelectedLocationName:String = "";
			[Bindable]
			public var currentSelectedWaitTime:String = "7 min";
			[Bindable]
			public var currentSelectedAddress:String = "";
			[Bindable]
			public var mylat:Number = -1;
			[Bindable]
			public var mylong:Number = -1;
			[Bindable]
			public var myradius:Number = 50;
			[Bindable]
			public var radiusOptions:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mysearch:String = "";
			[Bindable]
			public var catArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var emailGo:String = "";
			protected var sqlConnection:SQLConnection;
			protected var g:Geolocation = new Geolocation(); 
			[Bindable]
			public var busy:Boolean = true;
			protected function onUpdate(event:GeolocationEvent):void
			{
				mylat = event.latitude;
				mylong = event.longitude;
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			public function onActivate(event:Event):void
			{
			
				busy = false;
				catArray =  new ArrayCollection();
				catArray.addItem({name:"Change Password"});
				storeList.dataProvider = catArray;
				headitem.imgo.addEventListener(MouseEvent.CLICK,goback);
			}
			public function afterGetAllCategories(ev:ResultEvent):void  {
			
				
			}
			public function catListChange(ev:IndexChangeEvent):void {
				//storeList.selectedItem.name
				try{
					if (storeList.selectedItem.name == "Change Password"){
						navigator.pushView(AccountSettingsChangePwd);
					}
					else if (storeList.selectedItem.name == "Change Quick Pin"){
						//navigator.pushView(AccountSettingsChangeQuickPin);
					}
				}
				catch(e:Error){
					
				}
				

			}
		
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function press(event:KeyboardEvent):void {
				if ((event.keyCode == 13)||(event.charCode == 13)){
					//searchClick();
				}
			}
			public function goback(ev:MouseEvent):void {
				navigator.popView();
			}
			public function searchClick():void {
				
			}
			public function goFilter():void {
			}
		]]>
	</fx:Script>
	
	<s:VGroup height="95%" horizontalCenter="0" verticalCenter="0"  width="85%"  >
		<components:headeritem id="headitem" lbl="Account Settings"/>
	
		<s:List width="100%" horizontalCenter="0" top="40" bottom="0" contentBackgroundAlpha="1" 
				id="storeList" labelField="name"  
				dataProvider="{catArray}" itemRenderer="components.catResult"
				selectedIndex="1" change="catListChange(event);"  >
			
		</s:List>
	</s:VGroup>
	<s:BusyIndicator visible="{busy}" symbolColor="#FFFFFF" verticalCenter="0" horizontalCenter="0"/>
</s:View>