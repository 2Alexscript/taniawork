<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		title="My Menu" viewActivate="view1_viewActivateHandler(event)"
		backgroundColor="#e8e8e8"
		xmlns:components="components.*" 
		xmlns:cs="cs.*" xmlns:ns="http://www.flextras.com/mxml">
	
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Bitmap;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.effects.Move;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import spark.effects.Fade;
			import spark.effects.Scale;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			import views.Specials;
			import views.AccountHome;
			[Bindable]
			public var currentBalance:String = "$0.00";	
			public var profileShown:Boolean = false;
			public var chosenMenuOption:uint = 1;
			public var profWaiting:Boolean = false;
			protected var sqlConnection:SQLConnection;
			public var profDraging:Boolean = false;
			import spark.core.ContentCache;
			static public const s_imageCache:ContentCache = new ContentCache();
			[Bindable]
			public var busy:Boolean = true;
			public function create():void
			{	busy = true;
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				getLocalUsers();
			}	
			
			public function loginClick(event:MouseEvent):void
			{	
				this.currentState = 'login';
				logWarning.visible = false;
			}
			public function createNewClick(event:MouseEvent):void {
				this.currentState = 'create';
				newlogWarning.visible = false;
			}
			public function backToLoginOptions():void {
				this.currentState = 'accountinfo';
				try{
					logWarning.visible = false;
				}
				catch(e:Error){
					
				}
				try{
					newlogWarning.visible = false;
				}
				catch(e:Error){
					
				}
			}
			public function authorizeLogin(username:String,userpassword:String):void{	
				busy = true;
				userid = username;
				passid = userpassword;
				checkLogin.send();
			}
			public function afterCheckLogin(ev:ResultEvent):void {
				busy = false;
				if (ev.result[0].res.message == "ok"){
					AddNewLocalUser(ev.result[0].res.email,
						ev.result[0].res.name,
						ev.result[0].res.country);
				}
				else {
					//bad login
					logWarning.text = ev.result[0].res.message;
					logWarning.visible = true;
				}
			}
			protected function getLocalUsers():void
			{
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				
				if (resData.length != 0){
					//good login
					var foundactive:Boolean = false;
					for (var i:uint = 0; i < resData.length; i++){
						if (resData[i].active == "yes"){
							foundactive = true;
					
							try{
								logWarning.visible = false;
							}
							catch(e:Error){
								
							}
							
							try{
								newlogWarning.visible = false;
							}
							catch(e:Error){
								
							}
							var saveManager:PersistenceManager = new PersistenceManager();
							saveManager.setProperty("useremail", resData[i].email);
							navigator.pushView(Home);
							//this.parentDocument.refresh(resData[i].email);	
						}
						
					}			
				}
				else {
				}
				busy = false;
			}
			
			public function AddNewLocalUser(email:String,name:String,country:String):void
			{
				busy = true;
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "delete FROM localuser;";
				stmt.execute();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "INSERT into localuser values(:email,:name,:country,:active)";
				stmt.parameters[":email"] = email;
				stmt.parameters[":name"] = name;
				stmt.parameters[":country"] = country;
				stmt.parameters[":active"] = "yes";
				stmt.execute();
				getLocalUsers();

			}
			public function checkAvailability(username:String,userpassword:String):void {	
				busy = true;
				if ((nemail.text != "")
					&&(nemail.text.indexOf("@") != -1)
					&&(nname.text != "")
					&&(nname2.text != "")
					&&(npassword.text != "")
					&&(npassword2.text != "")
					&&(city.text != "")
					&&(npassword.text == npassword2.text)){
					newlogWarning.visible = false;
					oemail = nemail.text;
					opassword = npassword.text;
					oname1 = nname.text;
					oname2 = nname2.text;
					ocity = city.text;
					oprovince = province.selectedItem.name;
					obirthday = String(dt.selectedDate.day);
					obirthmonth = String(dt.selectedDate.month);
					obirthyear = String(dt.selectedDate.fullYear);
					ogender = gender.selectedValue.toString();
					createNewUser.send();
				}
				else {
					newlogWarning.visible = true;
					busy = false;
				}	
			}
			public function afterCreateNewUser(ev:ResultEvent):void {
				busy = false;
				if (ev.result[0].res.message == "ok"){
					AddNewLocalUser(oemail,
						oname1,
						'canada'
					);
				}
				else {
					newlogWarning.visible = true;
					busy = false;
					newlogWarning.text = ev.result[0].res.message;
				}
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function profDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,1,4,4,1,1,true);
				ev.currentTarget.filters = [gl];		
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				var loadManager:PersistenceManager = new PersistenceManager();
				
				
				if (resData.length != 0){
					navigator.pushView(Home);
					
				}
				else {
					busy = false;
					
				}
				
				
				
			
			}
			protected function userPasswordInput_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == 13){
					authorizeLogin(userNameInput.text,userPasswordInput.text);	
				}
			}
		]]>
	</fx:Script>
	<fx:Declarations>	
		<s:RadioButtonGroup id="newGendergroup"/>
		<fx:String id="userid" />
		<fx:String id="passid" />
		<fx:String id="newEmail2" />
		<fx:String id="newPassword2" />
		<fx:String id="newName2" />
		<fx:String id="newGender2" />
		<fx:String id="newBirthday2" />
		<fx:String id="newBirthmonth2" />
		<fx:String id="newBirthyear2" />
		<fx:String id="newCountry2" />
		<fx:String id="oemail" />
		<fx:String id="opassword" />
		<fx:String id="oname1" />
		<fx:String id="oname2" />
		<fx:String id="oquickpin" />
		<fx:String id="oaddress1" />
		<fx:String id="oaddress2" />
		<fx:String id="ocity" />
		<fx:String id="oprovince" />
		<fx:String id="opostal" />
		<fx:String id="ophone" />
		<fx:String id="obirthday" />
		<fx:String id="obirthmonth" />
		<fx:String id="obirthyear" />
		<fx:String id="ogender" />
		<s:RadioButtonGroup id="gender"/>
		<s:HTTPService id="checkLogin" method="POST" 
					   resultFormat="array" 
					   url="http://mymenuapp.ca/php/login/checkLoginMobile.php"
					   result="afterCheckLogin(event)" >
			<s:request xmlns="">
				<userid>{userid}</userid>		
				<passid>{passid}</passid>		
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="createNewUser" method="POST" 
					   resultFormat="array" 
					   url="http://mymenuapp.ca/php/login/createNewUserMobile.php"
					   result="afterCreateNewUser(event)" >
			<s:request xmlns="">
				<oemail>{oemail}</oemail>		
				<opassword>{opassword}</opassword>	
				<oname1>{oname1}</oname1>		
				<oname2>{oname2}</oname2>	
				<ocity>{ocity}</ocity>
				<oprovince>{oprovince}</oprovince>
				<obirthday>{obirthday}</obirthday>
				<obirthmonth>{obirthmonth}</obirthmonth>
				<obirthyear>{obirthyear}</obirthyear>
				<ogender>{ogender}</ogender>
			</s:request>
		</s:HTTPService>
		<s:MultiDPIBitmapSource id="signinicon"
								source160dpi="@Embed('assets/signinbtnLow.png')"
								source240dpi="@Embed('assets/signinbtnMed.png')"
								source320dpi="@Embed('assets/signinbtnHigh.png')"/>
		<s:MultiDPIBitmapSource id="signupicon"
								source160dpi="@Embed('assets/signupbtnLow.png')"
								source240dpi="@Embed('assets/signupbtnMed.png')"
								source320dpi="@Embed('assets/signupbtnHigh.png')"/>
		<s:MultiDPIBitmapSource id="cancelIcon"
								source160dpi="@Embed('assets/cancelbtnLow.png')"
								source240dpi="@Embed('assets/cancelbtnMed.png')"
								source320dpi="@Embed('assets/cancelbtnHigh.png')"/>
	</fx:Declarations>
	<s:states>
		<s:State name="accountinfo"/>
		<s:State name="loyaltyinfo"/>
		<s:State name="login"/>
		<s:State name="create"/>
	</s:states>
	<s:Scroller left="0"  id="v11" includeIn="accountinfo" visible="{busy == false}"   
				right="0" top="10" bottom="0" 
				verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%" verticalAlign="middle"  horizontalAlign="center"  >
			<s:VGroup  gap="25" width="95%" horizontalCenter="0" verticalCenter="0" 
					   paddingTop="20" bottom="0" horizontalAlign="center" verticalAlign="middle">
				
				<s:Label width="95%" styleName="textsize12" color="#231f20" fontWeight="bold" text="MyMenu" textAlign="center"/>

				
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signupicon}" horizontalCenter="0"
								 click="createNewClick(event)">
				</cs:IconButton>
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signinicon}" horizontalCenter="0"
								 click="loginClick(event)"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
	<s:Scroller left="0" id="v12" includeIn="loyaltyinfo" right="0" top="0" bottom="0" 
				verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		
	</s:Scroller>
	<s:Scroller left="0" id="v2" includeIn="login" right="0" top="0" bottom="0" 
				verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="10" width="95%" horizontalCenter="0" verticalCenter="0" 
					   paddingTop="40" bottom="0" horizontalAlign="center" verticalAlign="middle">
				<s:Label width="95%" fontWeight="bold" text="Sign In" color="#7777777" textAlign="center"/>
				<s:TextInput id="userNameInput" top="62" width="98%" color="#7777777" contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 fontFamily="Arial" horizontalCenter="0" prompt="Email"/>
				<s:TextInput id="userPasswordInput" top="145" width="98%" color="#7777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 displayAsPassword="true" fontFamily="Arial" horizontalCenter="0"
							 keyDown="userPasswordInput_keyDownHandler(event)" prompt="Password"
							 textAlign="left"/>
				
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signinicon}" horizontalCenter="0"
								 click="authorizeLogin(userNameInput.text,userPasswordInput.text)" />
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{cancelIcon}" horizontalCenter="0"
								 click="backToLoginOptions();" />
				<s:Label top="210" fontFamily="_sans" visible="false"  color="#FFFFFF" id="logWarning"
						 fontWeight="bold" horizontalCenter="0"
						 text="Sorry Incorrect Information"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
	<s:Scroller left="0" id="v3" includeIn="create" right="0" top="0" bottom="0"
				verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="10" width="95%" horizontalCenter="0" verticalCenter="0" 
					   top="10" bottom="0" paddingTop="40" horizontalAlign="center" verticalAlign="middle">
				<s:Label width="95%" fontWeight="bold" text="Create Account" textAlign="center"/>
				<s:TextInput id="nemail" top="43" width="98%" color="#777777" horizontalCenter="0"
							 prompt="Email"   fontFamily="Arial"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 textAlign="left"/>
				<s:TextInput id="nname" y="117" width="98%" autoCapitalize="word" color="#777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 fontFamily="Arial" horizontalCenter="0" prompt="First Name"/>
				<s:TextInput id="nname2" y="117" width="98%" autoCapitalize="word" color="#777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 fontFamily="Arial" horizontalCenter="0" prompt="Last Name"/>
				<s:TextInput id="npassword" y="79" width="98%" color="#777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 displayAsPassword="true" fontFamily="Arial" horizontalCenter="0"
							 prompt="Password" textAlign="left"/>
				<s:TextInput id="npassword2" y="79" width="98%" color="#777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 displayAsPassword="true" fontFamily="Arial" horizontalCenter="0"
							 prompt="Verify Password" textAlign="left"/>
				<s:TextInput id="city" y="79" width="98%" autoCapitalize="word" color="#777777"  contentBackgroundColor="#FFFFFF" contentBackgroundAlpha="1"
							 fontFamily="Arial" horizontalCenter="0" prompt="City" textAlign="left"/>
				<s:BorderContainer y="152" width="98%" height="100%" backgroundAlpha="0"
								  borderAlpha="0" horizontalCenter="0">
					<s:Label color="#777777"  fontWeight="bold" text="Province"
							 verticalCenter="0"></s:Label>
					
					<s:SpinnerListContainer right="0" width="20%">
					<s:SpinnerList id="province" right="0" height="100"
								   labelField="name"  width="100%" 
								   verticalCenter="0">
						<s:ArrayList>
							<fx:Object name="AB" />
							<fx:Object name="BC" />
							<fx:Object name="MB" />
							<fx:Object name="NB" />
							<fx:Object name="NS" />
							<fx:Object name="ON" />
							<fx:Object name="QC" />
							<fx:Object name="SK" />
							<fx:Object name="NT" />
							<fx:Object name="YT" />
							<fx:Object name="PE" />
							<fx:Object name="NL" />
							<fx:Object name="NU" />
						</s:ArrayList>                        
					</s:SpinnerList>
					</s:SpinnerListContainer>
				</s:BorderContainer>
				
				<s:BorderContainer y="152" width="98%" height="100%" backgroundAlpha="0"
								   borderAlpha="0" horizontalCenter="0">
					<s:Label color="#777777"  fontWeight="bold" text="Birthday"
							 verticalCenter="0">
					</s:Label>
					<s:DateSpinner id="dt" right="0" height="100" displayMode="date"
								   maxDate="{new Date(2050,01,01)}" minDate="{new Date(1901,01,01)}"
								   minuteStepSize="10" 
								   verticalCenter="0"/>
				</s:BorderContainer>
				<s:HGroup>
					<s:RadioButton label="Male" color="#777777" fontWeight="normal" groupName="gender"
								   selected="true"/>
					<s:RadioButton label="Female" color="#777777" fontWeight="normal"
								   groupName="gender"/>
				</s:HGroup>
			
				<cs:IconButton  top="262" skinClass="skins.ImageButtonSkin" icon="{signupicon}" horizontalCenter="0"
								click="checkAvailability(nemail.text,npassword.text);" />
				<cs:IconButton  top="262" skinClass="skins.ImageButtonSkin" icon="{cancelIcon}" horizontalCenter="0"
								click="backToLoginOptions();" />
				<s:Label top="290"  visible="false" id="newlogWarning" color="#777777" fontWeight="bold" horizontalCenter="0"
						 text="Sorry Incorrect Information"/>						
				<s:Label top="290" width="95%" fontWeight="bold" horizontalCenter="0" color="#777777"
						 text="By Creating an account you agree to My Menu's Terms of Service and Privacy Policy. "
						 textAlign="center"/>
				
				<s:Label top="290" width="95%"
						 click="navigateToURL(new URLRequest('http://mymenuapp.ca/utos'));"
						 color="#174FDE" fontWeight="bold" horizontalCenter="0"
						 text="Terms of Service" textAlign="center" textDecoration="underline"/>
				<s:Label top="290" width="95%" fontWeight="bold" horizontalCenter="0"
						 text="Privacy Policy" textDecoration="underline"
						 textAlign="center"   color="#174FDE"
						 click="navigateToURL(new URLRequest('http://mymenuapp.ca/pol'));"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
	<s:BusyIndicator visible="{busy}" symbolColor="#777777" verticalCenter="0" horizontalCenter="0"/>
</s:View>