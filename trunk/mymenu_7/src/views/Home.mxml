<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  xmlns:maps="com.google.maps.*" 	
		xmlns:mx="library://ns.adobe.com/flex/mx" viewActivate="onActivate(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" xmlns:model="model.*" 
		backgroundColor="#FFFFFF" title="MyMenu" xmlns:components="components.*" >
	<s:navigationContent  >	
		<s:HGroup paddingLeft="25" >
			<s:Image  click="navigator.pushView(AccountSettings)">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('assets/pocketicons/ShareRecents_PlainAvatar.png')"
											source240dpi="@Embed('assets/pocketicons/ShareRecents_PlainAvatar@2x.png')"
											source320dpi="@Embed('assets//pocketicons/ShareRecents_PlainAvatar@2x.png')"/>
				</s:source>
			</s:Image>
		</s:HGroup>
	</s:navigationContent>
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Bitmap;
			import flash.display.Sprite;
			import flash.events.MouseEvent;
			import flash.filesystem.File;			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.events.ResultEvent;
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			[Bindable]
			public var emailGo:String = "";
			[Bindable]
			public var nameGo:String = "";
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var homeitems:ArrayCollection = new ArrayCollection(
				[{label:"Restaurants",img:"../assets/backgrounds/resback.jpg",colorid:"0x50bcb6"},
					{label:"Specials",img:"../assets/backgrounds/mapback.jpg",colorid:"0xef4056"},
					{label:"Restrictions",img:"../assets/backgrounds/restback.jpg",colorid:"0xfcb643"}
				]);
			
			public function onActivate(event:Event):void
			{
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser";
					stmt.execute();
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					
					if (resData.length != 0){
						//good login
						var foundactive:Boolean = false;
						for (var i:uint = 0; i < resData.length; i++){
							if (resData[i].active == "yes"){
								foundactive = true;
								emailGo = resData[i].email;
								nameGo = resData[i].name;
								welcomelabel.text = "Hi, "+nameGo.substring(0,1).toUpperCase()+nameGo.substring(1,nameGo.length)+"!";

							}
						}
					}
					else {
					}
				}
				catch(e:Error){}		
				listlist.dataProvider = homeitems;
				scroller.visible = true;
			}
			
			public function listChange(ev:IndexChangeEvent):void {
				try{
					if (ev.currentTarget.selectedItem.label == "Restaurants"){
						navigator.pushView(StoreCategory)
					}
					else if (ev.currentTarget.selectedItem.label == "Specials"){
						navigator.pushView(Specials)
					}
					else if (ev.currentTarget.selectedItem.label == "Restrictions"){
						navigator.pushView(Restrictions)
					}	
				}
				catch(e:Error){}
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function usermenuclick():void {
				navigator.pushView(AccountSettings);
			}
			public function logout():void {
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update localuser set active = 'no' where email = '"+emailGo+"'";
					stmt.execute();
					emailGo = "";
					nameGo = "";
					var saveManager:PersistenceManager = new PersistenceManager();
					saveManager.setProperty("useremail", "ERRORBADERRORBAD");
					navigator.pushView(Login);
				}
				catch(e:Error){
					navigator.pushView(Login);
				}
			}
		]]>
	</fx:Script>
		<s:Scroller id="scroller" visible="false" height="100%" width="95%" horizontalCenter="0"
					horizontalScrollPolicy="off" verticalScrollPolicy="on">
			<s:VGroup  height="100%" gap="10" width="100%" horizontalAlign="center" verticalAlign="bottom">
				<s:Label id="welcomelabel" top="100" width="100%" height="87" color="#7777777" fontSize="80"
						 horizontalCenter="0" styleName="textsize18" />
				
				<s:List width="100%" horizontalCenter="0" height="100%"
						itemRenderer="components.homeItem"
						id="listlist"  horizontalScrollPolicy="off" 
						dataProvider="{homeitems}" change="listChange(event);"
						 >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="10"/>
					</s:layout>
				</s:List>
				
			</s:VGroup>
		</s:Scroller>
</s:View>