<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		viewActivate="onActivate(event)"  backgroundColor="#22252a"
		title="My Deals" >
	<s:navigationContent >
		<s:Image x="0" y="-2" click="navigator.popView();" mouseDown="gDown(event)"
				 mouseOut="gOut(event)" mouseOver="gOver(event)">
			<s:source>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/interfaceimages/multi/backbtnLow.png')"
										source240dpi="@Embed('assets/interfaceimages/multi/backbtnMed.png')"
										source320dpi="@Embed('assets/interfaceimages/multi/backbtnHigh.png')"/>
			</s:source>
		</s:Image>
	</s:navigationContent>
	
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.Config;
			import com.mapquest.DistanceUnits;
			import com.mapquest.LatLng;
			import com.mapquest.mobile.TextUtil;
			import com.mapquest.services.directions.DirectionsConstants;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.ShapeCollection;
			import com.mapquest.tilemap.controls.shadymeadow.SMZoomControl;
			import com.mapquest.tilemap.pois.*;
			
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			public var profDraging:Boolean = false;
			[Bindable]
			public var emailGo:String = "";
			[Bindable]
			public var purchasedArray:ArrayCollection = new ArrayCollection();
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var busy:Boolean = true;
		
			public function onActivate(event:Event):void
			{
				busy = true;
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
					stmt.execute();
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					
					if (resData.length != 0){
						//good login
						emailGo = resData[0].email;
						getPurchased.send();	
					}
					else {
						//bad login or no local saved login.
						var stop:String = "";	
						navigator.popView();
					}	
				}
				catch(e:Error){
					
				}	
				
				
				
			}
			
			public function afterGetPurchased(ev:ResultEvent):void {
				
				busy = false;
				purchasedArray =  new ArrayCollection();
				try{
					purchasedArray = ev.result[0].res;
					
				}
				catch(e:Error){
					try{
						/*var id:String = ev.result[0].res.id;
						var date:String = ev.result[0].res.date;
						var name:String = ev.result[0].res.name;
						var description:String = ev.result[0].res.description;
						var image:String = ev.result[0].res.image;
						var title:String = ev.result[0].res.title;
						var value:String = ev.result[0].res.value;
						var imagelarge:String = ev.result[0].res.imagelarge;
						var imagesmall:String = ev.result[0].res.imagesmall;
						var cost:String = ev.result[0].res.cost;
						purchasedArray.addItem({id:id,name:name,cost:cost,imagesmall:imagesmall,imagelarge:imagelarge,title:title,description:description,value:value,
							image:image,date:date});*/
						purchasedArray.addItem(ev.result[0].res);

					}
					catch(e:Error){
						var stop:String = "";
					}
				}
			}
		
			public function purchasedChange(ev:IndexChangeEvent):void {
				if (ev.newIndex != -1){
					/*var id:String = ev.currentTarget.selectedItems[0].id;
					var date:String = ev.currentTarget.selectedItems[0].date;
					var description:String = ev.currentTarget.selectedItems[0].description;
					var image:String = ev.currentTarget.selectedItems[0].image;
					var title:String = ev.currentTarget.selectedItems[0].title;
					var value:String = ev.currentTarget.selectedItems[0].value;
					var imagelarge:String = ev.currentTarget.selectedItems[0].imagelarge;
					var imagesmall:String = ev.currentTarget.selectedItems[0].imagesmall;
					var cost:String = ev.currentTarget.selectedItems[0].cost;
					navigator.pushView(couponUsage, {id:id,email:emailGo,name:name,cost:cost,imagesmall:imagesmall,
						imagelarge:imagelarge,title:title,description:description,value:value,
						image:image,date:date});	*/
					navigator.pushView(DailyDealsItem, ev.currentTarget.selectedItems[0]);					

				}
			}
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				try{
					trace(purchasedList.scroller.verticalScrollBar.value);
					if(purchasedList.scroller.verticalScrollBar.value < -90){
						loadingGroup2.visible = false;
						//	listData.addItemAt({text:"loading..."},0);
						
					} 
				}
				catch(e:Error){
					
				}
			}
			
			protected function list_mouseMoveHandler(event:MouseEvent):void
			{ 
				try{
					var vScroll:Number = purchasedList.scroller.verticalScrollBar.value;
					if(vScroll < -20){
						trace(vScroll);
						if(!loadingGroup2.visible){
							loadingGroup2.visible = true;
							fadeIn.play();
						}
						loadingGroup2.y = vScroll*-1 - 60;
						
						if(vScroll < -90){
							trace(arrowImage.rotation); 
							if(arrowImage.rotation == 0)  {
								arrowImage.rotation = 180;
							}
							loadText.text = "Release to refesh...";
							
						}else{
							if(arrowImage.rotation == 180)  {
								arrowImage.rotation = 0;
							}
							loadText.text = "Pull down to refresh";
						}
						
					}else{
						loadingGroup2.visible = false;
					}
				}
				catch(e:Error){
					
				}
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function press(event:KeyboardEvent):void {
				searchClick();
			}
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
				var s:String = "";
				
			}
			public function searchClick():void {
				purchasedArray.filterFunction = filterCompleted;
				purchasedArray.refresh();
				purchasedList.dataProvider = purchasedArray;
				var s:String = "";
				s.toLowerCase()
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.description.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.value.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.cost.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			public function goFilter():void {
				navigator.pushView(HomeSimpliSaveFilter);
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
	
		<s:HTTPService id="getPurchased" method="GET" 
					   resultFormat="array" 
					   url="http://simplipay.ca/php/purchasedcoupons/getAllPurchased.php"
					   result="afterGetPurchased(event)" >
			<s:request xmlns="">
				<emailGo>{emailGo}</emailGo>		
			</s:request>
		</s:HTTPService>
		<s:Fade id='fadeIn' target="{loadingGroup2}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
		<s:BorderContainer x="0" y="0"  borderVisible="false" backgroundAlpha="1" borderAlpha="0"
						   dropShadowVisible="false" backgroundColor="#22252a" width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingLeft="5" paddingRight="5" verticalAlign="middle" height="100%">
				<s:TextInput id="key" left="5" right="5" top="1" width="100%" height="75%"
							 enter="searchClick();" keyUp="press(event);" prompt="Search Deals"
							 returnKeyLabel="search"/>
				<!--s:TextInput id="key" left="5" right="5" top="1" width="100%" height="25"
				enter="searchClick();" keyUp="press(event);" prompt="Search Stores"
				returnKeyLabel="search" skinClass="components.searchinput"/-->
				<s:Image click="searchClick();" mouseDown="profDown(event)" mouseUp="profUp(event)">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('assets/interfaceimages/multi/searchLow.png')"
												source240dpi="@Embed('assets/interfaceimages/multi/searchMed.png')"
												source320dpi="@Embed('assets/interfaceimages/multi/searchHigh.png')"/>
					</s:source>
				</s:Image>
			</s:HGroup>
		</s:BorderContainer>
	<s:Group width="100%" height="100%">
		<s:BorderContainer  backgroundColor="#22252a" backgroundAlpha="1" top="0" bottom="0" borderAlpha="0" width="100%"  >
			<s:List width="95%" horizontalCenter="0" top="0" bottom="0" contentBackgroundAlpha="1" 
					contentBackgroundColor="#22252a"   id="purchasedList" labelField="name"  
					dataProvider="{purchasedArray}" itemRenderer="components.dailyDealsListItem"
					selectedIndex="1" change="purchasedChange(event);" 
					mouseMove="list_mouseMoveHandler(event)" mouseUp="list_mouseUpHandler(event)" >
				<s:layout>
					<s:VerticalLayout gap="15">
					</s:VerticalLayout>
				</s:layout>
			</s:List>
			<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" id="loadingGroup2" visible="false" height="50">
				<s:Image id="arrowImage"  source="@Embed('assets/interfaceimages/original/Arrow-double-up-48.png')"/>
				<s:Label text="Pull down to refresh"  id="loadText"/>
			</s:HGroup>
		</s:BorderContainer>
	</s:Group>
	</s:VGroup>
	<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>
</s:View>