<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		backgroundColor="#e8e8e8"
		menuKeyPressed="navigator.pushView(Home)"
		backKeyPressed="navigator.popView()" 
		title="Settings" viewActivate="onActivate(event)" 
		xmlns:components="components.*" >
	<s:actionContent>
	</s:actionContent>
	<fx:Script source="../func/loadingfunctions.as"/>
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.managers.PersistenceManager;
			[Bindable]
			public var catArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var emailGo:String = "";
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var busy:Boolean = true;
			public function onActivate(event:Event):void
			{
				catArray =  new ArrayCollection();
				catArray.addItem({name:"Notifications", type:0, chosen:'no'});
				catArray.addItem({name:"Account", type:1, chosen:'no'});
				catArray.addItem({name:"About", type:1, chosen:'no'});
				catArray.addItem({name:"Terms of Service and Privacy", type:1, chosen:'no'});
				catArray.addItem({name:"Log Out", type:2, chosen:'no'});
				settingsList.dataProvider = catArray;
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser";
					stmt.execute();
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (resData.length != 0){
						var foundactive:Boolean = false;
						for (var i:uint = 0; i < resData.length; i++){
							if (resData[i].active == "yes"){
								foundactive = true;
								emailGo = resData[i].email;
							}
						}
					}
					else {
					}
				}
				catch(e:Error){
				}
				busy = false;
			}
			public function catListClick(ev:MouseEvent):void {
				try{
					if (settingsList.selectedItem.name == "Notifications"){
						if (settingsList.selectedItem.chosen == 'no'){
							settingsList.selectedItem.chosen == 'yes';
							catArray[0].chosen = 'yes';
						}
						else {
							settingsList.selectedItem.chosen = 'no';
							catArray[0].chosen = 'no';
						}
						
						catArray.refresh();
						settingsList.dataProvider = catArray;
					}
					else if (settingsList.selectedItem.name == "Account"){
						navigator.pushView(AccountSettings);
					}
					else if (settingsList.selectedItem.name == "About"){
						
					}
					else if (settingsList.selectedItem.name == "Terms of Service and Privacy"){
						
					}
					else if (settingsList.selectedItem.name == "Log Out"){
						logout();
					}
				}
				catch(e:Error){	
					var stop:String = "";
				}
			}
			public function logout():void {
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					var stmt:SQLStatement = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update localuser set active = 'no' where email = '"+emailGo+"'";
					stmt.execute();
				
					var saveManager:PersistenceManager = new PersistenceManager();
					saveManager.setProperty("useremail", "ERRORBADERRORBAD");
					navigator.pushView(Login);
				}
				catch(e:Error){
					navigator.pushView(Login);
				}
			}
		]]>
	</fx:Script>
	<s:VGroup height="100%" horizontalCenter="0" verticalCenter="0"  width="100%"  >
		<s:List width="100%" horizontalCenter="0" height="100%" contentBackgroundAlpha="0" 
				id="settingsList" labelField="name"  
				dataProvider="{catArray}" itemRenderer="components.catResult"
				 click="catListClick(event)"  >
			<s:layout>
				<s:VerticalLayout horizontalAlign="contentJustify"   gap="0"/>
			</s:layout>
		</s:List>
	</s:VGroup>
	
</s:View>