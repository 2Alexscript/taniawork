<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		menuKeyPressed="navigator.popToFirstView()"
		backKeyPressed="navigator.popToFirstView()"
		xmlns:s="library://ns.adobe.com/flex/spark"
		viewActivate="view1_activateHandler(event)" 
		creationComplete="init(event)"
		title="Local Wait Times" backgroundAlpha="0">
	<s:navigationContent>
		<s:Button icon="@Embed('assets/home.png')" 
				  click="navigator.popToFirstView();"/>
	</s:navigationContent>
	<s:titleContent>
		
		<s:TextInput id="key" width="100%"/>
		
		<!--s:Label x="51" width="255" color="#FFFFFF" fontFamily="_sans" fontSize="16"
				 fontWeight="bold" text="Local Wait Times"/-->
	</s:titleContent>
	<s:actionContent>
		<s:Button icon="@Embed('assets/search.png')" click="searchClick(event)" />  
	</s:actionContent> 
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			
			import model.Smurf;
			
			import mx.collections.ArrayCollection;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			
			protected var g:Geolocation = new Geolocation();    
			[Bindable]
			public var frontview:Boolean = true;
			[Bindable]
			public var listData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var locationType:String = "1";
			[Bindable]
			public var currentSelectedLocationName:String = "";
			[Bindable]
			public var currentSelectedWaitTime:String = "7 min";
			[Bindable]
			public var currentSelectedAddress:String = "";
			[Bindable]
			public var smurf:Smurf;
			[Bindable]
			public var mylat:Number = -1;
			[Bindable]
			public var mylong:Number = -1;
			[Bindable]
			public var myradius:Number = 50;
			[Bindable]
			public var radiusOptions:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mysearch:String = "";
			protected function view1_activateHandler(event:Event):void
			{
				locationType = data.locationType;
				if (Geolocation.isSupported)
				{
					g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
					addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
				}
				else
				{	
					mylat = 53.59221;
					mylong = -113.54009;
					getLocations.send();
				}					
			}	
			protected function onUpdate(event:GeolocationEvent):void
			{
				if (key.text == ""){
					mylat = event.latitude;
					mylong = event.longitude;
					getLocations.send();
				}
				
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			public function init(event:FlexEvent):void
			{
				radiusOptions = new ArrayCollection();
				radiusOptions.addItem({label:10});
				radiusOptions.addItem({label:20});
				radiusOptions.addItem({label:50});
				radiusOptions.addItem({label:75});
				radiusOptions.addItem({label:90});
				avgRadius.selectedIndex = 2;
				currentSelectedLocationName = "Local Wait Times";	
			}
			
			public function afterGetLocations(event:ResultEvent):void
			{
				var stop:String = "";
				listData = new ArrayCollection();
				try{
					
					listData = event.result[0].res.re;
					clinicList.dataProvider = listData;
					var totalDistance:Number = 0;
					for (var i:uint = 0; i < listData.length; i++){
						var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
						totalDistance = totalDistance + Number(listData[i].distance);
					}
					var avgText:String = (totalDistance/i).toString();
					if (avgText.length > 4){
						avgText = avgText.substr(0,4);
					}
					avgMin.text = avgText+" km";
				}
				catch(e:Error){
					try{
						
						listData.addItem(event.result[0].res.re);
						clinicList.dataProvider = listData;
						var totalDistance:Number = 0;
						for (var i:uint = 0; i < listData.length; i++){
							var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
							totalDistance = totalDistance + Number(listData[i].distance);
						}
						var avgText:String = (totalDistance/i).toString();
						if (avgText.length > 4){
							avgText = avgText.substr(0,4);
						}
						avgMin.text = avgText+" km";
					}
					catch(e:Error){
						
					}
				}
			} 
			public function afterSearchLocations(event:ResultEvent):void
			{
				var stop:String = "";
				listData = new ArrayCollection();
				try{
				
					listData = event.result[0].res.re;
					clinicList.dataProvider = listData;
					var totalDistance:Number = 0;
					for (var i:uint = 0; i < listData.length; i++){
						var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
						totalDistance = totalDistance + Number(listData[i].distance);
					}
					var avgText:String = (totalDistance/i).toString();
					if (avgText.length > 4){
						avgText = avgText.substr(0,4);
					}
					avgMin.text = avgText+" km";
				}
				catch(e:Error){
					try{
						
						
						listData.addItem(event.result[0].res.re);
						clinicList.dataProvider = listData;
						var totalDistance:Number = 0;
						for (var i:uint = 0; i < listData.length; i++){
							var latlng:LatLng = new LatLng(listData[i].lat,listData[i].long);
							totalDistance = totalDistance + Number(listData[i].distance);
						}
						var avgText:String = (totalDistance/i).toString();
						if (avgText.length > 4){
							avgText = avgText.substr(0,4);
						}
						avgMin.text = avgText+" km";
					}
					catch(e:Error){
						//todo coming soon
					}
				}
			}
			public function clinicListChange(ev:IndexChangeEvent):void {
				var stop:String = "";
				if (ev.newIndex != -1){
					var address:String = ev.currentTarget.selectedItems[0].address;
					//var description:String = ev.currentTarget.selectedItems.address;
					var id:String = ev.currentTarget.selectedItems[0].id;
					var lat:Number = Number(ev.currentTarget.selectedItems[0].lat);
					var long:Number = Number(ev.currentTarget.selectedItems[0].long);
					var name:String = ev.currentTarget.selectedItems[0].name;
					var number:String = ev.currentTarget.selectedItems[0].number;
					var type:String = ev.currentTarget.selectedItems[0].type;
					currentSelectedLocationName = name;
					currentSelectedAddress = lat+", "+long;
					var waittimeText:String = (ev.currentTarget.selectedItems[0].distance).toString();
					if (waittimeText.length > 4){
						waittimeText = waittimeText.substr(0,4);
					}
					currentSelectedWaitTime = waittimeText+" km";
					navigator.pushView(itemDescription, {id:id,address:address,lat:lat,long:long,name:name,type:type,number:number,
						currentSelectedLocationName:currentSelectedLocationName,currentSelectedAddress:currentSelectedAddress,
						mylat:mylat,mylong:mylong,
						currentSelectedWaitTime:currentSelectedWaitTime});					
				}
		
			}
			public function radiusChange(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				myradius = Number(avgRadius.selectedItem.label);
				getLocations.send();
			}
			protected function list_mouseUpHandler(event:MouseEvent):void
			{
				try{
				trace(clinicList.scroller.verticalScrollBar.value);
				if(clinicList.scroller.verticalScrollBar.value < -90){
					loadingGroup.visible = false;
				//	listData.addItemAt({text:"loading..."},0);
					locationType = data.locationType;
					if (Geolocation.isSupported)
					{
						g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
						addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
					}
					else
					{	
						mylat = 53.59221+Math.random();
						mylong = -113.54009+Math.random();
						getLocations.send();
					}		
				} 
				}
				catch(e:Error){
					
				}
			}
			
			protected function list_mouseMoveHandler(event:MouseEvent):void
			{ 
				try{
				var vScroll:Number = clinicList.scroller.verticalScrollBar.value;
				if(vScroll < -20){
					trace(vScroll);
					if(!loadingGroup.visible){
						loadingGroup.visible = true;
						fadeIn.play();
					}
					loadingGroup.y = vScroll*-1 - 60;
					
					if(vScroll < -90){
						trace(arrowImage.rotation); 
						if(arrowImage.rotation == 0)  {
							arrowImage.rotation = 180;
						}
						loadText.text = "Release to refesh...";
						
					}else{
						if(arrowImage.rotation == 180)  {
							arrowImage.rotation = 0;
						}
						loadText.text = "Pull down to refresh";
					}
					
				}else{
					loadingGroup.visible = false;
				}
				}
				catch(e:Error){
					
				}
			}
			
			public function searchClick(event:MouseEvent):void
			{
				locationType = data.locationType;
				if (Geolocation.isSupported)
				{
					g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
					addEventListener(ViewNavigatorEvent.REMOVING,onRemove);	
				}
				else
				{	
					mylat = 53.59221;
					mylong = -113.54009;
					getLocations.send();
				}		
				mysearch = key.text;
				searchLocations.send();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getLocations" method="POST" resultFormat="array"
					   url="http://care-q.com/dsite/php/getLocationsMobile.php" result="afterGetLocations(event)" >
			<s:request xmlns="">
				<type>{locationType}</type>		
				<mylat>{mylat}</mylat>		
				<mylong>{mylong}</mylong>		
				<myradius>{myradius}</myradius>	
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="searchLocations" method="POST" resultFormat="array"
					   url="http://care-q.com/dsite/php/searchLocationsMobile.php" result="afterSearchLocations(event)" >
			<s:request xmlns="">
				<type>{locationType}</type>		
				<mylat>{mylat}</mylat>		
				<mylong>{mylong}</mylong>		
				<myradius>{myradius}</myradius>	
				<mysearch>{mysearch}</mysearch>
			</s:request>
		</s:HTTPService>
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:BorderContainer width="100%" height="100%" id="listCont" visible="true" backgroundAlpha="0" borderAlpha="0" >
		<s:BorderContainer visible="{frontview}" borderAlpha="0" left="0" top="0" width="100%" height="58" backgroundColor="#E2EAF4">
			<s:Label left="6" top="6" width="216" height="33" color="#34396B" fontSize="18"
					 fontWeight="bold" text="Current Average"/>
			<s:Label id="avgMin" left="184" top="5" width="112" height="42" color="#34396B"
					 fontSize="22" fontWeight="bold" text="0 km"/>
			<s:DropDownList id="avgRadius" dataProvider="{radiusOptions}" 
							change="radiusChange(event)" x="7" y="29" width="60" height="23"  />
			<s:Label  x="70" y="34" width="106" height="23" color="#626262" fontSize="16"
					 fontWeight="normal" text="km Radius"/>
		</s:BorderContainer>
		<s:VGroup  x="0" top="57" bottom="40" width="100%" gap="0">
			<s:BorderContainer left="0" top="57" borderAlpha="0" width="100%" height="18" backgroundColor="#679FD5">
			</s:BorderContainer>
			
			<s:BorderContainer x="0" y="-76" borderAlpha="0" width="100%" height="{this.height-57}" >
				<s:List width="100%" height="331"  id="clinicList" labelField="name"  
						dataProvider="{listData}" itemRenderer="components.clinicResult"
						selectedIndex="1" change="clinicListChange(event);"
						mouseMove="list_mouseMoveHandler(event)" mouseUp="list_mouseUpHandler(event)" >
					
				</s:List>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" id="loadingGroup" visible="false" height="50">
					<s:Image id="arrowImage"  source="@Embed('assets/Arrow-double-up-48.png')"/>
					<s:Label text="Pull down to refresh"  id="loadText"/>
				</s:HGroup>
			</s:BorderContainer>
			
		</s:VGroup>
		<s:Label x="8" y="61" width="173" height="13" color="#E5E5E5" fontSize="13"
				 fontWeight="bold" text="All Clinics"/>
	</s:BorderContainer>	
	
</s:View>