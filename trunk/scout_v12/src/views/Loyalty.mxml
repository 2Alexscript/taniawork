<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"  
		xmlns:components="components.*" 
		backgroundColor="#c5c5c5"
		backKeyPressed="gobacktohome(event)"
		menuKeyPressed="menupress(event)"
		viewActivate="onActivate(event)" 
		mouseDown="listFingerDown();" 
		mouseUp="listFingerUp();"
		mouseOut="listFingerUp();"
		title="Loyalty">
	<s:navigationContent >
		<components:backbutton width="{this.width*0.1}" mouseEnabledWhereTransparent="true"
							   height="100%"   mouseDown="gobacktohome2();"/>
	</s:navigationContent>
	<s:titleContent>
		<s:Group  width="100%" height="65%">
			<s:Rect width="100%"  height="100%"
					radiusX="{30/(320/Capabilities.screenDPI)}"
					radiusY="{30/(320/Capabilities.screenDPI)}">
				<s:fill>
					<s:SolidColor alpha="1" color="#f6f5f5"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#abaaaa" weight="{1.5/(320/Capabilities.screenDPI)}"/>
				</s:stroke>
			</s:Rect>
			<s:TextInput id="key" width="95%" height="90%" 
						 paddingLeft="{45/(320/Capabilities.screenDPI)}" styleName="textsize1"
						 horizontalCenter="0" verticalCenter="0"  focusAlpha="0"
						 borderVisible="false" contentBackgroundAlpha="0" color="#949393" 
						 prompt="Search for businesses..."  maxChars="20"  fontFamily="Arial" fontWeight="normal"
						 keyUp="press(event);" returnKeyLabel="search"/>
			<s:BitmapImage contentLoader="{s_imageCache}"  verticalCenter="0" left="{20/(320/Capabilities.screenDPI)}">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/glass.png')"
											source240dpi="@Embed('assets/240/glass.png')"
											source320dpi="@Embed('assets/320/glass.png')"
											source480dpi="@Embed('assets/480/glass.png')"
											source640dpi="@Embed('assets/640/glass.png')"/>
				</s:source>
			</s:BitmapImage>
		</s:Group>
	</s:titleContent>
	<s:actionContent>
		<components:mapbutton width="{this.width*0.1}" mouseEnabledWhereTransparent="true"
							  height="100%"  mouseDown="goToMap()"  />
	</s:actionContent>
	<fx:Script source="../func/global.as"/>
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			protected var g:Geolocation = new Geolocation(); 
			public var profDraging:Boolean = false;
			[Bindable]
			public var loyaltyArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var busy:Boolean = true;
			[Bindable]
			public var done:Boolean = false;
			[Bindable]
			public var prefound:Boolean = false;
			public var maintimer:Timer = new Timer(5000,0);
			public var timerval:Number = 5000;
			[Bindable]
			public var mylat:Number = 53.493252;
			[Bindable]
			public var mylong:Number = -113.502231;
			public function onActivate(event:Event):void
			{	
				enableHardwareKeyListeners();
				busy = true;
				prefound = false;
				navigator.activeView.mouseChildren = true;
				createIfNotExsist("userloyalty");
				try{
					var userData:ArrayCollection = getDatabaseArray("SELECT * FROM userloyalty");
					if (userData.length != 0){
						loyaltyArray = userData;
						busy = false;
						prefound = true;
						searchClick();
					}
					else {
						loyaltyArray = new ArrayCollection();
						
					}	
				}
				catch(e:Error) {
					loyaltyArray = new ArrayCollection();
				}	
				
				try{
					if (Geolocation.isSupported)
					{
						g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
						addEventListener(ViewNavigatorEvent.REMOVING,onRemove);
					}
				}
				catch(e:Error){
					
				}
				
				setLoginVars();
				maintimer = new Timer(timerval,0);
				maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
				maintimer.start();
				try{
					getloyalty.cancel();
				}
				catch(e:Error){
					
				}
				
				try{
					getloyalty.send();
				}
				catch(e:Error){
					
				}

			}
			public function aftertimer(ev:TimerEvent):void {
					if (loyaltyArray.length <= 0){
						busy = true;
						getloyalty.cancel();
						loyaltyArray = new ArrayCollection();
						maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.stop();
						timerval = timerval + 1000;
						maintimer = new Timer(timerval,0);
						maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.start();
						
						
						try{
							getloyalty.send();
						}
						catch(e:Error){
							
						}
					}
					else {
						maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.stop();
					}
			}
			
			public function afterGetloyalty(ev:ResultEvent):void  {
				busy = false;
				var stmt:SQLStatement = new SQLStatement();
				
				var old:Boolean = false;
				try{
					if (ev.result[0].response == "old"){
						old = true;
					}
				}
				catch(e:Error){
					
				}
				
				if (old){
					updatecont.visible = true;
				}
				else if (isFingerDown == false){
					
					if (prefound == false){
						loyaltyArray =  new ArrayCollection();
						
						try{
							loyaltyArray = ev.result[0].ress.res;
							
						}
						catch(e:Error){
							try{
								loyaltyArray.addItem( ev.result[0].ress.res);
							}
							catch(e:Error){
								
							}
						}
						
						
						if (loyaltyArray.length > 0){
							createIfNotExsist("userloyalty");
							doQuery("delete from userloyalty");
							var dataSortField:mx.collections.SortField = new mx.collections.SortField();
							var stringDataSort:Sort = new Sort();
							dataSortField.name = "business_name";
							dataSortField.numeric = false;
							stringDataSort.fields = [dataSortField];
							loyaltyArray.sort = stringDataSort;
							loyaltyArray.refresh();
							prefound = false;
							for (var i:uint = 0; i < loyaltyArray.length; i++){
								doQuery("insert into userloyalty values(" +
									loyaltyArray[i].id+",'" +
									loyaltyArray[i].business_name+"','" +
									loyaltyArray[i].business_picture+"','" +
									loyaltyArray[i].amount+"','" +
									loyaltyArray[i].userloyalty+"')");
							}
							
							
							
						}
						
						
					}
					else {
						var templistData:ArrayCollection = new ArrayCollection();
						try{			
							templistData = ev.result[0].ress.res;		
						}
						catch(e:Error){
							try{
								templistData.addItem(ev.result[0].ress.res);
							}
							catch(e:Error){
							}
						}
						
						
						if (templistData.length > 0){
							createIfNotExsist("userloyalty");
							doQuery("delete from userloyalty");
							var dataSortField2:mx.collections.SortField = new mx.collections.SortField();
							var stringDataSort2:Sort = new Sort();
							dataSortField2.name = "business_name";
							dataSortField2.numeric = false;
							stringDataSort2.fields = [dataSortField2];
							templistData.sort = stringDataSort2;
							templistData.refresh();
							for (var j:uint = 0; j < templistData.length; j++){
								doQuery("insert into userloyalty values(" +
									templistData[j].id+",'" +
									templistData[j].business_name+"','" +
									templistData[j].business_picture+"','" +
									templistData[j].amount+"','" +
									templistData[j].userloyalty+"')");
								
							}
							loyaltyArray = new ArrayCollection();
							loyaltyArray = templistData;
						}
						
						
					}
					
					
					sortPress(sortMode);
					searchClick();
					//sort array by most recent dates
					var stop:String = "";
					noloyalty.visible = false;
					if (loyaltyArray.length <= 0){
						noloyalty.visible = true;
						
					}
					
				}
				
				
			}
			public function sortPress(u:uint):void {
				//sortBTN.closeDropDown();
				u = 0;
				sortMode = 0;
				
				var dataSortField:mx.collections.SortField = new mx.collections.SortField();
				var stringDataSort:Sort = new Sort();
				dataSortField.name = "business_name";
				dataSortField.numeric = false;
				stringDataSort.fields = [dataSortField];
				loyaltyArray.sort = stringDataSort;
				loyaltyArray.refresh();
				loyaltylist.dataProvider = loyaltyArray;
			}
			public function loyaltyListChange(ev:IndexChangeEvent):void {
				if (ev.newIndex != -1){
					navigator.pushView(LoyaltyDescription, ev.currentTarget.selectedItems[0]);					
				}
			}
			
			
			public function press(event:KeyboardEvent):void {
				//if ((event.keyCode == 13)||(event.charCode == 13)){
					searchClick();
				//}
			}
			public function searchClick():void {
				loyaltyArray.filterFunction = filterCompleted;
				
				loyaltyArray.refresh();
				loyaltylist.dataProvider = loyaltyArray;
				var s:String = "";
				s.toLowerCase()
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.amount.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			private function returnall(item:Object):Boolean{
				return true;
			}
			public function goFilter():void {
				//navigator.pushView(HomeloyaltyFilter);
			}
			
			[Bindable]
			public var isFingerDown:Boolean = false;
			public function listFingerDown():void {
				isFingerDown = true;
			}
			public function listFingerUp():void {
				isFingerDown = false;
			}
			protected function onUpdate(event:GeolocationEvent):void
			{
				mylat = event.latitude;
				mylong = event.longitude;	
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			public function goToMap():void {
				navigator.pushView(MapView,{mylat:this.mylat,mylong:this.mylong});
			}
			public function gobacktohome(event:FlexEvent):void {
				event.preventDefault();
				gobacktohome2();
			}
			public function gobacktohome2():void {
				var slideTrans:SlideViewTransition = new SlideViewTransition();
				slideTrans.direction = ViewTransitionDirection.RIGHT;
				slideTrans.mode = SlideViewTransitionMode.UNCOVER;  //or COVER and PUSH modes
				navigator.pushView(Home, null,null,slideTrans);
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getloyalty" method="GET" 
					   resultFormat="array" 	
					   url="http://www.scoutcard.ca/php/mobile_v2/getloyaltyList.php"
					   result="afterGetloyalty(event)" >	
			<s:request xmlns="">
				<emailGo>{emailGo}</emailGo>	
				<versionnumber>2</versionnumber>	
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:Group width="100%" height="100%" visible="true" id="listCont">
		<s:Group   top="0" bottom="0" width="100%"  >
			<s:List width="100%" height="100%" horizontalCenter="0" 
					top="0" bottom="0" contentBackgroundAlpha="1" 
					id="loyaltylist" labelField="name"  contentBackgroundColor="#c5c5c5"  
					dataProvider="{loyaltyArray}" itemRenderer="components.loyaltyListItem"
					selectedIndex="1" change="loyaltyListChange(event);"
					horizontalScrollPolicy="off"  >
				<s:layout>
					<s:VerticalLayout gap="{15/(320/Capabilities.screenDPI)}"
									  paddingTop="{15/(320/Capabilities.screenDPI)}">
					</s:VerticalLayout>
				</s:layout>
			</s:List>
		</s:Group>
		<s:Label text="You haven't visited any Scout locations yet!" visible="false" 
				 id="noloyalty" width="75%" textAlign="center" horizontalCenter="0"  verticalCenter="0" />
	</s:Group>	
	<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>
	<components:updateContainer id="updatecont" visible="false"/>
	<s:Line left="0" right="0"  top="0" > 
		<s:stroke><s:SolidColorStroke color="0xbababa" weight="{1/(320/Capabilities.screenDPI)}"/></s:stroke>
	</s:Line>

</s:View>