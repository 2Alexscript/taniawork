import java.applet.Applet;
import java.applet.AppletContext;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Choice;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextComponent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.TextEvent;
import java.awt.event.TextListener;
import java.io.PrintStream;
import java.net.URL;
import java.util.EventObject;

public class BreastPanel
  extends Panel
  implements ItemListener, TextListener, ActionListener
{
  private static final long serialVersionUID = 1L;
  Applet owner;
  String email;
  boolean man1 = false;
  boolean man2 = false;
  boolean man3 = false;
  boolean man4 = false;
  boolean consistencyCheck = false;
  String consistencyString;
  BreastPatient thePatient = new BreastPatient();
  Choice comorbidityList = new Choice();
  Choice erStatusList = new Choice();
  Choice tumorGradeList = new Choice();
  Choice tumorSizeList = new Choice();
  Choice positiveNodeList = new Choice();
  Choice calculateForList = new Choice();
  Choice setList = new Choice();
  Choice setList2 = new Choice();
  PositiveIntField ageField = new PositiveIntField();
  PositiveIntField riskField = new PositiveIntField();
  PositiveIntField hormField = new PositiveIntField();
  PositiveIntField chemField = new PositiveIntField();
  PositiveIntField combField = new PositiveIntField();
  Label riskLabel = new Label("10 Year Risk:");
  Label hormoLabel = new Label("Hormonal Therapy: ");
  Label chemoLabel = new Label("Chemotherapy: ");
  Label comboLabel = new Label("Combined Therapy: ");
  Label patientLabel = new Label("Patient Information");
  Label therapyLabel = new Label("Adjuvant Therapy Effectiveness");
  Button printButton = new Button("Print Results PDF");
  Button helpButton = new Button("Access Help and Clinical Evidence");
  Button picsButton = new Button("Images for Consultations");
  Button progButton = new Button("Prognostic");
  BreastGraph graph = new BreastGraph(false);
  boolean shown35Warning = false;
  
  public BreastPanel(Applet newOwner, String emailParameter)
  {
    super(new GridBagLayout());
    this.owner = newOwner;
    this.email = emailParameter;
    setBackground(Color.white);
    initializeFonts();
    initializeChoices();
    buildInterface();
    initializeListeners();
    initializeInterface();
    validate();
    if (this.consistencyCheck)
    {
      removeAll();
      setLayout(new GridLayout(5, 1));
      add(new Label("Consistency Error!"));
      add(new Label("There seems to be a rare internal inconsistency in the calculations"));
      add(new Label("generated by your machine. Please contact us to help resolve this issue"));
      add(new Label("before using the information or printouts generated by this program."));
      if (this.consistencyString != null) {
        add(new Label(this.consistencyString));
      }
    }
  }
  
  public void initializeChoices()
  {
    this.comorbidityList.add("Perfect Health");
    this.comorbidityList.add("Minor Problems");
    this.comorbidityList.add("Average for Age");
    this.comorbidityList.add("Major Prob. (+10)");
    this.comorbidityList.add("Major Prob. (+20)");
    this.comorbidityList.add("Major Prob. (+30)");
    
    this.erStatusList.add("Undefined");
    this.erStatusList.add("Positive");
    this.erStatusList.add("Negative");
    
    this.tumorGradeList.add("Undefined");
    this.tumorGradeList.add("Grade 1");
    this.tumorGradeList.add("Grade 2");
    this.tumorGradeList.add("Grade 3");
    
    this.tumorSizeList.add("0.1 - 1.0 cm");
    this.tumorSizeList.add("1.1 - 2.0 cm");
    this.tumorSizeList.add("2.1 - 3.0 cm");
    this.tumorSizeList.add("3.1 - 5.0 cm");
    this.tumorSizeList.add("> 5.0 cm");
    
    this.positiveNodeList.add("0");
    this.positiveNodeList.add("1 - 3");
    this.positiveNodeList.add("4 - 9");
    this.positiveNodeList.add("> 9");
    
    this.calculateForList.add("Mortality");
    this.calculateForList.add("Relapse");
    
    this.setList.add("CMF-Like (Overview 2000)");
    this.setList.add("Anthra. (Overview 2000)");
    this.setList.add("1st Generation Regimens");
    this.setList.add("  CA*4, CMF, FE(50)C*6");
    this.setList.add("2nd Generation Regimens");
    this.setList.add("  Anthra >4 Cycles >2 agnts.");
    this.setList.add("  CA*4 then T*4");
    this.setList.add("3rd Generation Regimens");
    
    this.setList2.add("Tamoxifen (Overview 2000)");
    this.setList2.add("Aromatase Inhibitor for 5 yrs");
    this.setList2.add("Tam for 2-3 yrs then AI for 2-3 yrs");
    this.setList2.add("Ovarian Ablation");
    this.setList2.add("Ov. Abl. + Tam (or other horm)");
  }
  
  public void buildInterface()
  {
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.anchor = 17;
    gbc.fill = 0;
    gbc.weightx = 0.0D;gbc.weighty = 0.0D;
    gbc.insets = new Insets(1, 1, 1, 1);
    gbc.ipadx = 1;gbc.ipady = 1;
    gbc.gridheight = 1;gbc.gridwidth = 2;
    gbc.gridx = 1;gbc.gridy = 1;
    
    Panel patientInfo = new Panel(new GridBagLayout());
    patientInfo.add(this.patientLabel, gbc);
    gbc.gridwidth = 1;
    gbc.gridy = 2;patientInfo.add(new Label("Age:"), gbc);
    gbc.gridy = 3;patientInfo.add(new Label("Comorbidity:"), gbc);
    gbc.gridy = 4;patientInfo.add(new Label("ER Status:"), gbc);
    gbc.gridy = 5;patientInfo.add(new Label("Tumor Grade:"), gbc);
    gbc.gridy = 6;patientInfo.add(new Label("Tumor Size:"), gbc);
    gbc.gridy = 7;patientInfo.add(new Label("Positive Nodes:"), gbc);
    gbc.gridy = 8;patientInfo.add(new Label("Calculate For:"), gbc);
    gbc.gridy = 9;patientInfo.add(this.riskLabel, gbc);
    gbc.gridy = 2;
    gbc.gridx = 2;patientInfo.add(this.ageField, gbc);
    gbc.gridy = 3;patientInfo.add(this.comorbidityList, gbc);
    gbc.gridy = 4;patientInfo.add(this.erStatusList, gbc);
    gbc.gridy = 5;patientInfo.add(this.tumorGradeList, gbc);
    gbc.gridy = 6;patientInfo.add(this.tumorSizeList, gbc);
    gbc.gridy = 7;patientInfo.add(this.positiveNodeList, gbc);
    gbc.gridy = 8;patientInfo.add(this.calculateForList, gbc);
    gbc.gridy = 9;
    Panel riskPanel = new Panel(new BorderLayout());
    riskPanel.add(this.riskField, "West");
    riskPanel.add(this.progButton, "Center");
    patientInfo.add(riskPanel, gbc);
    
    Panel therapyInfo = new Panel(new GridBagLayout());
    Panel use2Panel = new Panel(new BorderLayout());
    use2Panel.add(new Label("Horm: "), "West");
    use2Panel.add(this.setList2, "Center");
    Panel usePanel = new Panel(new BorderLayout());
    usePanel.add(new Label("Chemo: "), "West");
    usePanel.add(this.setList, "Center");
    gbc.gridwidth = 2;gbc.gridy = 1;
    gbc.gridx = 1;therapyInfo.add(this.therapyLabel, gbc);
    gbc.gridy = 2;therapyInfo.add(use2Panel, gbc);
    gbc.gridy = 3;therapyInfo.add(usePanel, gbc);
    gbc.gridwidth = 1;
    gbc.gridy = 4;therapyInfo.add(this.hormoLabel, gbc);
    gbc.gridy = 5;therapyInfo.add(this.chemoLabel, gbc);
    gbc.gridy = 6;therapyInfo.add(this.comboLabel, gbc);
    gbc.gridy = 4;
    gbc.gridx = 2;therapyInfo.add(this.hormField, gbc);
    gbc.gridy = 5;therapyInfo.add(this.chemField, gbc);
    gbc.gridy = 6;therapyInfo.add(this.combField, gbc);
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbc.anchor = 11;
    
    Panel graphInfo = new Panel(new GridBagLayout());
    graphInfo.setBackground(Color.white);
    gbc.gridwidth = 2;
    graphInfo.add(this.graph, gbc);
    gbc.gridwidth = 1;
    gbc.fill = 2;
    gbc.gridy = 2;graphInfo.add(new Label(" "), gbc);
    gbc.gridy = 3;graphInfo.add(this.printButton, gbc);
    gbc.gridx += 1;graphInfo.add(this.helpButton, gbc);
    gbc.fill = 0;
    gbc.gridx -= 1;
    gbc.gridwidth = 2;
    gbc.gridy = 4;graphInfo.add(this.picsButton, gbc);
    gbc.gridwidth = 1;
    
    gbc.anchor = 17;
    gbc.gridy = 1;
    gbc.gridx = 1;
    add(patientInfo, gbc);
    gbc.gridy = 2;
    add(therapyInfo, gbc);
    gbc.gridx = 2;
    gbc.gridy = 1;
    gbc.gridheight = 2;
    add(graphInfo, gbc);
  }
  
  public void initializeInterface()
  {
    double[][] testResults = (double[][])null;
    


    this.thePatient.setAge(50);
    this.thePatient.setComorbidity(2);
    this.thePatient.setERStatus(2);
    this.thePatient.setTumorGrade(2);
    this.thePatient.setTumorSize(3);
    this.thePatient.setPositiveNodes(1);
    this.thePatient.calculateRisk();
    updateHormoneEfficacy(false);
    updateChemoEfficacy(false);
    updateCombinedEfficacy(false);
    this.thePatient.calculateResults();
    testResults = this.thePatient.getResults();
    if (testResults[0][0] != 49.399999999999999D) {
      this.consistencyCheck = true;
    }
    if (testResults[0][1] != 0.0D) {
      this.consistencyCheck = true;
    }
    if (testResults[0][2] != 47.299999999999997D) {
      this.consistencyCheck = true;
    }
    if (testResults[0][3] != 3.3D) {
      this.consistencyCheck = true;
    }
    if (testResults[1][1] != 0.0D) {
      this.consistencyCheck = true;
    }
    if (testResults[2][1] != 7.8D) {
      this.consistencyCheck = true;
    }
    if (testResults[3][1] != 7.8D) {
      this.consistencyCheck = true;
    }
    if (this.consistencyCheck)
    {
      this.consistencyString = new String(this.thePatient.getHormoneEffect() + ":" + this.thePatient.getChemoEffect() + ":" + this.thePatient.getCombinedEffect() + ":" + testResults[0][0] + ":" + testResults[0][1] + ":" + testResults[0][2] + ":" + testResults[0][3] + ":" + testResults[1][1] + ":" + testResults[2][1] + ":" + testResults[3][1]);
      return;
    }
    this.thePatient = new BreastPatient();
    this.ageField.setValue(this.thePatient.getAge());
    this.comorbidityList.select(this.thePatient.getComorbidity());
    this.erStatusList.select(this.thePatient.getERStatus());
    this.tumorGradeList.select(this.thePatient.getTumorGrade());
    this.tumorSizeList.select(this.thePatient.getTumorSize());
    this.positiveNodeList.select(this.thePatient.getPositiveNodes());
    this.calculateForList.select(0);
    this.riskField.setValue(this.thePatient.getRisk());
    this.hormField.setValue(this.thePatient.getHormoneEffect());
    this.chemField.setValue(this.thePatient.getChemoEffect());
    this.combField.setValue(this.thePatient.getCombinedEffect());
    this.thePatient.calculateResults();
    this.graph.setResults(this.thePatient.getResults(), this.thePatient.getRelapse());
  }
  
  public void initializeListeners()
  {
    this.tumorGradeList.addItemListener(this);
    this.comorbidityList.addItemListener(this);
    this.erStatusList.addItemListener(this);
    this.tumorSizeList.addItemListener(this);
    this.positiveNodeList.addItemListener(this);
    this.calculateForList.addItemListener(this);
    this.setList.addItemListener(this);
    this.setList2.addItemListener(this);
    this.ageField.addTextListener(this);
    this.riskField.addTextListener(this);
    this.hormField.addTextListener(this);
    this.chemField.addTextListener(this);
    this.combField.addTextListener(this);
    this.printButton.addActionListener(this);
    this.helpButton.addActionListener(this);
    this.picsButton.addActionListener(this);
    this.progButton.addActionListener(this);
  }
  
  public void initializeFonts()
  {
    Font appFont = new Font("Serif", 0, 12);
    setFont(appFont);
    this.comorbidityList.setFont(appFont);
    this.erStatusList.setFont(appFont);
    this.tumorGradeList.setFont(appFont);
    this.tumorSizeList.setFont(appFont);
    this.positiveNodeList.setFont(appFont);
    this.calculateForList.setFont(appFont);
    this.setList.setFont(appFont);
    this.setList2.setFont(appFont);
    this.printButton.setFont(appFont);
    this.helpButton.setFont(appFont);
    this.progButton.setFont(appFont);
    this.riskLabel.setForeground(Color.blue);
    this.hormoLabel.setForeground(Color.blue);
    this.chemoLabel.setForeground(Color.blue);
    this.comboLabel.setForeground(Color.blue);
    this.patientLabel.setFont(new Font("Serif", 1, 14));
    this.therapyLabel.setFont(new Font("Serif", 1, 14));
  }
  
  public void actionPerformed(ActionEvent ae)
  {
    if (ae.getSource() == this.printButton)
    {
      PrintDialog pdlg = new PrintDialog(getFrame(), this.thePatient.getRelapse());
      if (pdlg.continuePrinting()) {
        doServletPrint(pdlg);
      }
    }
    else if (ae.getSource() == this.helpButton)
    {
      try
      {
        this.owner.getAppletContext().showDocument(new URL("http://www.adjuvantonline.com/breasthelp0306/breastindex.html"), "_blank");
      }
      catch (Exception localException) {}
    }
    else if (ae.getSource() == this.picsButton)
    {
      try
      {
        this.owner.getAppletContext().showDocument(new URL("http://www.adjuvantonline.com/breastimages/PicIndexMaster.htm"), "_blank");
      }
      catch (Exception localException1) {}
    }
    else if (ae.getSource() == this.progButton)
    {
      int newRisk = PrognosticDialog.execute(getFrame(), this.thePatient.getRisk(), "10 Year Risk Based on Size and Nodes:");
      this.thePatient.setRisk(newRisk);
      this.riskField.setValue(newRisk);
      updateGraph();
    }
  }
  
  public void itemStateChanged(ItemEvent ie)
  {
    if (ie.getSource() == this.tumorGradeList)
    {
      this.thePatient.setTumorGrade(this.tumorGradeList.getSelectedIndex());
      updateRisk();
      updateGraph();
    }
    else if (ie.getSource() == this.comorbidityList)
    {
      this.thePatient.setComorbidity(this.comorbidityList.getSelectedIndex());
      updateGraph();
    }
    else if (ie.getSource() == this.erStatusList)
    {
      this.thePatient.setERStatus(this.erStatusList.getSelectedIndex());
      updateRisk();
      updateHormoneEfficacy(false);
      updateChemoEfficacy(false);
      updateCombinedEfficacy(false);
      updateGraph();
    }
    else if (ie.getSource() == this.tumorSizeList)
    {
      this.thePatient.setTumorSize(this.tumorSizeList.getSelectedIndex());
      updateRisk();
      updateGraph();
    }
    else if (ie.getSource() == this.positiveNodeList)
    {
      this.thePatient.setPositiveNodes(this.positiveNodeList.getSelectedIndex());
      updateRisk();
      updateGraph();
    }
    else if (ie.getSource() == this.calculateForList)
    {
      if (this.calculateForList.getSelectedIndex() == 0) {
        this.thePatient.setRelapse(false);
      } else {
        this.thePatient.setRelapse(true);
      }
      updateRisk();
      updateHormoneEfficacy(false);
      updateChemoEfficacy(false);
      updateCombinedEfficacy(false);
      updateGraph();
    }
    else if (ie.getSource() == this.setList)
    {
      MessageDialog msgDlg = null;
      Panel pnl = null;
      switch (this.setList.getSelectedIndex())
      {
      case 1: 
        pnl = new Panel(new GridLayout(20, 1));
        pnl.add(new Label("Although the Overview suggests that adjuvant anthracycline"));
        pnl.add(new Label("based regimens are more efficacious than non-anthracycline"));
        pnl.add(new Label("based regimens, this is not universally true. For example, the"));
        pnl.add(new Label("short 12 week CA * 4 regimen appears equal to CMF."));
        pnl.add(new Label(" "));
        pnl.add(new Label("G1 or 1st Generation regimens have CMF like efficacy. CA * 4"));
        pnl.add(new Label("is such a regimen despite including an anthracycline."));
        pnl.add(new Label(" "));
        pnl.add(new Label("G2 or 2rd Generation regimens are superior to G1 regimens"));
        pnl.add(new Label("reducing the hazard of death or recurrence by an additional"));
        pnl.add(new Label("relative 15-20%. These regimens generally use >4 cycles of "));
        pnl.add(new Label("therapy and >2 agents, one of which is an anthracycline."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Choosing this option projects a 16% proportional improvement"));
        pnl.add(new Label("relative to CMF like regimens in the risk of relapse and breast"));
        pnl.add(new Label("cancer related death. This estimate is derived from the September"));
        pnl.add(new Label("2000 Overview presentations.  As noted above this estimate may"));
        pnl.add(new Label("not be relevant to all anthracycline-based regimens."));
        pnl.add(new Label(" "));
        pnl.add(new Label("See the online help efficacy section for additional discussion."));
        msgDlg = new MessageDialog(getFrame(), "About Anthracycline Use", true, pnl);
        break;
      case 2: 
      case 3: 
        pnl = new Panel(new GridLayout(20, 1));
        pnl.add(new Label("The first widely used polychemotherapy for the adjuvant"));
        pnl.add(new Label("therapy of breast cancer was CMF. Adjuvant! classifies CMF"));
        pnl.add(new Label("as a 1st generation regimen."));
        pnl.add(new Label(" "));
        pnl.add(new Label("G1 or 1st Generation regimens have been, in Phase 3 studies,"));
        pnl.add(new Label("shown to be equal to CMF or to be better than no therapy to a"));
        pnl.add(new Label("degree similar to that expected for CMF. Examples of such"));
        pnl.add(new Label("regimens are CA*4 and FE(50)C*6"));
        pnl.add(new Label(" "));
        pnl.add(new Label("G2 or 2rd Generation regimens are superior to G1 regimens"));
        pnl.add(new Label("reducing the hazard of death or recurrence by an additional"));
        pnl.add(new Label("relative 15-20%."));
        pnl.add(new Label(" "));
        pnl.add(new Label("You have selected 1st generation regimen. Estimates of the"));
        pnl.add(new Label("efficacy of these regimens is derived from the Overview and"));
        pnl.add(new Label("are affected by age and in some instances ER status"));
        pnl.add(new Label(" "));
        pnl.add(new Label("See the online help efficacy section for additional discussion."));
        msgDlg = new MessageDialog(getFrame(), "About first generation regimens", true, pnl);
        break;
      case 4: 
      case 5: 
        pnl = new Panel(new GridLayout(16, 1));
        pnl.add(new Label("Adjuvant! stratifies adjuvant chemotherapy regimens by efficacy relative"));
        pnl.add(new Label("to CMF (the prototypic 1st Generation or G1 regimen)."));
        pnl.add(new Label(" "));
        pnl.add(new Label("As defined on the basis of Phase 3 clinical trials, 2nd generation regimens"));
        pnl.add(new Label("(G2) are superior to G1 regimens, reducing the hasard of death or recurrence"));
        pnl.add(new Label("by an additional relative 15-20%."));
        pnl.add(new Label(" "));
        pnl.add(new Label("You have selected 2nd generation regimen. A number of complex anthracycline"));
        pnl.add(new Label("regimens are of this general class which include CAF*6, FEC*6, FE(100)C*6, "));
        pnl.add(new Label("FAC*6, and CA*4 followed by T* 4. CD*4 is also such a regimen. Some of"));
        pnl.add(new Label("these regimens have only beentested/approved in the adjuvant therapy of node"));
        pnl.add(new Label("positive patients although, in theory, they should work as well in node"));
        pnl.add(new Label("negative patients."));
        pnl.add(new Label(" "));
        pnl.add(new Label("See the online help efficacy section for a detailed discussion of these."));
        pnl.add(new Label("and other regimens that may be of this class, and additional information."));
        msgDlg = new MessageDialog(getFrame(), "About second generation regimens", true, pnl);
        break;
      case 6: 
        pnl = new Panel(new GridLayout(18, 1));
        pnl.add(new Label("Adjuvant! stratifies adjuvant chemotherapy regimens by efficacy relative"));
        pnl.add(new Label("to CMF (the prototypic 1st Generation or G1 regimen)."));
        pnl.add(new Label(" "));
        pnl.add(new Label("As defined on the basis of Phase 3 clinical trials, 2nd generation regimens"));
        pnl.add(new Label("(G2) are superior to G1 regimens, reducing the hasard of death or recurrence"));
        pnl.add(new Label("by an additional relative 15-20%."));
        pnl.add(new Label(" "));
        pnl.add(new Label("You have selected CA * 4 followed by Taxol * 4 (every 3 weeks). This appears"));
        pnl.add(new Label("to be a 2nd Generation regimen. Some regimens that include a taxane appear "));
        pnl.add(new Label("to be 2nd generation regimens while others appear to be 3rd generation"));
        pnl.add(new Label("regimens. Because this regimen was approximately 20% proportionally better"));
        pnl.add(new Label("than CA * 4, it appears to be a 2nd generation regimen. This regimen has only"));
        pnl.add(new Label("been tested/approved in the adjuvant therapy of node positive patients"));
        pnl.add(new Label("although it should, in theory, work as well in node negative patients."));
        pnl.add(new Label(" "));
        pnl.add(new Label("See the online help efficacy section for additional discussion of this"));
        pnl.add(new Label("regimen, the controversy about whether it works as well in ER+ as ER-"));
        pnl.add(new Label("patients, and for additional information."));
        msgDlg = new MessageDialog(getFrame(), "About second generation taxane regimens", true, pnl);
        break;
      case 7: 
        pnl = new Panel(new GridLayout(22, 1));
        pnl.add(new Label("Third generation regimens have been shown to be a relative 15-20%"));
        pnl.add(new Label("better than 2nd generation regimens, which in turn have been shown"));
        pnl.add(new Label("to be 15-20% better than 1st generation regimens. Thus, these"));
        pnl.add(new Label("regimens are about a relative 35% better than CMF. However, these"));
        pnl.add(new Label("efficacy estimates are complex and indirect."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Third generation regimens include the TAC * 6, FE(100)C * 3 the D * 3,"));
        pnl.add(new Label("and dose-dense CA * 4 followed by T * 4 (all q2w) regimens. The FEC * 4"));
        pnl.add(new Label("then T*8 [q1w] regimen has reported risk reductions for relapse of a size"));
        pnl.add(new Label("that would suggest that it is also a third generation regimen, but at this"));
        pnl.add(new Label("time has not reported an improvement in OS that reaches statistical"));
        pnl.add(new Label("significance. See the help files efficacy section for a detailed discussion"));
        pnl.add(new Label("of these and other regimens that may be of this class."));
        pnl.add(new Label(" "));
        pnl.add(new Label("For some of the accelerated paclitaxel regimens the question has been "));
        pnl.add(new Label("raised of whether they are particularly beneficial in ER negative patients"));
        pnl.add(new Label("with less benefit in ER positive patients. The evidence from these"));
        pnl.add(new Label("exploratory analyses is mixed and statistically weak so whether these"));
        pnl.add(new Label("subset analyses should be taken into account is a matter of controversy"));
        pnl.add(new Label("and uncertainty"));
        pnl.add(new Label(" "));
        pnl.add(new Label("See additional information in the online help."));
        msgDlg = new MessageDialog(getFrame(), "About third generation regimens", true, pnl);
      }
      updateChemoEfficacy(false);
      updateCombinedEfficacy(false);
      updateGraph();
    }
    else if (ie.getSource() == this.setList2)
    {
      MessageDialog msgDlg = null;
      Panel pnl = null;
      switch (this.setList2.getSelectedIndex())
      {
      case 1: 
        pnl = new Panel(new GridLayout(28, 1));
        pnl.add(new Label("Aromatase inhibitors should only be used in women who are postmenopausal,"));
        pnl.add(new Label("and whose tumors are ER or PgR positive. They are probably ineffective in"));
        pnl.add(new Label("premenopausal women."));
        pnl.add(new Label(" "));
        pnl.add(new Label("The ASCO guidelines reccomend the inclusion of an aromatase inhibitor"));
        pnl.add(new Label("in the adjuvant hormonal therapy of postmenopausal ER-positive patients"));
        pnl.add(new Label("considering hormonal therapy. ASCO did not specify whether such"));
        pnl.add(new Label("adjuvant AI therapy should be as initial therapy instead of tamoxifen"));
        pnl.add(new Label("or after an initial 2-3 or 5 years of tamoxifen. There are no completed"));
        pnl.add(new Label("trials directly comparing these strategies. Whether any of these"));
        pnl.add(new Label("specific AI strategies is superior to the others at 10 years of follow-up"));
        pnl.add(new Label("is unclear. Strategies in which an aromatase inhibitor is given first, such"));
        pnl.add(new Label("as anastrozole in ATAC or letrozole in FEMTA, have the attractive feature of"));
        pnl.add(new Label("an immediate early advantage in reduction in relapse."));
        pnl.add(new Label(" "));
        pnl.add(new Label("The ATAC trial is the most mature trial comparing initial therapy with 5 years"));
        pnl.add(new Label("with 5 years of tamoxifen. The ATAC trial reported (at 68 months of median"));
        pnl.add(new Label("follow-up) a statistically significant 26% proportional risk reduction in the"));
        pnl.add(new Label("risk of relapse favoring anastrozole over tamoxifen. A similar reduction in"));
        pnl.add(new Label("the FEMTA study, which compares in two of its study arms 5 years of tamoxifen"));
        pnl.add(new Label("with 5 years of letrozole. An estimate of a 26% reduction in the risk of"));
        pnl.add(new Label("relapse compared to tamoxifen is used by Adjuvant! for the additional benefit"));
        pnl.add(new Label("for an initial AI. Because a statistically significant advantage in breast"));
        pnl.add(new Label("cancer specific or overall survival has not yet been shown in the ATAC or"));
        pnl.add(new Label("FEMTA trials for use of initial aromatase inhibitors over tamoxifen,"));
        pnl.add(new Label("such an advantage has not yet been projected by Adjuvant!"));
        pnl.add(new Label(" "));
        pnl.add(new Label("Additional information can be found in the online help."));
        msgDlg = new MessageDialog(getFrame(), "About initiating adjuvant hormonal therapy with an AI", true, pnl);
        break;
      case 2: 
        pnl = new Panel(new GridLayout(29, 1));
        pnl.add(new Label("Aromatase inhibitors should only be used in women who are postmenopausal,"));
        pnl.add(new Label("and whose tumors are ER or PgR positive. They are probably ineffective in"));
        pnl.add(new Label("premenopausal women."));
        pnl.add(new Label(" "));
        pnl.add(new Label("The ASCO guidelines reccomend the inclusion of an aromatase inhibitor"));
        pnl.add(new Label("in the adjuvant hormonal therapy of postmenopausal ER-positive patients"));
        pnl.add(new Label("considering hormonal therapy. ASCO did not specify whether such"));
        pnl.add(new Label("adjuvant AI therapy should be as initial therapy instead of tamoxifen"));
        pnl.add(new Label("or after an initial 2-3 or 5 years of tamoxifen. There are no completed"));
        pnl.add(new Label("trials directly comparing these strategies. Whether any of these"));
        pnl.add(new Label("specific AI strategies is superior to the others at 10 years of follow-up"));
        pnl.add(new Label("is unclear."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Strategies in which an aromatase inhibitor is given following tamoxifen"));
        pnl.add(new Label("have the theoretical advantage that a patient gets 2 different hormonal"));
        pnl.add(new Label("strategies, but this comes as the known disadvantage of an increased risk"));
        pnl.add(new Label("of recurrence during the initial tamoxifen treatment period (as compared"));
        pnl.add(new Label("to starting with an AI). Because of the large (but delayed) advantage "));
        pnl.add(new Label("of switching to an AI after 2-3 years of tamoxifen compared"));
        pnl.add(new Label("to continuing on tamoxifen of a proportional 30-40%, and to be consistent"));
        pnl.add(new Label("with the ASCO guidelines that do not favor pure AI strategies versus"));
        pnl.add(new Label("switching strategies, Adjuvant! shows the same amount of average benefit for"));
        pnl.add(new Label("an initial AI as a plan to start with tamoxifen for 2-3 years and to switch"));
        pnl.add(new Label("to an AI for 2-3 years when this benefit is viewed at 10 years of follow-up"));
        pnl.add(new Label("(an additional relative risk reduction of 26% compared to tamoxifen). Users"));
        pnl.add(new Label("may wish to also review the results of the ABCSG-8 trial."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Clinical trial participation is encouraged."));
        pnl.add(new Label("Additional information can be found in the online help."));
        msgDlg = new MessageDialog(getFrame(), "Tamoxifen for 2-3 years followed by an AI for 2-3 years", true, pnl);
        break;
      case 3: 
        pnl = new Panel(new GridLayout(14, 1));
        pnl.add(new Label("Ovarian ablation  should only be used in women who are in a "));
        pnl.add(new Label("premenopausal state, and whose tumors are ER or PgR positive."));
        pnl.add(new Label("There is no evidence for effectiveness in postmenopausal women."));
        pnl.add(new Label(" "));
        pnl.add(new Label("There is compelling evidence from North American and European"));
        pnl.add(new Label("studies for the effectiveness of ovarian ablation as a useful"));
        pnl.add(new Label("strategy for the adjuvant therapy of breast cancer.  Its effectiveness"));
        pnl.add(new Label("as compared to or in combination with tamoxifen remains an area"));
        pnl.add(new Label("of uncertainty and clinical trial research.  "));
        pnl.add(new Label(" "));
        pnl.add(new Label("Based on current clinical trial data,  Adjuvant! projects that ovarian"));
        pnl.add(new Label("ablation has approximately the same effectiveness as tamoxifen."));
        pnl.add(new Label(" "));
        pnl.add(new Label("See additional information in the online help."));
        msgDlg = new MessageDialog(getFrame(), "About Ovarian Ablation", true, pnl);
        break;
      case 4: 
        pnl = new Panel(new GridLayout(16, 1));
        pnl.add(new Label("Ovarian ablation in combination with tamoxifen or an aromatase"));
        pnl.add(new Label("inhibitor should only be considered in women who are in a"));
        pnl.add(new Label("premenopausal state."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Whether adding other hormonal theapies to ovarian ablation "));
        pnl.add(new Label("results in increased effectiveness is an area of controversy,"));
        pnl.add(new Label("uncertainty, and clinical trial research (the International SOFT"));
        pnl.add(new Label("and TEXT trials)."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Adjuvant! projects that ovarian ablation combined with other"));
        pnl.add(new Label("hormonal theapy has approximately the same effectiveness as"));
        pnl.add(new Label("tamoxifen, although there are reasonable arguments that"));
        pnl.add(new Label("this is too conservative a view."));
        pnl.add(new Label(" "));
        pnl.add(new Label("Clinical trial participation is encouraged."));
        pnl.add(new Label("See additional information in the online help."));
        msgDlg = new MessageDialog(getFrame(), "About Tamoxifen + Ovarian Ablation", true, pnl);
      }
      updateHormoneEfficacy(false);
      updateCombinedEfficacy(false);
      updateGraph();
    }
  }
  
  public void textValueChanged(TextEvent te)
  {
    try
    {
      if (te.getSource() == this.ageField)
      {
        this.thePatient.setAge(this.ageField.getValue());
        updateRisk();
        updateHormoneEfficacy(false);
        updateChemoEfficacy(false);
        updateCombinedEfficacy(false);
        updateGraph();
        if ((!this.shown35Warning) && (this.thePatient.getAge() < 35) && (this.thePatient.getAge() > 20))
        {
          Panel pnl = new Panel(new GridLayout(7, 1));
          pnl.add(new Label("For women < 35 years old, particularly if ER positive,"));
          pnl.add(new Label("young age may confer addional risk of poor outcome."));
          pnl.add(new Label(" "));
          pnl.add(new Label("See additional information in the online help under"));
          pnl.add(new Label("the section \"Young Age (< 35 yrs)\". An adjustment"));
          pnl.add(new Label("(1.5 fold increase in risk) has been made by Adjuvant!"));
          pnl.add(new Label("to account for this."));
          MessageDialog msgDlg = new MessageDialog(getFrame(), "About Tamoxifen + Ovarian Ablation", true, pnl);
          this.shown35Warning = true;
        }
      }
      else if (te.getSource() == this.riskField)
      {
        this.thePatient.setRisk(this.riskField.getValue());
        updateGraph();
      }
      else if (te.getSource() == this.chemField)
      {
        updateChemoEfficacy(true);
        updateGraph();
      }
      else if (te.getSource() == this.hormField)
      {
        updateHormoneEfficacy(true);
        updateGraph();
      }
      else if (te.getSource() == this.combField)
      {
        updateCombinedEfficacy(true);
        updateGraph();
      }
    }
    catch (Exception localException) {}
  }
  
  public void updateGraph()
  {
    this.thePatient.calculateResults();
    this.graph.setResults(this.thePatient.getResults(), this.thePatient.getRelapse());
  }
  
  public void updateRisk()
  {
    this.thePatient.calculateRisk();
    this.riskField.setValue(this.thePatient.getRisk());
  }
  
  public void updateHormoneEfficacy(boolean textUpdate)
  {
    int textHormone = this.hormField.getValue();
    double horm = 0.0D;
    double hormRel = 0.0D;
    int indexCode = 0;
    if (textUpdate)
    {
      this.thePatient.setHormoneEffect(textHormone);
      updateCombinedEfficacy(false);
    }
    else
    {
      switch (this.thePatient.getERStatus())
      {
      case 0: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 1;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 4;
        } else {
          indexCode = 7;
        }
        break;
      case 1: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 2;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 5;
        } else {
          indexCode = 8;
        }
        break;
      case 2: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 3;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 6;
        } else {
          indexCode = 9;
        }
        break;
      }
      switch (indexCode)
      {
      case 1: 
        horm = 20.0D;hormRel = 24.0D; break;
      case 2: 
        horm = 32.0D;hormRel = 40.0D; break;
      case 3: 
        horm = 0.0D;hormRel = 0.0D; break;
      case 4: 
        horm = 21.0D;hormRel = 24.0D; break;
      case 5: 
        horm = 32.0D;hormRel = 40.0D; break;
      case 6: 
        horm = 0.0D;hormRel = 0.0D; break;
      case 7: 
        horm = 23.0D;hormRel = 24.0D; break;
      case 8: 
        horm = 32.0D;hormRel = 40.0D; break;
      case 9: 
        horm = 0.0D;hormRel = 0.0D;
      }
      switch (this.thePatient.getERStatus())
      {
      case 0: 
        if ((this.setList2.getSelectedIndex() == 1) || (this.setList2.getSelectedIndex() == 2)) {
          hormRel = 100.0D - (100.0D - hormRel) * 82.0D / 100.0D;
        } else {
          hormRel = 100.0D - (100.0D - hormRel) * 100.0D / 100.0D;
        }
        break;
      case 1: 
        if ((this.setList2.getSelectedIndex() == 1) || (this.setList2.getSelectedIndex() == 2)) {
          hormRel = 100.0D - (100.0D - hormRel) * 74.0D / 100.0D;
        } else {
          hormRel = 100.0D - (100.0D - hormRel) * 100.0D / 100.0D;
        }
        break;
      case 2: 
        hormRel = 0.0D;
      }
      if (this.thePatient.getRelapse())
      {
        this.thePatient.setHormoneEffect((int)Math.round(hormRel));
        if (textHormone != this.thePatient.getHormoneEffect()) {
          this.hormField.setValue((int)Math.round(hormRel));
        }
      }
      else
      {
        this.thePatient.setHormoneEffect((int)Math.round(horm));
        if (textHormone != this.thePatient.getHormoneEffect()) {
          this.hormField.setValue((int)Math.round(horm));
        }
      }
    }
  }
  
  public void updateChemoEfficacy(boolean textUpdate)
  {
    int textChemo = this.chemField.getValue();
    double chem = 0.0D;
    double chemRel = 0.0D;
    int indexCode = 0;
    if (textUpdate)
    {
      this.thePatient.setChemoEffect(textChemo);
      updateCombinedEfficacy(false);
    }
    else
    {
      switch (this.thePatient.getERStatus())
      {
      case 0: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 1;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 4;
        } else {
          indexCode = 7;
        }
        break;
      case 1: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 2;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 5;
        } else {
          indexCode = 8;
        }
        break;
      case 2: 
        if (this.thePatient.getAge() < 50) {
          indexCode = 3;
        } else if (this.thePatient.getAge() < 60) {
          indexCode = 6;
        } else {
          indexCode = 9;
        }
        break;
      }
      switch (indexCode)
      {
      case 1: 
        chem = 30.0D;chemRel = 37.0D; break;
      case 2: 
        chem = 30.0D;chemRel = 37.0D; break;
      case 3: 
        chem = 30.0D;chemRel = 37.0D; break;
      case 4: 
        chem = 18.0D;chemRel = 27.0D; break;
      case 5: 
        chem = 16.0D;chemRel = 24.0D; break;
      case 6: 
        chem = 22.0D;chemRel = 33.0D; break;
      case 7: 
        chem = 10.0D;chemRel = 15.0D; break;
      case 8: 
        chem = 8.0D;chemRel = 12.0D; break;
      case 9: 
        chem = 15.0D;chemRel = 23.0D;
      }
      switch (this.setList.getSelectedIndex())
      {
      case 1: 
        chem = 100.0D - (100.0D - chem) * 84.0D / 100.0D;
        chemRel = 100.0D - (100.0D - chemRel) * 84.0D / 100.0D;
        break;
      case 2: 
      case 3: 
        chem = 100.0D - (100.0D - chem) * 100.0D / 100.0D;
        chemRel = 100.0D - (100.0D - chemRel) * 100.0D / 100.0D;
        break;
      case 4: 
      case 5: 
      case 6: 
        chem = 100.0D - (100.0D - chem) * 80.0D / 100.0D;
        chemRel = 100.0D - (100.0D - chemRel) * 80.0D / 100.0D;
        break;
      case 7: 
        chem = 100.0D - (100.0D - chem) * 65.0D / 100.0D;
        chemRel = 100.0D - (100.0D - chemRel) * 65.0D / 100.0D;
      }
      if (this.thePatient.getRelapse())
      {
        this.thePatient.setChemoEffect((int)Math.round(chemRel));
        if (textChemo != this.thePatient.getChemoEffect()) {
          this.chemField.setValue((int)Math.round(chemRel));
        }
      }
      else
      {
        this.thePatient.setChemoEffect((int)Math.round(chem));
        if (textChemo != this.thePatient.getChemoEffect()) {
          this.chemField.setValue((int)Math.round(chem));
        }
      }
    }
  }
  
  public void updateCombinedEfficacy(boolean textUpdate)
  {
    int textCombined = this.combField.getValue();
    double comb = 0.0D;
    if (textUpdate)
    {
      this.thePatient.setCombinedEffect(textCombined);
    }
    else
    {
      comb = 100.0D - (100.0D - this.thePatient.getChemoEffect()) * (100.0D - this.thePatient.getHormoneEffect()) / 100.0D;
      
      this.thePatient.setCombinedEffect((int)Math.round(comb));
      if (textCombined != this.thePatient.getCombinedEffect()) {
        this.combField.setValue((int)Math.round(comb));
      }
    }
  }
  
  public void doServletPrint(PrintDialog pdlg)
  {
    try
    {
      double[][] myResults = this.thePatient.getResults();
      StringBuffer tmpString = new StringBuffer("https://www.adjuvantonline.com/servlet/BreastServlet2005?");
      tmpString.append("dis=" + pdlg.printDisclaimer() + "&");
      tmpString.append("all=" + pdlg.printAllTherapies() + "&");
      tmpString.append("lan=" + pdlg.printLanguage() + "&");
      tmpString.append("bw=" + pdlg.printBandW() + "&");
      tmpString.append("a=" + this.thePatient.getAge() + "&");
      tmpString.append("c=" + this.thePatient.getComorbidity() + "&");
      tmpString.append("e=" + this.thePatient.getERStatus() + "&");
      tmpString.append("g=" + this.thePatient.getTumorGrade() + "&");
      tmpString.append("t=" + this.thePatient.getTumorSize() + "&");
      tmpString.append("p=" + this.thePatient.getPositiveNodes() + "&");
      tmpString.append("r=" + this.thePatient.getRisk() + "&");
      tmpString.append("rel=" + this.thePatient.getRelapse() + "&");
      tmpString.append("meth=" + this.setList.getSelectedIndex() + "&");
      tmpString.append("meth2=" + this.setList2.getSelectedIndex() + "&");
      tmpString.append("e1=" + this.thePatient.getHormoneEffect() + "&");
      tmpString.append("e2=" + this.thePatient.getChemoEffect() + "&");
      tmpString.append("e3=" + this.thePatient.getCombinedEffect() + "&");
      tmpString.append("aa=" + myResults[0][0] + "&");
      tmpString.append("bb=" + myResults[0][1] + "&");
      tmpString.append("cc=" + myResults[0][2] + "&");
      tmpString.append("dd=" + myResults[0][3] + "&");
      tmpString.append("ee=" + myResults[1][0] + "&");
      tmpString.append("ff=" + myResults[1][1] + "&");
      tmpString.append("gg=" + myResults[1][2] + "&");
      tmpString.append("hh=" + myResults[1][3] + "&");
      tmpString.append("ii=" + myResults[2][0] + "&");
      tmpString.append("jj=" + myResults[2][1] + "&");
      tmpString.append("kk=" + myResults[2][2] + "&");
      tmpString.append("ll=" + myResults[2][3] + "&");
      tmpString.append("mm=" + myResults[3][0] + "&");
      tmpString.append("nn=" + myResults[3][1] + "&");
      tmpString.append("oo=" + myResults[3][2] + "&");
      tmpString.append("pp=" + myResults[3][3] + "&");
      if (this.email != null) {
        tmpString.append("email=" + this.email + "&");
      }
      tmpString.append("v=7-17-03");
      System.out.println(tmpString.toString());
      ((Applet)getParent()).getAppletContext().showDocument(new URL(tmpString.toString()), "_blank");
    }
    catch (Exception e)
    {
      MessageDialog tmpString = new MessageDialog(getFrame(), "Printing Error", true, new Label("The following error ocurred while printing:  " + e.getMessage()));
    }
  }
  
  private Frame getFrame()
  {
    Container c = getParent();
    while ((c != null) && (!(c instanceof Frame))) {
      c = c.getParent();
    }
    return (Frame)c;
  }
}
