<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" creationComplete="getdata(event)" 
					   xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import com.widged.porterStemmer.PorterAlgorithm;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;

			public var stemmer:PorterAlgorithm = new PorterAlgorithm();
			public var stopwordarray:ArrayCollection = new ArrayCollection();
			public var resultArray:ArrayCollection = new ArrayCollection();
			public var dataArray:ArrayCollection = new ArrayCollection();
			public var updateArray:ArrayCollection = new ArrayCollection();
			public var finishArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var s1:String = "";
			[Bindable]
			public var s2:String = "";
			
			protected function getdata(event:FlexEvent):void
			{
				
				getStopWords();
				getData.send();
				
			}
			public function getStopWords():void {
				var file3:File = new File("C:\\stopwordlist.txt");
				var fs:FileStream = new FileStream();
				fs.open(file3, FileMode.READ);
				//text of the the m.txt is now in mtext
				var mtext:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				do {
					var item:String = mtext.substring(0,mtext.indexOf("\r\n"));
					stopwordarray.addItem({term:item});
					mtext = mtext.substring(mtext.indexOf("\r\n")+2,mtext.length);
				}while (mtext.indexOf("\r\n") != -1);
				stopwordarray.addItem({term:mtext});
				var stop:String = "";
			}
			public function afterGetData(ev:ResultEvent):void {
				var stop:String = "";
				dataArray = new ArrayCollection();
				updateArray = new ArrayCollection();
				dataArray = ev.result.items.item;
				
				var numSort:SortField = new SortField();
				numSort.name = "PY";
				numSort.numeric = true;
				numSort.descending = true;
				
				var aSort:Sort = new Sort();
				aSort.fields = [numSort];
				dataArray.sort = aSort;
				dataArray.refresh();
				
				
				
				for (var i:uint = 0; i < dataArray.length; i++){
					
					if (dataArray[i].PY != null){
						var id:String = dataArray[i].id;
						var year:String = dataArray[i].PY;
						var text:String = dataArray[i].goodtext
						var freqArray:ArrayCollection = getFreqArray(text);
						trace(i.toString());
						resultArray.addItem({id:id,year:year,text:text,freqArray:freqArray});
					}
					
				}
				
				calcSim();
			}
			public function calcSim():void {
				var numSort:SortField = new SortField();
				numSort.name = "year";
				numSort.numeric = true;
				numSort.descending = true;
				var aSort:Sort = new Sort();
				aSort.fields = [numSort];
				resultArray.sort = aSort;
				resultArray.refresh();
				var stop:String = "";
				var lastYear:String = "";
				
				var simArray:ArrayCollection = new ArrayCollection();
				var tempArray:ArrayCollection = new ArrayCollection();
				for (var i:uint = 0; i < resultArray.length; i++){
					if (lastYear == ""){
						lastYear = resultArray[i].year;
						tempArray = new ArrayCollection();
						tempArray.addItem({id:resultArray[i].id,year:resultArray[i].year,
							text:resultArray[i].text,freqArray:resultArray[i].freqArray});
					}
					else if (resultArray[i].year != lastYear){
						
						//calculateSimilarity(tempArray,lastYear);
						
						tempArray = new ArrayCollection();
						lastYear = resultArray[i].year;
						tempArray.addItem({id:resultArray[i].id,year:resultArray[i].year,
							text:resultArray[i].text,freqArray:resultArray[i].freqArray});
					}
					else {
						tempArray.addItem({id:resultArray[i].id,year:resultArray[i].year,
							text:resultArray[i].text,freqArray:resultArray[i].freqArray});
					}
				}
				try{
					calculateSimilarity(tempArray,tempArray[0].year);
				}
				catch(e:Error){
					
				}
				
				printResults();
			}
			public function printResults():void {
				
				var totalcsvtext:String = "";
				
				for (var i:uint = 0; i < finishArray.length; i++){
					totalcsvtext = totalcsvtext + "\r\n" + finishArray[i].year;
					for (var j:uint = 0; j < finishArray[i].simArray.length; j++){
						totalcsvtext = totalcsvtext + "\r\n" 
							+ finishArray[i].simArray[j].userAidradr + "," 
							+ finishArray[i].simArray[j].userBidradr + ","
							+ finishArray[i].simArray[j].AveP;
					}
					
					
				}
				
				
				var fi:File = new File("C:\\wosoutput.txt");
				var st:FileStream = new FileStream();
				st.open(fi,FileMode.WRITE);
				st.writeUTFBytes(totalcsvtext);
				st.close();
				var stop333:String = "";
				
				
			}
			public function calculateSimilarity(x:ArrayCollection,year:String):void {
				var summationArray:ArrayCollection = new ArrayCollection();
				try{
					var simArray:ArrayCollection = new ArrayCollection();
					
					if (x.length > 0){
						//FOR EACH USER
						
						var i:uint = 0;
						for (i = 0; i < x.length; i++){
							var rid:uint = x[i].id;
							var rtags:ArrayCollection = new ArrayCollection();
							var sumation:Number = 0;
							rtags = x[i].freqArray;
							for (var k:uint = 0; k < rtags.length; k++){
								sumation = sumation + (rtags[k].count*rtags[k].count);
								
							}
							var sumationSQRT:Number = Math.sqrt(sumation);
							
							summationArray.addItem({idradr:rid,sumationSQRT:sumationSQRT});
						}
						
						
						
						
						for (i = 0; i < x.length; i++){
							var userAtags:ArrayCollection = x[i].freqArray;
							var userAidradr:uint =  x[i].id;
							//FOR EACH OTHER USER
							for (var j:uint = 0; j < x.length; j++){
								//DONT COMPARE TO YOURSELF
								if (j != i){
									var userBtags:ArrayCollection = x[j].freqArray;
									var userBidradr:Number = x[j].id;
									//var numberOfRelaventTags:uint = 0;
									var sumationOfWeights:Number = 0;
									var AveP:Number = 0;
									for (var k:uint = 0; k < userAtags.length; k++){
										var userAtag:String = userAtags[k].term;
										var userAweight:Number = userAtags[k].count;
										for (var l:Number = 0; l < userBtags.length; l++){
											var userBtag:String = userBtags[l].term;
											var userBweight:Number = userBtags[l].count;
											
											if (userBtag == userAtag){
												//MATCHING TAGS
												//numberOfRelaventTags++;
												sumationOfWeights = sumationOfWeights + ( userAweight * userBweight );
											}
										}
									}
									//END OF MATCHING USER A AND USER B TAGS
									//trace("Calculating similarity between user "+userAidradr.toString()+" and user "+userBidradr.toString());
									//trace("user : "+userAidradr.toString()+" values are summationOfWeights");
									var aSUMSQR:Number = 0;
									var bSUMSQR:Number = 0;
									
									
									for (var u:uint = 0; u < summationArray.length; u++){
										
										if (summationArray[u].idradr == userAidradr){
											aSUMSQR = summationArray[u].sumationSQRT;
										}
										else if (summationArray[u].idradr == userBidradr){
											bSUMSQR = summationArray[u].sumationSQRT;
										}
										
									}
									
									AveP = ( sumationOfWeights / (aSUMSQR*bSUMSQR));
									simArray.addItem({userAidradr:userAidradr,
										userBidradr:userBidradr,
										AveP:AveP});
									
									if (AveP > 1){
										var stop:String = "";
									}
								}
							}
							
						}
						
					}
					
					
				}
				catch(e:Error){
				
				}
				finishArray.addItem({year:year,simArray:simArray});
			}
			public function getFreqArray(s:String):ArrayCollection {
				var a:ArrayCollection = new ArrayCollection();
				var x:String = s.toLowerCase(); 
				var last:String = "";
				var n:int = 1;
				var max:int = 1;
				var i:uint = 0;
				
				do {
					if ((x.charAt(0) == "{")||(x.charAt(1) == "{")){
						x = x.substring(x.indexOf("}")+1,x.length);
					}
					
					var item:String = x.substring(0,x.indexOf(" "));
					if (item.length > 3){
						if (item.indexOf("\"") != -1){
							var j:RegExp = new RegExp("\"","g");
							item = item.replace(j,"");
							
						}
					
						
						if (goodItem(item)){
							a.addItem({term:x.substring(0,x.indexOf(" ")),count:0});
						}	
					}
					x = x.substring(x.indexOf(" ")+1,x.length);
				}while (x.indexOf(" ") != -1);
				
				// sort alphabetically
				var alphaSortF:SortField = new SortField();
				alphaSortF.name = "term";
				alphaSortF.numeric = false;
				
				var aSort:Sort = new Sort();
				aSort.fields = [alphaSortF];
				a.sort = aSort;
				a.refresh();
				
				max = getMaxOccur(a);
				
				// Figure out how many times each word appears
				for(i = 0; i < a.length; i++)
				{
					if(i > 0) // no comparison to do on the first one
					{ 
						s = a[i].term.toString();
						
						if(last == s)
						{
							n++;
						}
						else
						{
							// whatever term was last appears n times then reset n
							//if (n > 2){
							a[i-1].count = n;
							//}
							n = 1;
						}
					}
					last = a[i].term.toString();	
				}
				var dataSortField:SortField = new SortField();
				dataSortField.name = "count";
				dataSortField.numeric = true;
				dataSortField.descending = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				a.sort = numericDataSort;
				a.refresh();
				var b:ArrayCollection = new ArrayCollection();
				if (a.length > 20){
					for (i = 0; i < 20; i++){
						b.addItem(a[i]);
						
					}
				}
				return b;
			}
			private function getMaxOccur(arr:ArrayCollection):Number
			{
				var max:int = 1;
				var n:int = 1;
				var last:String = "";
				for(var i:Number = 0; i < arr.length; i++)
				{
					if(i > 0)
					{ 
						if(last != arr[i].term.toString())
						{
							if(n > max) max = n;
							n = 1;
						}
						else
						{
							n++;
						}					
					}	
					
					last = arr[i].term.toString();					
				} 
				return max;
			}
			public function goodItem(s:String):Boolean {
				if (s.length < 5){
					return false;
				}
				else if (s.indexOf("/") != -1){
					return false;
				}
				else if (s.indexOf("-") != -1){
					return false;
				}
				else if (s.indexOf("&") != -1){
					return false;
				}
				else if (s.indexOf("?") != -1){
					return false;
				}
				else if (s.indexOf("#") != -1){
					return false;
				}
				else if (s.indexOf("=") != -1){
					return false;
				}
				else if (s.indexOf(";") != -1){
					return false;
				}
				else if (s.indexOf("<") != -1){
					return false;
				}
				else if (s.indexOf(">") != -1){
					return false;
				}
				else if (s.indexOf(":") != -1){
					return false;
				}
				else if (s.indexOf(".") != -1){
					return false;
				}
				else if (s.indexOf("_") != -1){
					return false;
				}
				else if (s.indexOf("px") != -1){
					return false;
				}
				else if (s.indexOf("ȼ") != -1){
					return false;
				}
				else if (s.indexOf("1") != -1){
					return false;
				}
				else if (s.indexOf("2") != -1){
					return false;
				}
				else if (s.indexOf("3") != -1){
					return false;
				}
				else if (s.indexOf("4") != -1){
					return false;
				}
				else if (s.indexOf("5") != -1){
					return false;
				}
				else if (s.indexOf("6") != -1){
					return false;
				}
				else if (s.indexOf("7") != -1){
					return false;
				}
				else if (s.indexOf("8") != -1){
					return false;
				}
				else if (s.indexOf("9") != -1){
					return false;
				}
				else if (s.indexOf("0") != -1){
					return false;
				}
				else if (s.indexOf("â") != -1){
					return false;
				}
				
				for (var i:uint = 0; i < stopwordarray.length; i++){
					if (s.toLowerCase() == stopwordarray[i].term){
						return false;
					}
				}
				
				return true;
			}
			public var updateCounter:uint = 0;
			public function updateStuff():void {
				s1 = updateArray[updateCounter].id;
				s2 = updateArray[updateCounter].goodtext;
				putData.send();
			}
			public function afterUpdateToDatabase(ev:ResultEvent):void {
				if (updateCounter < updateArray.length-1){
					updateCounter++;
					s1 = updateArray[updateCounter].id;
					s2 = updateArray[updateCounter].goodtext;
					trace(s1);
				
					putData.send();
					
				}
				else {
					var sopttt:String  = "";
				}
			}
			
			
			
			// url="http://www.myradar.ca/php/scpubmed/getAffData.php"
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id = "getData"  result="afterGetData(event)" useProxy="false"  resultFormat="object"
					   url="http://localhost/webofsciencetextupdater/bin-debug/php/getItem.php"
					   method="GET" >
		</s:HTTPService>
		<s:HTTPService id="putData"  result="afterUpdateToDatabase(event)"
					   url="http://localhost/webofsciencetextupdater/bin-debug/php/updateAuthorLinkage.php" 
					   method="POST" useProxy="false">
			<s:request xmlns="">
				<s1>{s1}</s1>
				<s2>{s2}</s2>
			</s:request>
		</s:HTTPService>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
</s:WindowedApplication>
