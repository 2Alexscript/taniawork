<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:controls="com.flexcapacitor.controls.*"
		xmlns:components="components.*" xmlns:cs="cs.*"
		backgroundColor="#FFFFFF"
		backgroundAlpha="1"  title="Locations"
		viewActivate="view1_activateHandler(event)">
	<s:navigationContent>
		<s:Label color="#FFFFFF" click="goToMap()" horizontalCenter="0" text="Map" verticalCenter="0"/>
	</s:navigationContent>
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.geom.ColorTransform;
			import flash.geom.Rectangle;
			import flash.net.dns.AAAARecord;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.supportClasses.StyleableTextField;
			import spark.core.ContentCache;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			
			static public const s_imageCache:ContentCache = new ContentCache();
			protected var g:Geolocation = new Geolocation();    
			[Bindable]
			public var listData:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var mylat:Number = 53.592;
			[Bindable]
			public var mylong:Number = -113.540;
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var emailGo:String = "none";
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var busy:Boolean = true;
			
			public var maintimer:Timer = new Timer(5000,0);
			public var foundgps:Boolean = false;
			[Bindable]
			public var prefound:Boolean = false;
			public var timerval:Number = 5000;
			
			
			
			protected function view1_activateHandler(event:Event):void
			{
				busy = true;
				prefound = false;
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
			/*	stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE merchusers";
				stmt.execute();*/
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS merchusers (" +
					"id int(1)," +
					"business_name varchar(255)," +
					"website varchar(255)," +
					"facebook varchar(255)," +
					"twitter varchar(255)," +
					"business_description longtext," +
					"email varchar(255)," +
					"business_number varchar(255)," +
					"business_address1 varchar(255)," +
					"business_city varchar(255)," +
					"business_locality varchar(255)," +
					"business_postalcode varchar(255)," +
					"business_country varchar(255)," +
					"business_picture varchar(255)," +
					"lat varchar(255)," +
					"longa varchar(255)," +
					"categoryname varchar(255)," +
					"distance varchar(255))";				
				stmt.execute();
				
				try{
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT * FROM merchusers";
					stmt.execute();
					var merchData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (merchData.length != 0){
						listData = merchData;
						busy = false;
						prefound = true;
						searchClick();
					}
					else {
						listData = new ArrayCollection();
						
					}	
				}
				catch(e:Error) {
					listData = new ArrayCollection();
				}	
				

				
				foundgps = false;
				try{
					if (Geolocation.isSupported)
					{
						g.addEventListener(GeolocationEvent.UPDATE, onUpdate);
						addEventListener(ViewNavigatorEvent.REMOVING,onRemove);
						foundgps = true;
					}
					else
					{	
						mylat = 53.55921;
						mylong = -113.54009;
						
					}		
				}
				catch(e:Error){
					mylat = 53.59221;
					mylong = -113.54009;
				}
			
				try{
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
					stmt.execute();
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (resData.length != 0){
						emailGo = resData[0].email;
					}
					else {
						emailGo = "none";
					}	
				}
				catch(e:Error) {
					emailGo = "none";
				}	
				maintimer = new Timer(timerval,0);
				maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
				maintimer.start();
				if (foundgps == false){
					calllocationupdate();
				}
				
			}	
			public function aftertimer(ev:TimerEvent):void {
				
				if (listData.length <= 0){
					busy = true;
					getLocations.cancel();
					listData = new ArrayCollection();
					maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
					maintimer.stop();
					timerval = timerval + 1000;
					maintimer = new Timer(timerval,0);
					maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
					maintimer.start();
					calllocationupdate();
				}
				else {
					maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
					maintimer.stop();
				}
			}
			public function afterGetLocations(event:ResultEvent):void
			{
				busy = false;
				var stmt:SQLStatement = new SQLStatement();
				
				if (prefound == false){
					listData = new ArrayCollection();
					try{			
						listData = event.result[0].ress.res;		
					}
					catch(e:Error){
						try{
							listData.addItem(event.result[0].ress.res);
						}
						catch(e:Error){
						}
					}
					
					if (listData.length > 0){
						
						for (var i:uint = 0; i < listData.length; i++){
							prefound = false;
							stmt = new SQLStatement();
							sqlConnection = new SQLConnection();
							sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
							stmt = new SQLStatement();
							stmt.sqlConnection = sqlConnection;
							stmt.text = "insert into merchusers values(" +
								"0,'" +
								listData[i].business_name+"','" +
								listData[i].website+"','" +
								listData[i].facebook+"','" +
								listData[i].twitter+"','" +
								listData[i].business_description+"','" +
								listData[i].email+"','" +
								listData[i].business_number+"','" +
								listData[i].business_address1+"','" +
								listData[i].business_city+"','" +
								listData[i].business_locality+"','" +
								listData[i].business_postalcode+"','" +
								listData[i].business_country+"','" +
								listData[i].business_picture+"','" +
								listData[i].lat+"','" +
								listData[i].longa+"','" +
								listData[i].categoryname+"','" +
								listData[i].distance+"')";			
							stmt.execute();
						}
					
					}
					
					
					
					
				}
				else {
					var templistData:ArrayCollection = new ArrayCollection();
					try{			
						templistData = event.result[0].ress.res;		
					}
					catch(e:Error){
						try{
							templistData.addItem(event.result[0].ress.res);
						}
						catch(e:Error){
						}
					}
					
					
					if (templistData.length > 0){
						stmt = new SQLStatement();
						sqlConnection = new SQLConnection();
						sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
						var stmt2:SQLStatement = new SQLStatement();
						stmt2.sqlConnection = sqlConnection;
						stmt2.text = "delete from merchusers";
						stmt2.execute();
						for (var j:uint = 0; j < listData.length; j++){

							stmt = new SQLStatement();
							stmt.sqlConnection = sqlConnection;
							stmt.text = "insert into merchusers values(" +
								"0,'" +
								templistData[j].business_name+"','" +
								templistData[j].website+"','" +
								templistData[j].facebook+"','" +
								templistData[j].twitter+"','" +
								templistData[j].business_description+"','" +
								templistData[j].email+"','" +
								templistData[j].business_number+"','" +
								templistData[j].business_address1+"','" +
								templistData[j].business_city+"','" +
								templistData[j].business_locality+"','" +
								templistData[j].business_postalcode+"','" +
								templistData[j].business_country+"','" +
								templistData[j].business_picture+"','" +
								templistData[j].lat+"','" +
								templistData[j].longa+"','" +
								templistData[j].categoryname+"','" +
								templistData[j].distance+"')";			
							stmt.execute();
							
							listData = templistData;
						}
						
					}

					
				}
				searchClick();
			
			} 
			public function storeListClick():void {	
				if (storeList.selectedIndex != -1){
					navigator.pushView(StoresDescription, listData[storeList.selectedIndex]);	
				}
			}
			public function searchClick():void
			{
				listData.filterFunction = filterCompleted;
				listData.refresh();
				storeList.dataProvider = listData;
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.business_description.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.business_tagline.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			private function returnall(item:Object):Boolean{
				return true;
			}
			protected function onUpdate(event:GeolocationEvent):void
			{
				mylat = event.latitude;
				mylong = event.longitude;	
				calllocationupdate();
			}	
			protected function onRemove(event:ViewNavigatorEvent):void
			{
				g.removeEventListener(GeolocationEvent.UPDATE, onUpdate);                
			}
			public function press(event:KeyboardEvent):void {
				searchClick();
			}
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];				
			}
		
			public function goToMap():void {
				navigator.pushView(StoresMap,
					{mylat:this.mylat,mylong:this.mylong});
			}
			public function calllocationupdate():void {
				if (foundgps == false){
					mylat = 53.592+Math.random();
					mylong = -113.540+Math.random();
				}
				
				
				try{
					getLocations.cancel();
				}
				catch(e:Error){
					
				}
				
				try{
					getLocations.send();
				}
				catch(e:Error){
					
				}
				
				
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getLocations" method="GET" resultFormat="array"
					   url="http://www.scoutcard.ca/php/locations/getLocationsMobile.php"
					   result="afterGetLocations(event)" >
			<s:request xmlns="">
				<mylat>{mylat}</mylat>		
				<mylong>{mylong}</mylong>		
				<emailGo>{emailGo}</emailGo>	
			</s:request>
		</s:HTTPService>
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>	
	</fx:Declarations>
	<s:VGroup width="100%" gap="-15" height="100%" horizontalAlign="center">
	<s:VGroup width="100%" height="100%" gap="0" horizontalAlign="center">
		<s:BorderContainer x="0" y="0"  borderVisible="false" height="10%" backgroundAlpha="1" borderAlpha="0"
						   dropShadowVisible="false" backgroundColor="#ebebeb" width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingLeft="5" paddingRight="5" verticalAlign="middle" height="98%">
				<s:TextInput   fontFamily="Arial"
							  id="key" left="5" right="5" top="1" width="100%" height="80%"
							 keyUp="press(event);" maxChars="20" prompt="Search Stores"
							 returnKeyLabel="search"/>
				<s:Image click="searchClick();" mouseDown="profDown(event)" mouseUp="profUp(event)">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('assets/search_Low.png')"
												source240dpi="@Embed('assets/search_Med.png')"
												source320dpi="@Embed('assets/search_High.png')"/>
					</s:source>
				</s:Image>
			</s:HGroup>
		</s:BorderContainer>
		<s:Group width="100%" height="100%" visible="true" id="listCont" >
			<s:BorderContainer  backgroundAlpha="1" top="0" bottom="0" borderAlpha="0" width="100%"  >
				<s:List width="100%" horizontalCenter="0" top="0" bottom="0" 
						alternatingItemColors="[0xf5f5f5,0xebebeb ]"
						id="storeList" labelField="name"  horizontalScrollPolicy="off" 
						dataProvider="{listData}" itemRenderer="components.storeResult"
						selectedIndex="1" click="storeListClick();" >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="1"/>
					</s:layout>
				</s:List>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" id="loadingGroup" visible="false" height="50">
					<s:BitmapImage id="arrowImage"  source="@Embed('assets/Arrow-double-up-48High.png')"/>
					<s:Label id="loadText" color="#000000" text="Pull down to refresh"/>
				</s:HGroup>
			</s:BorderContainer>	
		</s:Group>
	</s:VGroup>
	</s:VGroup>
	<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>
</s:View>