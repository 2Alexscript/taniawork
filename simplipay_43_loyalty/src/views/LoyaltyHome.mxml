<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true" 
		xmlns:s="library://ns.adobe.com/flex/spark"   backgroundColor="#FFFFFF"
		viewActivate="onActivate(event)" 
		title="Loyalty" xmlns:components="components.*" >
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.geom.ColorTransform;
			import flash.sensors.Geolocation;
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.effects.Fade;
			import mx.effects.effectClasses.FadeInstance;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			import mx.rpc.events.ResultEvent;
			import spark.components.supportClasses.StyleableTextField;
			import spark.effects.Fade;
			import spark.events.IndexChangeEvent;
			import spark.events.ListEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			public var profDraging:Boolean = false;
			[Bindable]
			public var loyaltyArray:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var emailGo:String = "";
			[Bindable]
			public var nameGo:String = "";
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var busy:Boolean = true;
			[Bindable]
			public var done:Boolean = false;
			protected var sqlConnection:SQLConnection;
			[Bindable]
			public var prefound:Boolean = false;
			public var maintimer:Timer = new Timer(5000,0);
			public var timerval:Number = 5000;
			public function onActivate(event:Event):void
			{	
				busy = true;
				prefound = false;

				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				//stmt = new SQLStatement();
				//stmt.sqlConnection = sqlConnection;
				//stmt.text = "DROP TABLE userloyalty";
				//stmt.execute();
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS userloyalty (" +
					"id int(255)," +
					"business_name varchar(255)," +
					"business_picture varchar(255)," +
					"amount varchar(255)," +
					"userloyalty varchar(255))";				
				stmt.execute();
				
				
				try{
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT * FROM userloyalty";
					stmt.execute();
					var userData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (userData.length != 0){
						loyaltyArray = userData;
						busy = false;
						prefound = true;
						searchClick();
					}
					else {
						loyaltyArray = new ArrayCollection();
						
					}	
				}
				catch(e:Error) {
					loyaltyArray = new ArrayCollection();
				}	
				
				
				
				try{
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
					stmt.execute();
					var foundactive:Boolean = false;
					var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
					if (resData.length != 0){
						emailGo = resData[0].email;
						getloyalty.send();		
					}
					else {
						emailGo = "none";
					}	
				}
				catch(e:Error) {
					emailGo = "none";
				}
				
				maintimer = new Timer(timerval,0);
				maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
				maintimer.start();
				try{
					getloyalty.cancel();
				}
				catch(e:Error){
					
				}
				
				try{
					getloyalty.send();
				}
				catch(e:Error){
					
				}
				
				
			}
			public function aftertimer(ev:TimerEvent):void {
				
				
					if (loyaltyArray.length <= 0){
						busy = true;
						getloyalty.cancel();
						loyaltyArray = new ArrayCollection();
						maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.stop();
						timerval = timerval + 1000;
						maintimer = new Timer(timerval,0);
						maintimer.addEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.start();
						
						
						try{
							getloyalty.send();
						}
						catch(e:Error){
							
						}
					}
					else {
						maintimer.removeEventListener(TimerEvent.TIMER,aftertimer);
						maintimer.stop();
					}
					
				
				
			}
			
			public function afterGetloyalty(ev:ResultEvent):void  {
				busy = false;
				var stmt:SQLStatement = new SQLStatement();
				
				
				if (isFingerDown == false){
					
					if (prefound == false){
						loyaltyArray =  new ArrayCollection();
						
						try{
							loyaltyArray = ev.result[0].ress.res;
							
						}
						catch(e:Error){
							try{
								loyaltyArray.addItem( ev.result[0].ress.res);
							}
							catch(e:Error){
								
							}
						}
						
						
						if (loyaltyArray.length > 0){
							sqlConnection = new SQLConnection();
							sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
							var stmt2:SQLStatement = new SQLStatement();
							stmt2.sqlConnection = sqlConnection;
							stmt2.text = "delete from userloyalty";
							stmt2.execute();
							for (var i:uint = 0; i < loyaltyArray.length; i++){
								prefound = false;
								
								stmt = new SQLStatement();
								stmt.sqlConnection = sqlConnection;
								stmt.text = "insert into userloyalty values(" +
									loyaltyArray[i].id+",'" +
									loyaltyArray[i].business_name+"','" +
									loyaltyArray[i].business_picture+"','" +
									loyaltyArray[i].amount+"','" +
									loyaltyArray[i].userloyalty+"')";			
								stmt.execute();
							}
							
							
							
						}
						
						
					}
					else {
						var templistData:ArrayCollection = new ArrayCollection();
						try{			
							templistData = ev.result[0].ress.res;		
						}
						catch(e:Error){
							try{
								templistData.addItem(ev.result[0].ress.res);
							}
							catch(e:Error){
							}
						}
						
						
						if (templistData.length > 0){
							stmt = new SQLStatement();
							sqlConnection = new SQLConnection();
							sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
							var stmt3:SQLStatement = new SQLStatement();
							stmt3.sqlConnection = sqlConnection;
							stmt3.text = "delete from userloyalty";
							stmt3.execute();
							for (var j:uint = 0; j < templistData.length; j++){
								
								stmt = new SQLStatement();
								stmt.sqlConnection = sqlConnection;
								stmt.text = "insert into userloyalty values(" +
									templistData[j].id+",'" +
									templistData[j].business_name+"','" +
									templistData[j].business_picture+"','" +
									templistData[j].amount+"','" +
									templistData[j].userloyalty+"')";			
								stmt.execute();
								loyaltyArray = new ArrayCollection();
								loyaltyArray = templistData;
							}
							
						}
						
						
					}
					
					
					sortPress(sortMode);
					searchClick();
					//sort array by most recent dates
					var stop:String = "";
					noloyalty.visible = false;
					if (loyaltyArray.length <= 0){
						noloyalty.visible = true;
						
					}
					
				}
				
				
			}
			public function sortPress(u:uint):void {
				//sortBTN.closeDropDown();
				var dataSortField:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField2:mx.collections.SortField = new mx.collections.SortField();
				var dataSortField3:mx.collections.SortField = new mx.collections.SortField();
				var numericDataSort:Sort = new Sort();
				var stringDataSort:Sort = new Sort();
				reverse = false;
				
				
				
				dataSortField.descending = reverse;
				dataSortField2.descending = reverse;
				dataSortField3.descending = reverse;
				
				
				u = 0;
				sortMode = 0;
				
				
				if (u == 0){
					dataSortField.name = "business_name";
					dataSortField.numeric = false;
					stringDataSort.fields = [dataSortField];
					loyaltyArray.sort = stringDataSort;
				}
				else if (u == 1){
					dataSortField.name = "amount";
					dataSortField.numeric = true;
					
					numericDataSort.fields = [dataSortField];
					loyaltyArray.sort = numericDataSort;
					
				}
				
				loyaltyArray.refresh();
				loyaltylist.dataProvider = loyaltyArray;
			}
			public function loyaltyListChange(ev:IndexChangeEvent):void {
				if (ev.newIndex != -1){
					navigator.pushView(LoyaltyDescription, ev.currentTarget.selectedItems[0]);					
				}
			}
			
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function press(event:KeyboardEvent):void {
				//if ((event.keyCode == 13)||(event.charCode == 13)){
					searchClick();
				//}
			}
			public function searchClick():void {
				loyaltyArray.filterFunction = filterCompleted;
				
				loyaltyArray.refresh();
				loyaltylist.dataProvider = loyaltyArray;
				var s:String = "";
				s.toLowerCase()
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.amount.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			private function returnall(item:Object):Boolean{
				return true;
			}
			public function goFilter():void {
				//navigator.pushView(HomeloyaltyFilter);
			}
			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
				var s:String = "";
				
			}
			[Bindable]
			public var isFingerDown:Boolean = false;
			public function listFingerDown():void {
				isFingerDown = true;
			}
			public function listFingerUp():void {
				isFingerDown = false;
			}
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:HTTPService id="getloyalty" method="GET" 
					   resultFormat="array" 	
					   url="http://www.scoutcard.ca/php/loyalty/getloyaltyList.php"
					   result="afterGetloyalty(event)" >	
			<s:request xmlns="">
				<emailGo>{emailGo}</emailGo>		
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:VGroup width="100%" gap="-15" height="100%" horizontalAlign="center">
		<s:VGroup width="100%" height="100%" horizontalAlign="center">
			<s:BorderContainer x="0" y="0"  borderVisible="false" height="10%" backgroundAlpha="1" borderAlpha="0"
							   dropShadowVisible="false" backgroundColor="#FFFFFF" width="100%">
				<s:HGroup width="100%" horizontalAlign="center" paddingLeft="5" paddingRight="5" 
						  verticalAlign="middle" height="98%">
					<s:TextInput fontFamily="Arial"
								  id="key" left="5" right="5" top="1" width="100%" height="80%"
								keyUp="press(event);" maxChars="20" prompt="Search Loyalty"
								returnKeyLabel="search"/>
					<s:Image click="searchClick();" mouseDown="profDown(event)" mouseUp="profUp(event)">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('assets/search_Low.png')"
													source240dpi="@Embed('assets/search_Med.png')"
													source320dpi="@Embed('assets/search_High.png')"
													source480dpi="@Embed('assets/search_Higher.png')"
													source640dpi="@Embed('assets/search_Highest.png')"/>
						</s:source>
					</s:Image>
				</s:HGroup>
			</s:BorderContainer>
			<s:Group width="100%" height="100%" visible="true" id="listCont">
				<s:Group   top="0" bottom="0" width="100%"  >
					<s:List width="95%" horizontalCenter="0" top="0" bottom="0" contentBackgroundAlpha="1" 
							id="loyaltylist" labelField="name"  contentBackgroundColor="#FFFFFF"  
							dataProvider="{loyaltyArray}" itemRenderer="components.loyaltyListItem"
							selectedIndex="1" change="loyaltyListChange(event);"
							mouseDown="listFingerDown();" 
							mouseUp="listFingerUp();"
							mouseOut="listFingerUp();"
							horizontalScrollPolicy="off"  >
						<s:layout>
							<s:VerticalLayout gap="15">
							</s:VerticalLayout>
						</s:layout>
					</s:List>
				</s:Group>
				<s:Label text="You haven't visited any Scout locations yet!" visible="false" id="noloyalty" width="75%" textAlign="center" horizontalCenter="0"  verticalCenter="0" />
			</s:Group>	
			</s:VGroup>
		</s:VGroup>
		<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>

</s:View>