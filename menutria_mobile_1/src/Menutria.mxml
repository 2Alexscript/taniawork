<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark"  
			   runtimeDPIProvider="com.renaun.mobile.dpi.CustomDPIProvider"
			   initialize="initz(event)" 
			   applicationComplete="onApplicationComplete()" 			
			   contentBackgroundAlpha="1" 
			   contentBackgroundColor="#43c7ae"
			   backgroundAlpha="1" 
			   xmlns:maps="com.adobe.nativeExtensions.maps.*" 
			   frameRate="120"  
			   backgroundColor="#43c7ae" 
			   preloader="com.renaun.caltrain.components.MultiDPISplashScreen" 
			   splashScreenScaleMode="none"  
			   mouseUp="overAllMouseUp(event)" >
	<s:ViewNavigatorApplication persistNavigatorState="true" id="mainNavigator" click="navigatorClick(event)"  
								height="100%"  visible="true" x="0"  elementAdd="viewadd(event)" width="{this.width}"  backgroundColor="#5b5b5b">
		<s:navigationContent>
			<s:Group  id="menufeaturebutton"
					  width="{this.width/8}" left="0" x="0"
					  height="100%" 
					  mouseDown="menuButtonClick();"
					  mouseEnabledWhereTransparent="true"
					  horizontalCenter="0" >
				<s:Image left="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0" 
						 mouseEnabled="false" 
						 contentLoader="{s_imageCache}" >
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/homemenu.png')"
												source240dpi="@Embed('assets/320/homemenu.png')"
												source320dpi="@Embed('assets/320/homemenu.png')"
												source480dpi="@Embed('assets/320/homemenu.png')"
												source640dpi="@Embed('assets/320/homemenu.png')"/>
					</s:source>
				</s:Image>
			</s:Group>
		</s:navigationContent>
		<s:actionContent>
			<s:Group id="filterfeaturebutton"   mouseDown="filtersButtonClick();"
					 mouseEnabledWhereTransparent="true"  height="100%" 
					 right="0" horizontalCenter="0"    width="{this.width/8}" >
				<s:Image mouseEnabled="false" right="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0"   contentLoader="{s_imageCache}"  >
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/homefilter.png')"
												source240dpi="@Embed('assets/320/homefilter.png')"
												source320dpi="@Embed('assets/320/homefilter.png')"
												source480dpi="@Embed('assets/320/homefilter.png')"
												source640dpi="@Embed('assets/320/homefilter.png')"/>
					</s:source>
				</s:Image>
			</s:Group>
		</s:actionContent>	
	</s:ViewNavigatorApplication>
	
	<s:Group  id="menu"  height="100%"  width="{this.width/1.15}" 
						x="{0-(this.width/1.15)}">
		<s:VGroup width="{this.width/1.15}" height="100%" paddingTop="0" gap="0">
			<s:BorderContainer width="{this.width/1.15}" height="{actionbarheight+4}"
							    backgroundAlpha="1" borderVisible="false" backgroundColor="#43c7ae"
					 mouseDown="menuButtonClick();"    >
				<s:Label  left="15" text="menu" verticalCenter="0" mouseEnabled="false"
						 textAlign="right" styleName="textsize6"   color="#FFFFFF"  fontWeight="bold"/>
				<s:Group  width="{this.width/8}"  right="0"
						  verticalCenter="0" mouseEnabled="false">
					<s:Image right="15"  verticalCenter="0" 
							 mouseEnabled="false" contentLoader="{s_imageCache}" >
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/homemenu.png')"
													source240dpi="@Embed('assets/320/homemenu.png')"
													source320dpi="@Embed('assets/320/homemenu.png')"
													source480dpi="@Embed('assets/320/homemenu.png')"
													source640dpi="@Embed('assets/320/homemenu.png')"/>
						</s:source>
					</s:Image>
				</s:Group>
			</s:BorderContainer>
			<s:BorderContainer  width="{this.width/1.15}" click="goProfile(event)"  borderVisible="false" backgroundColor="#c4c4c4">
				<s:VGroup width="100%" id="defaultimggroup" horizontalAlign="center" gap="0">
					<s:Group height="{30/(320/Capabilities.screenDPI)}"/>
					<s:Image  horizontalCenter="0" verticalCenter="0"  contentLoader="{s_imageCache}" >
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/profile-default.png')"
													source240dpi="@Embed('assets/320/profile-default.png')"
													source320dpi="@Embed('assets/320/profile-default.png')"
													source480dpi="@Embed('assets/320/profile-default.png')"
													source640dpi="@Embed('assets/320/profile-default.png')"/>
						</s:source>
					</s:Image>
					<s:Group height="{30/(320/Capabilities.screenDPI)}"/>
				</s:VGroup>
			</s:BorderContainer>
			
			<s:List id="listmenu" height="100%" contentBackgroundColor="#5b5b5b" contentBackgroundAlpha="1" dataProvider="{homeitems}"
					width="{this.width/1.15}"  borderVisible="false"  selectedIndex="1"  change="menuchange(event)"
					itemRenderer="components.mainmenulistitem" alternatingItemColors="[0x5b5b5b,0x5b5b5b ]" selectionColor="#5b5b5b" >
				<s:layout>
					<s:VerticalLayout horizontalAlign="contentJustify" 
									  gap="0"/>
				</s:layout>
			</s:List>
		</s:VGroup>
	</s:Group>
	
	<s:Group  id="filtersmenu" contentBackgroundAlpha="1" 
			  contentBackgroundColor="#43c7ae"  height="100%"  width="{this.width/1.15}"
						x="{this.width+(this.width/1.15)}">
		<s:VGroup width="{this.width/1.15}" height="100%" paddingTop="0" gap="0">
			<s:BorderContainer width="{this.width/1.15}" height="{actionbarheight+4}"
							   backgroundAlpha="1" backgroundColor="#43c7ae"
							   mouseDown="filtersButtonClick();"  borderVisible="false"    >
				<s:Label  right="{15/(320/Capabilities.screenDPI)}" text="filters" verticalCenter="0" mouseEnabled="false"
						  textAlign="left" styleName="textsize6"   color="#FFFFFF"  fontWeight="bold"/>
				<s:Group  width="{this.width/8}"  left="0"
						  verticalCenter="0"
						 	 mouseEnabled="false">
					<s:Image right="{15/(320/Capabilities.screenDPI)}"  verticalCenter="0" 
							 mouseEnabled="false" contentLoader="{s_imageCache}" >
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('assets/160/homefilter.png')"
													source240dpi="@Embed('assets/320/homefilter.png')"
													source320dpi="@Embed('assets/320/homefilter.png')"
													source480dpi="@Embed('assets/320/homefilter.png')"
													source640dpi="@Embed('assets/320/homefilter.png')"/>
						</s:source>
					</s:Image>
				</s:Group>
			</s:BorderContainer>
			
			<s:BorderContainer width="100%" height="{50/(320/Capabilities.screenDPI)}" backgroundColor="#494949"
							   borderVisible="false"  backgroundAlpha="1">
				<s:Label fontFamily="HelveticaNeuecff" styleName="textsize0" fontWeight="normal"
						 text="Only Show:" 
						 left="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0"
						 color="#FFFFFF"/>
				
				<s:Group right="{20/(320/Capabilities.screenDPI)}" click="clearallclick(event)"   verticalCenter="0">
					<s:Label fontFamily="HelveticaNeuecff" mouseEnabled="false" styleName="textsize0" fontWeight="normal"
							 text="Clear All" 
							 left="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0"
							 color="#43c7ae"/>
				</s:Group>
			</s:BorderContainer>
			<s:List id="listfilters" height="100%" contentBackgroundColor="#5b5b5b" 
					contentBackgroundAlpha="1" dataProvider="{filteritems}" allowMultipleSelection="true"
					width="100%"  borderVisible="false"     change="filterchange(event)"
					alternatingItemColors="[0x5b5b5b,0x5b5b5b ]" 
					itemRenderer="components.filterslistitem" >
				
			</s:List>
		</s:VGroup>		
	</s:Group>
	<fx:Style source="./main.css"/>
	<fx:Script source="func/globalFunctions.as" />
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.desktop.NativeApplication;
			import flash.desktop.SystemIdleMode;
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.InvokeEvent;
			import flash.events.MouseEvent;
			import flash.events.NativeWindowDisplayStateEvent;
			import flash.events.TransformGestureEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.filesystem.File;
			import flash.sensors.Geolocation;
			import mx.collections.ArrayCollection;
			import mx.core.DPIClassification;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.events.TouchInteractionEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.rpc.events.ResultEvent;
			import mx.utils.Base64Encoder;
			import com.milkmangames.nativeextensions.events.*;
			import com.milkmangames.nativeextensions.*;
			import spark.components.ActionBar;
			import spark.components.BusyIndicator;
			import spark.components.ButtonBar;
			import spark.components.Group;
			import spark.components.View;
			import spark.components.ViewNavigator;
			import spark.core.ContentCache;
			import spark.effects.Resize;
			import spark.events.ElementExistenceEvent;
			import spark.events.IndexChangeEvent;
			import spark.managers.PersistenceManager;
			import spark.transitions.CrossFadeViewTransition;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.ViewTransitionBase;
			import spark.transitions.ZoomViewTransition;
			import views.AccountSettings;
			import views.Home;
			import views.Login;
			import views.MenuAll;
			import views.Profile;
			import views.Restrictions;
			import views.Settings;
			import views.SpecialsAll;
			[Bindable]
			public var gps:Geolocation;
			[Bindable]
			public var VERSIONID:Number = 4;
			public var gpsIsSupported:Boolean = false;
			public var trafficEnabled:Boolean = false;
			public var gpsTried:Boolean = false;
			[Bindable]
			public var assetPath:String;
			[Bindable]
			public var durationofmovment:Number = 50;
			public var biBusyIndicator:BusyIndicator;		
			public var searchLocation:String;
			public var searchTerm:String;
			public var directionsLocations:Array;
			public var crosstrans:CrossFadeViewTransition = new CrossFadeViewTransition(); 
			public var xFadeTrans:CrossFadeViewTransition = new CrossFadeViewTransition();
			[Bindable]
			public var actionbarheight:Number = 0;
			public static const FACEBOOK_APP_ID:String="1461197797460743";
			[Bindable]
			public var homeitems:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filteritems:ArrayCollection = new ArrayCollection(
				[	
					{name:"Open Now",chosen:'no',type:1},
					{name:"Offering Specials",chosen:'no',type:1},
					{name:"",chosen:'no',type:0},
					{name:"I Have Eaten",chosen:'no',type:1},
					{name:"I Haven't Eaten",chosen:'no',type:1}
				]);
			protected function onApplicationComplete():void
			{
				
				switch (applicationDPI)
				{
					case DPIClassification.DPI_640:
					{
						actionbarheight = 172;
						break;
					}
					case DPIClassification.DPI_480:
					{
						actionbarheight = 129;
						break;
					}
					case DPIClassification.DPI_320:
					{
						actionbarheight = 86;
						break;
					}
					case DPIClassification.DPI_240:
					{
						actionbarheight = 65;
						break;
					}
					default:
					{
						actionbarheight = 43;
						break;
					}
				}

				
				
				homeitems = new ArrayCollection([{name:"Profile",img:menu_account,colorid:"0x50bcb6"},
					{name:"Home",img:menu_home,colorid:"0xef4056", selected:true},
					{name:"Restrictions",img:menu_restrictions,colorid:"0xfcb643"},
					{name:"Dishes",img:menu_dish,colorid:"0xfcb643"},
					{name:"Specials",img:menu_ratings,colorid:"0xfcb643"},
					{name:"Settings",img:menu_settings,colorid:"0xfcb643"}
				]);
				this.stage.autoOrients = false;				
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);			
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				verifyDataTablesViaVersion();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				if (resData.length != 0){
					var namego:String = resData[0].name;
					for (var i:uint = 0; i < homeitems.length; i++){
						if (homeitems[i].name == "Profile"){
							homeitems[i].name = namego.charAt(0).toUpperCase()+namego.substring(1,namego.length);
						}
					}
					if (mainNavigator.navigator.firstView == null){
						if (mainNavigator.navigator.activeView == null){
							mainNavigator.navigator.firstView = Home;
							mainNavigator.navigator.pushView(Home);	
						}
						
					}
					
				}
				else {
					if (mainNavigator.navigator.firstView == null){
						if (mainNavigator.navigator.activeView == null){
							mainNavigator.navigator.firstView = Login;
							mainNavigator.navigator.pushView(Login);
						}
						
					}
				}	
				
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE,onSwipe);
				
			}
			
			public function onSwipe(event:TransformGestureEvent):void
			{
				var ev:MouseEvent;
				if (event.currentTarget.id != 'uic'){
					switch(event.offsetX)
					{
						case 1:
						{
							// swiped right also back swipe
							//opening menu or closing filters
							if ((filtersmoving == false)&&(filtersopen)){
								setNavigatorMovingStatus(true);
								autofiltersmove = false;
								openclosestatus = 2;
								filtersmoving = true;
								mainNavigator.navigator.activeView.mouseChildren = false;
								this.addEventListener(MouseEvent.MOUSE_MOVE, updateFiltersLocation);
								menufeaturebutton.visible = false;
								
							}
							else if ((mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('login') == -1)){ 
								if (menumoving == false){
									setNavigatorMovingStatus(true);
									automenumove = false;
									openclosestatus = 1;
									menumoving = true;
									mainNavigator.navigator.activeView.mouseChildren = false;
									this.addEventListener(MouseEvent.MOUSE_MOVE, updateMenuLocation);
									filterfeaturebutton.visible = false;
								}	
							}
							
							
							
							break;
						}
						case -1:
						{
							// swiped left
							//opening filters or closing menu
							if ((menumoving == false)&&(menuopen)){
								setNavigatorMovingStatus(true);
								openclosestatus = 2;
								automenumove = false;
								menumoving = true;
								mainNavigator.navigator.activeView.mouseChildren = false;
								this.addEventListener(MouseEvent.MOUSE_MOVE, updateMenuLocation);
								filterfeaturebutton.visible = false;
							}
							else if ((mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('home') != -1)||
								(mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('specialsall') != -1)||
								(mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('menuall') != -1)){
								
								if (filtersmoving == false){
									setNavigatorMovingStatus(true);
									openclosestatus = 1;
									autofiltersmove = false;
									filtersmoving = true;
									mainNavigator.navigator.activeView.mouseChildren = false;
									this.addEventListener(MouseEvent.MOUSE_MOVE, updateFiltersLocation);
									menufeaturebutton.visible = false;
								}
								
							}
							
							
							
							break;
						}
					}
					switch(event.offsetY)
					{
						case 1:
						{
							break;
						}
						case -1:
						{
							break;
						}
					}
					
				}		
			}
			public function logout():void {
				var vn4:ViewNavigator = new ViewNavigator();
				vn4.firstView = views.Login;
				vn4.percentWidth = 100;
				vn4.percentHeight = 100;
			}	
			public function menuchange(event:IndexChangeEvent):void
			{
				if (menuopen){
					closeMenu();
					pushScreen(listmenu.selectedIndex);
				}
				else {
					pushScreen(listmenu.selectedIndex);
				}
				
			}
			
			public function pushScreen(u:uint):void {
				if (u == 0){
					//your account
					mainNavigator.navigator.pushView(Profile);
				}
				else if (u == 1){
					//home
					mainNavigator.navigator.pushView(Home,{homefilterarray:[]});
				}
				else if (u == 2){
					//restrictions
					mainNavigator.navigator.pushView(Restrictions);
					
				}
				else if (u == 3){
					//specials
					mainNavigator.navigator.pushView(MenuAll,{homefilterarray:[]});	
				}
				else if (u == 4){
					//specials
					mainNavigator.navigator.pushView(SpecialsAll);	
				}
				else if (u == 5){
					//settings
					mainNavigator.navigator.pushView(Settings);
				}	
			}
			public function goProfile(event:MouseEvent):void
			{
				mainNavigator.navigator.pushView(Profile);
			}
			public function filterchange(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				var homefilterarray:Array = new Array();
				
				try{
					var j:uint = 0;
					var eatinval:uint = 0;
					for (var i:uint = 0; i < event.currentTarget.selectedItems.length; i++){
						if (event.currentTarget.selectedItems[i].type == 1){
							if (event.currentTarget.selectedItems[i].name == "Open Now"){
								homefilterarray.push(event.currentTarget.selectedItems[i].name);
							}
							else if (event.currentTarget.selectedItems[i].name == "Offering Specials"){
								homefilterarray.push(event.currentTarget.selectedItems[i].name);
							}
							else if (event.currentTarget.selectedItems[i].name == "I Have Eaten"){
								if (eatinval == 0){
									eatinval = 1;
								}
								else {
									eatinval = 3;
								}
								//homefilterarray.push(event.currentTarget.selectedItems[i].name);
							}
							else if (event.currentTarget.selectedItems[i].name == "I Haven't Eaten"){
								if (eatinval == 0){
									eatinval = 2;
								}
								else {
									eatinval = 3;
								}
								//homefilterarray.push(event.currentTarget.selectedItems[i].name);
							}
						}
					}	
				}
				catch(e:Error){
					
				}
				
				if (eatinval == 1){
					homefilterarray.push("I Have Eaten");
				}
				else if (eatinval == 2){
					homefilterarray.push("I Haven't Eaten");
				}
				else {
					if (event.newIndex == 3){
						homefilterarray.push("I Have Eaten");
						//event.currentTarget.selectedItems.
					}
					else if (event.newIndex == 4){
						homefilterarray.push("I Haven't Eaten");
					}
				}
				xFadeTrans.duration = 400;
				if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('menuall') != -1){
					mainNavigator.navigator.pushView(MenuAll,{homefilterarray:homefilterarray},null,xFadeTrans);
				}
				else {
					mainNavigator.navigator.pushView(Home,{homefilterarray:homefilterarray},null,xFadeTrans);
				}
				
				var ev:MouseEvent;
				closeFilters();
				
			}
			public function viewadd(event:ElementExistenceEvent):void
			{
				
				if (menuopen){
					closeMenu();
				}
				
				if ((mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('home') == -1)&&
					(mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('menuall') == -1)){
					listfilters.selectedItems = null;
					for (var i:uint = 0; i < filteritems.length; i++){
						filteritems[i].chosen = 'n'
					}
				}
				
				if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('profile') != -1){
					listmenu.selectedIndex = 0;
					filterfeaturebutton.visible = false;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('home') != -1){
					listmenu.selectedIndex = 1;
					filterfeaturebutton.visible = true;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('restrictions') != -1){
					listmenu.selectedIndex = 2;
					filterfeaturebutton.visible = false;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('menuall') != -1){
					listmenu.selectedIndex = 3;
					filterfeaturebutton.visible = true;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('specials') != -1){
					listmenu.selectedIndex = 4;
					filterfeaturebutton.visible = false;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('settings') != -1){
					listmenu.selectedIndex = 5;
					filterfeaturebutton.visible = false;
				}
				else if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('map') != -1){
					mapmade = true;
					//showMap();
				}
				else {
					listmenu.selectedIndex = -1;
				}
				
				if (mainNavigator.navigator.activeView.name.toLocaleLowerCase().indexOf('map') == -1){
					if (mapmade){
						//	removeallpoints();
						//	hideMap();
					}
				}
			}
			public var mapmade:Boolean = false;
			public function clearallclick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				listfilters.selectedIndex = -1;
			}	
			
			public function navigatorClick(event:MouseEvent):void
			{	
				if ((menuopen)&&(menumoving == false)){
					menumoving = true;
					closeMenu();
				}
				else if ((filtersopen)&&(filtersmoving == false)){
					filtersmoving = true;
					closeFilters();
				}
			}
			public function verifyDataTablesViaVersion():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS versionhistory (version varchar(255))";
				stmt.execute();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT version from versionhistory";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				if (resData.length != 0){
					var versiontocheck:String = resData[0].version;
					if (versiontocheck != VERSIONID.toString()){
						dropalldatatables();
					}
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update versionhistory set version = ('"+VERSIONID.toString()+"')";
					stmt.execute();
				}
				else {
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "insert into versionhistory values ('"+VERSIONID.toString()+"')";
					stmt.execute();
					dropalldatatables();
				}
			}
			public function dropalldatatables():void {
				var stmt:SQLStatement = new SQLStatement();
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE merchusers";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
				
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE specials";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
				
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE localuser";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
				
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "DROP TABLE dishes";
				try{
					stmt.execute();	
				}
				catch(e:Error){}
			}
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}
			
			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
			{
				trace("Handling application activate event");
				stage.frameRate=60; 
			}
			
			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				stage.frameRate=2;
			}
			
			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}
			
			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}
			
			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}
			
			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
				//
			}
			
			
			
			
			public function initz(event:FlexEvent):void
			{
				GoViral.create();
				GoViral.goViral.initFacebook(FACEBOOK_APP_ID, "");
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_IN,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGGED_OUT,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_CANCELED,onFacebookEvent);
				GoViral.goViral.addEventListener(GVFacebookEvent.FB_LOGIN_FAILED,onFacebookEvent);
				try{
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.autoExit = false;
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				NativeApplication.nativeApplication.executeInBackground = true;
				}
				catch(e:Error){	
				}	
			}
			private function onFacebookEvent(e:GVFacebookEvent):void
			{
			var s:String = "";
			switch(e.type)
			{
			case GVFacebookEvent.FB_LOGGED_IN:
			s = "Logged in to facebook:"+GoViral.VERSION+
			",denied: ["+GoViral.goViral.getDeclinedFacebookPermissions()+
			"], profile permission?"+GoViral.goViral.isFacebookPermissionGranted("public_profile");
			break;
			case GVFacebookEvent.FB_LOGGED_OUT:
			s = "Logged out of facebook.";
			break;
			case GVFacebookEvent.FB_LOGIN_CANCELED:
			s = "Canceled facebook login.";
			break;
			case GVFacebookEvent.FB_LOGIN_FAILED:
			s = "Login failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId;
			break;
			case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_FAILED:
			case GVFacebookEvent.FB_READ_PERMISSIONS_FAILED:
			s =  "perms failed:"+e.errorMessage+",sn?"+e.shouldNotifyFacebookUser+",cat?"+e.facebookErrorCategoryId+","+e.permissions;
			break;
			case GVFacebookEvent.FB_READ_PERMISSIONS_UPDATED:
			case GVFacebookEvent.FB_PUBLISH_PERMISSIONS_UPDATED:
			s = "Perms updated:"+e.permissions;
			}
			}
			

			
			
			public function facebookloging():void {
			if(!GoViral.goViral.isFacebookAuthenticated())
			{
			GoViral.goViral.authenticateWithFacebook("email,public_profile,user_birthday,user_location");
			}
			else {
			GoViral.goViral.requestMyFacebookProfile().addRequestListener(function(e:GVFacebookEvent):void {
			if (e.type==GVFacebookEvent.FB_REQUEST_RESPONSE)
			{
			var myProfile:GVFacebookFriend=e.friends[0];
			
			fsid = myProfile.id.toString();
			
			try{
			fsemail = myProfile.email();
			}
			catch(e:Error){}
			
			try{
			fsname = myProfile.name.toString();
			}
			catch(e:Error){}
			
			try{
			fscity = myProfile.locationName.toString().substr(
			0,
			myProfile.locationName.toString().indexOf(","));
			}
			catch(e:Error){
			try{
			fscity = myProfile.properties.user_location.toString().substr(
			0,
			myProfile.properties.user_location.toString().indexOf(","));
			}
			catch(e:Error){
			
			fscity = "";
			}
			
			}
			
			try{
			fslocality = myProfile.locationName.toString().substr(
			myProfile.locationName.toString().indexOf(",")+2, 
			myProfile.locationName.toString().length);
			}
			catch(e:Error){
			try{
			fslocality = myProfile.properties.user_location.toString().substr( 
			myProfile.properties.user_location.toString().indexOf(",")+2,
			myProfile.properties.user_location.toString().length);
			}
			catch(e:Error){
			
			fslocality = "";
			}
			
			}
			
			
			
			try{
			fsgender = myProfile.gender.toString().substr(0,1);
			}
			catch(e:Error){
			fsgender = "";
			}
			
			
			var tempBirthString:String = "";
			try{
			tempBirthString = myProfile.properties["birthday"].toString();
			}
			catch(e:Error){}
			
			
			
			try{
			fsbirthmonth = tempBirthString.substr(0,tempBirthString.indexOf("/"));
			tempBirthString = tempBirthString.substring(tempBirthString.indexOf("/")+1,tempBirthString.length);
			}
			catch(e:Error){
			fsbirthmonth = "0";
			}
			
			
			try{
			fsbirthday = tempBirthString.substr(0,tempBirthString.indexOf("/"));
			tempBirthString = tempBirthString.substring(tempBirthString.indexOf("/")+1,tempBirthString.length);
			}
			catch(e:Error){
			fsbirthday = "0";
			}
			
			
			try{
			fsbirthyear = tempBirthString;
			}
			catch(e:Error){
			fsbirthyear = "0";
			}
			
			
			syncfacebook.send();			
			}
			
			});
			
			
			
			}
			}
			public function aftersyncfacebook(ev:ResultEvent):void {
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "delete FROM localuser;";
				stmt.execute();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "INSERT into localuser values(:email,:name,:country,:active)";
				stmt.parameters[":email"] = fsemail;
				stmt.parameters[":name"] = fsname;
				stmt.parameters[":country"] = "canada";
				stmt.parameters[":active"] = "yes";
				stmt.execute();
				mainNavigator.navigator.pushView(Home,{homefilterarray:[]});
			}
			
			
		]]>
	</fx:Script>
	<fx:Script source="func/slidemenufunctions.as"/>
	<fx:Declarations>	
		<fx:String id="fsid"/>
		<fx:String id="fsemail"/>
		<fx:String id="fsname"/>
		<fx:String id="fscity"/>
		<fx:String id="fslocality"/>
		<fx:String id="fsgender"/>
		<fx:String id="fsbirthday"/>
		<fx:String id="fsbirthmonth"/>
		<fx:String id="fsbirthyear"/>
		<s:HTTPService id="syncfacebook" method="GET" 
					   resultFormat="array" 
					   url="http://www.scoutcard.ca/php/mobile_v2/syncfacebook.php"
					   result="aftersyncfacebook(event)" >
			<s:request xmlns="">
				<id>{fsid}</id>	
				<email>{fsemail}</email>
				<nameo>{fsname}</nameo>		
				<city>{fscity}</city>		
				<locality>{fslocality}</locality>		
				<gender>{fsgender}</gender>		
				<birthday>{fsbirthday}</birthday>		
				<birthmonth>{fsbirthmonth}</birthmonth>		
				<birthyear>{fsbirthyear}</birthyear>	
				<versionnumber>2</versionnumber>	
			</s:request>
		</s:HTTPService>
		<s:MultiDPIBitmapSource id="menu_account"
								source160dpi="@Embed('assets/160/menu-account.png')"
								source240dpi="@Embed('assets/320/menu-account.png')"
								source320dpi="@Embed('assets/320/menu-account.png')"
								source480dpi="@Embed('assets/320/menu-account.png')"
								source640dpi="@Embed('assets/320/menu-account.png')"/>
		<s:MultiDPIBitmapSource id="menu_home"
								source160dpi="@Embed('assets/160/menu-home.png')"
								source240dpi="@Embed('assets/320/menu-home.png')"
								source320dpi="@Embed('assets/320/menu-home.png')"
								source480dpi="@Embed('assets/320/menu-home.png')"
								source640dpi="@Embed('assets/320/menu-home.png')"/>
		<s:MultiDPIBitmapSource id="menu_restrictions"
								source160dpi="@Embed('assets/160/menu-restrictions.png')"
								source240dpi="@Embed('assets/320/menu-restrictions.png')"
								source320dpi="@Embed('assets/320/menu-restrictions.png')"
								source480dpi="@Embed('assets/320/menu-restrictions.png')"
								source640dpi="@Embed('assets/320/menu-restrictions.png')"/>
		<s:MultiDPIBitmapSource id="menu_ratings"
								source160dpi="@Embed('assets/160/menu-ratings.png')"
								source240dpi="@Embed('assets/320/menu-ratings.png')"
								source320dpi="@Embed('assets/320/menu-ratings.png')"
								source480dpi="@Embed('assets/320/menu-ratings.png')"
								source640dpi="@Embed('assets/320/menu-ratings.png')"/>
		<s:MultiDPIBitmapSource id="menu_dish"
								source160dpi="@Embed('assets/160/menu-dish.png')"
								source240dpi="@Embed('assets/320/menu-dish.png')"
								source320dpi="@Embed('assets/320/menu-dish.png')"
								source480dpi="@Embed('assets/320/menu-dish.png')"
								source640dpi="@Embed('assets/320/menu-dish.png')"/>
		<s:MultiDPIBitmapSource id="menu_review"
								source160dpi="@Embed('assets/160/menu-review.png')"
								source240dpi="@Embed('assets/320/menu-review.png')"
								source320dpi="@Embed('assets/320/menu-review.png')"
								source480dpi="@Embed('assets/320/menu-review.png')"
								source640dpi="@Embed('assets/320/menu-review.png')"/>
		<s:MultiDPIBitmapSource id="menu_settings"
								source160dpi="@Embed('assets/160/menu-settings.png')"
								source240dpi="@Embed('assets/320/menu-settings.png')"
								source320dpi="@Embed('assets/320/menu-settings.png')"
								source480dpi="@Embed('assets/320/menu-settings.png')"
								source640dpi="@Embed('assets/320/menu-settings.png')"/>
	</fx:Declarations>
	
</s:Application>