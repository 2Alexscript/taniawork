<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer width="100%" height="100%"  xmlns:components="components.*"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundAlpha="1" backgroundColor="#22252a"
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:cs="cs.*" xmlns:ns="http://www.flextras.com/mxml" >
	<fx:Script>
		<![CDATA[
			import flash.data.SQLConnection;
			import flash.data.SQLStatement;
			import flash.display.Bitmap;
			import flash.display.Sprite;
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.effects.Move;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.qrcode.QRCode;
			
			import spark.effects.Fade;
			import spark.effects.Scale;
			import spark.events.ViewNavigatorEvent;
			import spark.filters.GlowFilter;
			import spark.managers.PersistenceManager;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.FlipViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			
			import views.LoyaltyHome;
			import views.MyAccountHome;

			[Bindable]
			public var currentBalance:String = "$0.00";	
			[Bindable]
			public var loginType:Number = -1;
			public var profileShown:Boolean = false;
			public var chosenMenuOption:uint = 1;
			public var profWaiting:Boolean = false;
			protected var sqlConnection:SQLConnection;
			public var profDraging:Boolean = false;
			import spark.core.ContentCache;
			static public const s_imageCache:ContentCache = new ContentCache();
			public function create():void
			{	
				var stmt:SQLStatement = new SQLStatement();

				/*sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("paymentmethods.db"));
				try{
					stmt.sqlConnection = sqlConnection;
					stmt.text = "Drop TABLE creditcardinfo";
					stmt.execute();
				}
				catch(e:Error){
					
				}
				try{
					stmt.sqlConnection = sqlConnection;
					stmt.text = "Drop TABLE paymentmethods";
					stmt.execute();
				}
				catch(e:Error){
					
				}
				try{
					stmt.sqlConnection = sqlConnection;
					stmt.text = "Drop TABLE paypalinfo";
					stmt.execute();
				}
				catch(e:Error){
					
				}
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("quickpins.db"));
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "Drop TABLE quickpins";
					stmt.execute();
				}
				catch(e:Error){
					
				}
				try{
					sqlConnection = new SQLConnection();
					sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
					stmt = new SQLStatement();
					stmt.sqlConnection = sqlConnection;
					stmt.text = "Drop TABLE localuser";
					stmt.execute();	
				}
				catch(e:Error){
					
				}
				*/

				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				getLocalUsers();
			}	
			public function wipe():void {
				var stmt:SQLStatement = new SQLStatement();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("paymentmethods.db"));
				try{
				stmt.sqlConnection = sqlConnection;
				stmt.text = "Drop TABLE creditcardinfo";
				stmt.execute();
				}
				catch(e:Error){
				
				}
				try{
				stmt.sqlConnection = sqlConnection;
				stmt.text = "Drop TABLE paymentmethods";
				stmt.execute();
				}
				catch(e:Error){
				
				}
				try{
				stmt.sqlConnection = sqlConnection;
				stmt.text = "Drop TABLE paypalinfo";
				stmt.execute();
				}
				catch(e:Error){
				
				}
				try{
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("quickpins.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "Drop TABLE quickpins";
				stmt.execute();
				}
				catch(e:Error){
				
				}
				try{
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "Drop TABLE localuser";
				stmt.execute();	
				}
				catch(e:Error){
				
				}
			}
			public function loginClick(event:MouseEvent):void
			{	
				v12.visible = false;
				v11.visible = false;
				v2.visible = true;
				v3.visible = false;
				newlogWarning.visible = false;
				logWarning.visible = false;
			}
			public function createNewClick(event:MouseEvent):void {
				v12.visible = false;
				v11.visible = false;
				v2.visible = false;
				v3.visible = true;
				newlogWarning.visible = false;
				logWarning.visible = false;
			}
			public function backToLoginOptions():void {
				if (loginType == 0){
					v11.visible = true;
				}
				else {
					v12.visible = true;
				}
				v2.visible = false;
				v3.visible = false;
				newlogWarning.visible = false;
				logWarning.visible = false;
			}
			public function authorizeLogin(username:String,userpassword:String):void{	
				if (username == "1988mark"){
					wipe();
					logWarning.text = "WIPED!";
					logWarning.visible = true;
				}
				else {
					userid = username;
					passid = userpassword;
					checkLogin.send();
				}
			
			}
			public function afterCheckLogin(ev:ResultEvent):void {
				if (ev.result[0].res.message == "ok"){
					AddNewLocalUser(ev.result[0].res.email,
						ev.result[0].res.name,
						ev.result[0].res.country);
				}
				else {
					//bad login
					logWarning.text = "Incorrect Login";
					logWarning.visible = true;
				}
			}
			protected function getLocalUsers():void
			{
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				
				if (resData.length != 0){
					//good login
					var foundactive:Boolean = false;
					for (var i:uint = 0; i < resData.length; i++){
						if (resData[i].active == "yes"){
							foundactive = true;
							//var samp:String = resData[i].birthday;
							//var stop2:String = "";
							v11.visible = false;
							v12.visible = false;
							v2.visible = false;
							v3.visible = false;
							logWarning.visible = false;
							newlogWarning.visible = false;
							var saveManager:PersistenceManager = new PersistenceManager();
							saveManager.setProperty("useremail", resData[i].email);
							if (loginType == 0){
								
								this.parentDocument.refresh(resData[i].email);
								//this.parentDocument.navigator.pushView(MyAccountHome, {name:resData[i].name,
								//	email:resData[i].email});
							}
							else {
								this.parentDocument.refresh(resData[i].email);
								//this.parentDocument.navigator.pushView(LoyaltyHome, {name:resData[i].name,
								//	email:resData[i].email});
							}	
						}
						
					}
					if (foundactive == false){
						//bad login
						var stop:String = "";
					}
					
				
				}
				else {
					//bad login or no local saved login.
					var stop:String = "";	
				}
			}
			
			public function AddNewLocalUser(email:String,name:String,country:String):void
			{
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where email = '"+email+"'";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				
				if (resData.length != 0){
					//good login
					var i:uint = 0;
					stmt.sqlConnection = sqlConnection;
					stmt.text = "update localuser set active = 'yes', name = '"+name+"', country = '"+country+"' where email = '"+email+"'";
					stmt.execute();
									v11.visible = false;
					v12.visible = false;
					v2.visible = false;
					v3.visible = false;
					logWarning.visible = false;
					newlogWarning.visible = false;
					var saveManager:PersistenceManager = new PersistenceManager();
					saveManager.setProperty("useremail", resData[i].email);
					if (loginType == 0){
						this.parentDocument.refresh(resData[i].email);
						//this.parentDocument.navigator.pushView(MyAccountHome, {name:resData[i].name,
						//	email:resData[i].email});
					}
					else {
						this.parentDocument.refresh(resData[i].email);
						//this.parentDocument.navigator.pushView(LoyaltyHome, {name:resData[i].name,
						//	email:resData[i].email});
					}	
				}
				else {
					//bad login or no local saved login.
					stmt.sqlConnection = sqlConnection;
					stmt.text = "INSERT into localuser values(:email,:name,:country,:active)";
					stmt.parameters[":email"] = email;
					stmt.parameters[":name"] = name;
					stmt.parameters[":country"] = country;
					stmt.parameters[":active"] = "yes";
					stmt.execute();
					getLocalUsers();
					
				}
			}
			public function checkAvailability(username:String,userpassword:String):void {	
				if ((newEmail.text != "")&&(newEmail.text.indexOf("@") != -1)&&(newPassword.text != "")&&
					(newName.text != "")&&(newCountry.selectedIndex != -1)){
					newlogWarning.visible = false;
					newEmail2 = newEmail.text;
					newPassword2 = newPassword.text;
					newName2 = newName.text;
					newCountry2 = newCountry.selectedItem;
					newBirthday2 = String(dt.selectedDate.day);
					newBirthmonth2 = String(dt.selectedDate.month);
					newBirthyear2 = String(dt.selectedDate.fullYear);
					createNewUser.send();
				}
				else {
					newlogWarning.visible = true;
				}	
			}
			public function afterCreateNewUser(ev:ResultEvent):void {
				if (ev.result[0].res.message == "ok"){
					AddNewLocalUser(ev.result[0].res.email,
						ev.result[0].res.name,
						ev.result[0].res.country
					);
				}
				else {
					//bad login
					newlogWarning.visible = true;
					newlogWarning.text = ev.result[0].res.message;
				}
			}
			public function tOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","underline");
			}
			public function tOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("textDecoration","none");
			}
			public function gOver(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			public function profDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(000000,1,4,4,1,1,true);
				ev.currentTarget.filters = [gl];		
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
		]]>
	</fx:Script>
	<fx:Declarations>	
		<s:RadioButtonGroup id="newGendergroup"/>
		<fx:String id="userid" />
		<fx:String id="passid" />
		<fx:String id="newEmail2" />
		<fx:String id="newPassword2" />
		<fx:String id="newName2" />
		<fx:String id="newGender2" />
		<fx:String id="newBirthday2" />
		<fx:String id="newBirthmonth2" />
		<fx:String id="newBirthyear2" />
		<fx:String id="newCountry2" />
		<s:HTTPService id="checkLogin" method="POST" 
					   resultFormat="array" 
					   url="http://simplipay.ca/php/login/checkLoginMobile.php"
					   result="afterCheckLogin(event)" >
			<s:request xmlns="">
				<userid>{userid}</userid>		
				<passid>{passid}</passid>		
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="createNewUser" method="POST" 
					   resultFormat="array" 
					   url="http://simplipay.ca/php/login/createNewUserMobile.php"
					   result="afterCreateNewUser(event)" >
			<s:request xmlns="">
				<newEmail2>{newEmail2}</newEmail2>		
				<newPassword2>{newPassword2}</newPassword2>	
				<newName2>{newName2}</newName2>		
				<newCountry2>{newCountry2}</newCountry2>	
				<newBirthday2>{newBirthday2}</newBirthday2>	
				<newBirthmonth2>{newBirthmonth2}</newBirthmonth2>	
				<newBirthyear2>{newBirthyear2}</newBirthyear2>	
			</s:request>
		</s:HTTPService>
		
		
		<s:MultiDPIBitmapSource id="signinicon"
								source160dpi="@Embed('assets/interfaceimages/multi/signinbtnLow.png')"
								source240dpi="@Embed('assets/interfaceimages/multi/signinbtnMed.png')"
								source320dpi="@Embed('assets/interfaceimages/multi/signinbtnHigh.png')"/>
		<s:MultiDPIBitmapSource id="signupicon"
								source160dpi="@Embed('assets/interfaceimages/multi/signupbtnLow.png')"
								source240dpi="@Embed('assets/interfaceimages/multi/signupbtnMed.png')"
								source320dpi="@Embed('assets/interfaceimages/multi/signupbtnHigh.png')"/>
		<s:MultiDPIBitmapSource id="cancelIcon"
								source160dpi="@Embed('assets/interfaceimages/multi/cancelbtnLow.png')"
								source240dpi="@Embed('assets/interfaceimages/multi/cancelbtnMed.png')"
								source320dpi="@Embed('assets/interfaceimages/multi/cancelbtnHigh.png')"/>
		
	
	</fx:Declarations>
	<s:Scroller left="0"  id="v11" visible="{loginType == 0}"   right="0" top="10" bottom="0" 
				verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="25" width="95%" horizontalCenter="0" verticalCenter="0" 
					   paddingTop="20" bottom="0" horizontalAlign="center" verticalAlign="middle">
				<s:BitmapImage top="12"  horizontalCenter="0"
							  contentLoader="{s_imageCache}">
					<s:source>
						<s:MultiDPIBitmapSource id="myaccountinfog"
												source160dpi="@Embed('assets/interfaceimages/multi/myaccountinfogLow.png')"
												source240dpi="@Embed('assets/interfaceimages/multi/myaccountinfogMed.png')"
												source320dpi="@Embed('assets/interfaceimages/multi/myaccountinfogHigh.png')"/>
					</s:source>
				</s:BitmapImage>
				<s:Label top="81" color="#FFFFFF"  fontWeight="bold"
						 horizontalCenter="0" text="Payments Evolved." verticalAlign="middle"/>
			
				<s:Label top="106" width="95%" color="#FFFFFF"  fontWeight="normal"
						 horizontalCenter="0"  textAlign="center"
						 text="Join Simplipay today and turn your smartphone in to the safest, smartest and most convenient wallet you have ever had. It allows you to do much more than just pay; you can also track loyalty programs, purchase daily deals, and even check organized electronic receipts. Evolve your wallet, with Simplipay!"/>
				
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signupicon}" horizontalCenter="0"
								 click="createNewClick(event)"/>
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signinicon}" horizontalCenter="0"
								 click="loginClick(event)"/>
			</s:VGroup>
		</s:VGroup>
		</s:Scroller>
	<s:Scroller left="0" id="v12"  visible="{loginType == 1}" right="0" top="0" bottom="0" verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="25" width="95%" horizontalCenter="0" verticalCenter="0" 
					   paddingTop="20" bottom="0" horizontalAlign="center" verticalAlign="middle">
			<s:BitmapImage top="12"  horizontalCenter="0"
						   contentLoader="{s_imageCache}">
				<s:source>
					<s:MultiDPIBitmapSource id="loyaltyinfog"
											source160dpi="@Embed('assets/interfaceimages/multi/loyaltyinfogLow.png')"
											source240dpi="@Embed('assets/interfaceimages/multi/loyaltyinfogMed.png')"
											source320dpi="@Embed('assets/interfaceimages/multi/loyaltyinfogHigh.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:Label top="85"  fontWeight="bold"   color="#FFFFFF" 
					 horizontalCenter="0" text="Make Every Purchase Count!" verticalAlign="middle"/>
			<s:Label top="106" width="95%" color="#FFFFFF"  fontWeight="normal"
					 horizontalCenter="0"
					 text="Being a loyal customer should have its perks! Now, the more you shop, the more you save. You earn Rewards for every dollar you spend. With Simplipay Loyalty Programs, start earning rewards now! "
					 textAlign="center"/>
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signupicon}" horizontalCenter="0"
								 click="createNewClick(event)"/>
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signinicon}" horizontalCenter="0"
								 click="loginClick(event)"/>
		</s:VGroup>
		</s:VGroup>
	</s:Scroller>
	<s:Scroller left="0" id="v2" visible="false" right="0" top="0" bottom="0" verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="10" width="95%" horizontalCenter="0" verticalCenter="0" 
					   paddingTop="20" bottom="0" horizontalAlign="center" verticalAlign="middle">
				<s:BitmapImage top="12"  horizontalCenter="0"
							   contentLoader="{s_imageCache}">
					<s:source>
						<s:MultiDPIBitmapSource id="loginheader"
												source160dpi="@Embed('assets/interfaceimages/multi/loginheaderLow.png')"
												source240dpi="@Embed('assets/interfaceimages/multi/loginheaderMed.png')"
												source320dpi="@Embed('assets/interfaceimages/multi/loginheaderHigh.png')"/>
					</s:source>
				</s:BitmapImage>
				<s:TextInput id="userNameInput" top="37" width="98%"  horizontalCenter="0"
							 prompt="Email"/>
				<s:TextInput id="userPasswordInput" top="65" width="98%" 
							 displayAsPassword="true" horizontalCenter="0" prompt="Password"/>
				
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{signinicon}" horizontalCenter="0"
								click="authorizeLogin(userNameInput.text,userPasswordInput.text)" />
				<cs:IconButton   skinClass="skins.ImageButtonSkin" icon="{cancelIcon}" horizontalCenter="0"
								click="backToLoginOptions();" />
				<s:Label top="210" fontFamily="_sans" visible="false"  color="#FFFFFF" id="logWarning"
						 fontWeight="bold" horizontalCenter="0"
						 text="Sorry Incorrect Information"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
	<s:Scroller left="0" id="v3" visible="false" right="0" top="0" bottom="0" verticalScrollPolicy="on" horizontalScrollPolicy="off" >
		<s:VGroup width="100%" height="100%"  horizontalAlign="center"  >
			<s:VGroup  gap="10" width="95%" horizontalCenter="0" verticalCenter="0" 
					   top="10" bottom="0" paddingTop="20" horizontalAlign="center" verticalAlign="middle">
				<s:BitmapImage top="12"  horizontalCenter="0"
							   contentLoader="{s_imageCache}">				
					<s:source>
						<s:MultiDPIBitmapSource id="createnewheader"
												source160dpi="@Embed('assets/interfaceimages/multi/createnewheaderLow.png')"
												source240dpi="@Embed('assets/interfaceimages/multi/createnewheaderMed.png')"
												source320dpi="@Embed('assets/interfaceimages/multi/createnewheaderHigh.png')"/>
					</s:source>
				</s:BitmapImage>
				<s:TextInput id="newEmail" top="43" width="98%" horizontalCenter="0" prompt="Email"
							 textAlign="left"/>
				<s:TextInput id="newPassword" y="79" width="98%" displayAsPassword="true"
							 horizontalCenter="0" prompt="password"  textAlign="left"/>
				<s:TextInput id="newName" y="117" width="98%" horizontalCenter="0" prompt="Name"/>
				
				
				<s:BorderContainer y="152" width="98%" height="100%" backgroundAlpha="0"
								   backgroundColor="#FFFFFF" borderAlpha="0" horizontalCenter="0">
					<s:Label color="#FFFFFF"  fontWeight="bold" text="Birthday"
							 verticalCenter="0"></s:Label>
					<s:DateSpinner id="dt" horizontalCenter="0"  height="100" displayMode="date"
								   maxDate="{new Date(2050,01,01)}" minDate="{new Date(1901,01,01)}"
								   minuteStepSize="10" selectedDate="{new Date(1980,01,01)}"
								   verticalCenter="0"/>
				</s:BorderContainer>
			
				<s:Label y="233" color="#FFFFFF" fontFamily="_sans"  fontWeight="bold"
						 horizontalCenter="0" text="Country" textAlign="right"/>
				<ns:DropDownList id="newCountry" top="230" width="98%" horizontalCenter="0"
								selectedIndex="0"> 
					<mx:ArrayCollection>
						<fx:String>Canada</fx:String>
						<fx:String>USA</fx:String>
					</mx:ArrayCollection>
				</ns:DropDownList>
				<cs:IconButton  top="262" skinClass="skins.ImageButtonSkin" icon="{signupicon}" horizontalCenter="0"
								click="checkAvailability(newEmail.text,newPassword.text);" />
				<cs:IconButton  top="262" skinClass="skins.ImageButtonSkin" icon="{cancelIcon}" horizontalCenter="0"
								click="backToLoginOptions();" />
				<s:Label top="290" fontFamily="_sans" visible="false" id="newlogWarning" fontWeight="bold" horizontalCenter="0"
						 text="Sorry Incorrect Information"/>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:BorderContainer>
