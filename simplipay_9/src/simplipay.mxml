<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark"
	splashScreenImage="@Embed('assets/logo.png')" splashScreenScaleMode="letterbox"
	persistNavigatorState="true" navigatorStateSaving="onPersisting(event)" 
	navigatorStateLoading="onRestoring(event)"
	applicationDPI="160"	applicationComplete="onApplicationComplete()">

	<fx:Style >
		/* CSS file */
		@namespace s "library://ns.adobe.com/flex/spark";
		s|ActionBar
		{
			
			defaultButtonAppearance: normal;
			skinClass: ClassReference("spark.skins.mobile.ActionBarSkin");
			textShadowAlpha: .65;
			textShadowColor: #000000;
						paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 2;
			chromeColor: #0977b6;
			titleAlign: center;
			
		}
		
		s|ActionBar #titleDisplay
		{
			color: #FFFFFF; /* default color is white */
			fontSize: 20;
			fontFamily: "_sans";
		}
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #0977b6;
			color: #FFFFFF;
			fontSize: 12;
			fontWeight: normal;
			iconPlacement: top;
			interactionMode: mouse;
			textShadowAlpha: .65;
			textShadowColor: #000000;
			fontFamily: "_sans";
		}
		
		
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.mobile.TextUtil;
			import com.mapquest.services.traffic.Traffic;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.controls.shadymeadow.SMZoomControl;
			import com.mapquest.tilemap.pois.*;
			
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.sensors.Geolocation;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.BusyIndicator;
			import spark.components.View;
			import spark.effects.Resize;
			
			import views.Stores;
			import views.itemDescription;		
			include "includes/BusyIndicatorUtil.as";
			include "includes/TrafficUtil.as";
			include "includes/AppConfig.as";
			include "includes/ZoomControlUtil.as";
			include "includes/InfoWindowUtil.as";
			include "includes/GpsUtil.as";
			
			[Bindable]
			public var map:TileMap;
			public var gps:Geolocation;
			public var gpsLatLng:LatLng;
			private var zoomControl:SMZoomControl;
			private var traffic:Traffic;
			public var gpsPoi:Poi;
			public var gpsIsSupported:Boolean = false;
			public var trafficEnabled:Boolean = false;
			public var gpsTried:Boolean = false;
			public var imgSize:int;
			[Bindable]
			public var assetPath:String;
			public var biBusyIndicator:BusyIndicator;	
			public var searchLocation:String;
			public var searchTerm:String;
			public var directionsLocations:Array;
			[Bindable]
			public var s:Class = views.Stores;
			protected function onApplicationComplete():void
			{
				// Handle orientation change events if auto-orient is true
				
				if (stage.autoOrients)
				{
					this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
				}
				tabbedNavigator.tabBar.height = 50;
				
				
				// Request to be notified when the display state changes (minimized, maximized)
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);

				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);

				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);

				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);

				// Capture exiting event
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);

				// Set the idle mode to KEEP AWAKE
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				this.addEventListener(ResizeEvent.RESIZE,this.onResize,false,0,true);
				
				//select the icon set we're going to use based on the application dpi
				switch(this.applicationDPI) {
					case 160:
						this.imgSize = 45;
						break;
					case 240:
						this.imgSize = 60;
						break;
					case 320:
						this.imgSize = 90;
						break;
				}
				this.assetPath = "assets/" + this.imgSize + "/";
				this.splashScreenImage = null;
			}
			public function makeMap():void {
				this.map = new TileMap(this.key,this.mapStartZoomLevel,new LatLng(38.134557, -98.4375),this.mapStartType);
				this.map.size = new Size(this.width,this.height);
				this.map.mapFriction = this.mapFriction;
				this.map.name = "myMap";
				this.addMapListeners();
				
				if (this.mapUseZoomControl) this.addZoomControl();
				
				//move the logo to the upper righthand corner
				this.map.setLogoPlacement(LogoType.LOGO_MQ_LOGO,new MapCornerPlacement(MapCorner.TOP_RIGHT, new Size(-5,5)));
			}
			
			
			
			/*
			function to add an event listener to the map for when an infowindow opens
			*/
			private function addMapListeners():void {
				this.map.addEventListener(TileMapEvent.INFOWINDOW_OPEN,onIWOpen,false,0,true);
				
				//if we're using the zoom control, let's add a listener to hide it when an infowindow opens so we have more screen real estate
				if (this.mapUseZoomControl) this.map.addEventListener(TileMapEvent.INFOWINDOW_CLOSE,onIWClose,false,0,true);
			}	
			
			
			
			/*
			function to resize the map when the app resizes
			*/
			private function onResize(e:ResizeEvent):void {
				//resize the map when the app does
				if (this.map) this.map.size = new Size(this.width,this.height);
			}
			
			
			
			/*
			function to remove all shapes (pois,routes,traffic,overlays) from the map
			*/
			public function removeShapesFromMap():void {
				//trace("Removing shapes from map");
				
				if (this.map.getShapeCollection("routeRibbon")) {
					this.removeShapesAndColls(this.map.getShapeCollection("routeRibbon"));
					this.map.removeShapeCollection(this.map.getShapeCollection("routeRibbon"));
				}
				if (this.map.getShapeCollection("searchShapeCollection")) {
					this.removeShapesAndColls(this.map.getShapeCollection("searchShapeCollection"));
					this.map.removeShapeCollection(this.map.getShapeCollection("searchShapeCollection"));
				}
				if (this.traffic) {
					this.disableTraffic();
				}
				
				this.removeShapesAndColls(this.map.getShapeCollection());
			}
			
			
			
			/*
			since we're mobile, do this to free up memory faster instead of waiting for gc
			*/
			private function removeShapesAndColls(coll:ShapeCollection):void {
				var s:IShape;
				
				for (var i:int = 0; i < coll.length; i++) {
					s = coll.getShapeAtIndex(i);
					coll.remove(s);
					s = null;
				}
				
				coll = null;
			}
			// Handle device orientation changes
			protected function onOrientationChange(event:StageOrientationEvent):void
			{
				trace("Orientation changed from " + event.beforeOrientation + " to " + event.afterOrientation);
				switch (event.afterOrientation)
				{
					case StageOrientation.DEFAULT:
						trace("Default orientation");
						break;
					case StageOrientation.ROTATED_RIGHT:
						trace("Rotated right");
						break;
					case StageOrientation.ROTATED_LEFT:
						trace("Rotated left");
						break;
					case StageOrientation.UPSIDE_DOWN:
						trace("Upside down");
						break;
					case StageOrientation.UNKNOWN:
						trace("Unknown");
						break;
				}
			}

			// The application display state has changed
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
 			{
				trace("Handling application activate event");
				stage.frameRate=24; 
			}

			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				System.gc();
				stage.frameRate=2;
			}

			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}

			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}

			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}

			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
			}
		]]>
	</fx:Script>

	<s:ViewNavigator id="home"  label="Home"  firstView='views.Home' icon="@Embed('assets/home(20).png')" width="100%" height="100%"/>
	<s:ViewNavigator id="card" label='Card'  firstView='views.MyAccount' icon="@Embed('assets/user(20).png')"     width="100%" height="100%"/>
	<s:ViewNavigator id="loyalty" label='Loyalty' firstView='views.Loyalty' icon="@Embed('assets/award(20).png')"    width="100%" height="100%"/>
	<s:ViewNavigator id="stores" label='Stores'  firstView='views.Stores' icon="@Embed('assets/tag(20).png')"   width="100%" height="100%"/>
</s:TabbedViewNavigatorApplication>