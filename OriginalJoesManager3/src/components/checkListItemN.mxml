<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				autoDrawBackground="false" 
				contentBackgroundAlpha="0" 
				xmlns:views="views.*"
				creationComplete="init(event)"
				stateChangeComplete="stateChangedHandler()">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import events.ScrollingEvent;
			
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.MoveEvent;
			
			import spark.components.Button;
			import spark.components.List;
			import spark.events.ListEvent;
			import spark.filters.GlowFilter;
			[Bindable]
			public var bcolor:String = "#FFFFFF";
			[Bindable]
			public var clickStatus:String = "none";
			[Bindable]
			public var listoftemps:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var niceinterval:String = "";
			private var FLAGSTATE:int = 2;

			public function profDown(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,1,5,5,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function profUp(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
				var s:String = "";
				
			}
			protected function stateChangedHandler():void
			{
				/*if(currentState == "selected")
				{
					bcolor = "#B7B7B7";
				}
				else {
					bcolor = "#FFFFFF";
				}*/
			}
			public function gOver(ev:MouseEvent):void {
				var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gDown(ev:MouseEvent):void {
				var gl:GlowFilter = new GlowFilter(0x0a4972,0.4,200,200,50,1,true);
				ev.currentTarget.filters = [gl];
			}
			public function gOut(ev:MouseEvent):void {
				ev.currentTarget.filters = [];
			}
			
			public function changeUser(event:MouseEvent):void
			{
			
			}
			
			public function deleteUser(event:MouseEvent):void
			{
				
			}
			
			public function init(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				
				
				Multitouch.inputMode = MultitouchInputMode.GESTURE;
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);
				
				this.parentApplication.dispatcher.addEventListener(ScrollingEvent.SCROLLING_STARTED, onScrollAgain);
				wipeEffect.addEventListener(EffectEvent.EFFECT_END, onEffectEnd);
				wipeEffectOut.addEventListener(EffectEvent.EFFECT_END, onEffetEndOut);
				
				
				
				var s:String = "";
				
				listoftemps = new ArrayCollection();
				for (var i:Number = -20; i < 61; i++){
					listoftemps.addItem({temp:i.toString()+"ÂºC"});
				}
				
				var s3:String = data.interval;
				var ar:Array = s3.split(",");
				
				var stop:String = "";
				niceinterval = "";
				if (ar[0] == "y"){
					niceinterval = niceinterval + "M|";
				}
				if (ar[1] == "y"){
					niceinterval = niceinterval + "Tu|";
				}
				if (ar[2] == "y"){
					niceinterval = niceinterval + "W|";
				}
				if (ar[3] == "y"){
					niceinterval = niceinterval + "Th|";
				}
				if (ar[4] == "y"){
					niceinterval = niceinterval + "F|";
				}
				if (ar[5] == "y"){
					niceinterval = niceinterval + "Sa|";
				}
				if (ar[6] == "y"){
					niceinterval = niceinterval + "Su|";
				}
				
				
				
			}
			protected function onSwipe(event:TransformGestureEvent):void
			{
				
				var myScrollEvent:ScrollingEvent = new ScrollingEvent(ScrollingEvent.SCROLLING_STARTED);
				
				if((event.offsetX == -1) && (FLAGSTATE == 2)){
					
					this.addChild(actBar);
					
					actBar.width = this.width;
					actBar.height = this.height;
					actBar.visible = true;
					actBar.theData = data;
					actBar.addEventListener(FlexEvent.CREATION_COMPLETE, onItemComplete);
					FLAGSTATE = 0;
					
					this.parentApplication.dispatcher.dispatchEvent(myScrollEvent);
				}else{
					if ((event.offsetX == -1)){
						wipeEffect.play();
						this.parentApplication.dispatcher.dispatchEvent(myScrollEvent);
					}
				}
			}
			
			protected function onItemComplete(event:FlexEvent):void
			{
				wipeEffect.play();
			}
			
			private function onScrollAgain(event:ScrollingEvent):void
			{
				
				trace("scrolling");
				if (FLAGSTATE == 1){
					wipeEffectOut.play();
				}
				
			}			
			
			protected function onEffectEnd(event:EffectEvent):void
			{
				FLAGSTATE = 1;
			}
			
			protected function onEffetEndOut(event:EffectEvent):void
			{
				FLAGSTATE = 0;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="yesnoalertgroup"/>
		<s:HGroup id="actBar2">
			<s:Button id="btn1" label="action1"/>
			<s:Button label="action2"/>
		</s:HGroup>
		<s:Parallel id="wipeEffect" target="{actBar}">
			<!--<s:Fade duration="800" alphaFrom="0.7" alphaTo="1" />-->
			<s:Move duration="300" xFrom="{this.width}" xTo="0"/>
		</s:Parallel>
		<s:Parallel id="wipeEffectOut" target="{actBar}">
			<!--<s:Fade duration="800" alphaFrom="0.7" alphaTo="1" />-->
			<s:Move duration="150" xTo="{this.width}" xFrom="0"/>
		</s:Parallel>
		<views:ActionBG id="actBar" width="{this.width}" height="{this.height}"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
		<s:State name="up"/>
	</s:states>
	<s:BorderContainer width="100%" height="65"  borderAlpha="1" 
					   backgroundColor.normal="#FFFFFF"
					   backgroundColor.hovered="#FFFFFF"
					   backgroundColor.selected="#e4e4e4"
					   backgroundColor.up="#FFFFFF"
					   color="#363636">
		<s:Group width="95%" height="100%" horizontalCenter="0">
			<s:Label left="0" color="#000000" fontSize="15" text="{data.name}" verticalCenter="-21"></s:Label>
			<s:VGroup left="0" width="35%" verticalCenter="9">
				<s:HGroup>
					<s:Label right="5" color="#0089B6" fontSize="15" text="{data.datestart}"></s:Label>
					<s:Label left="0" color="#000000" fontSize="15" text="|" verticalCenter="0"></s:Label>
					<s:Label right="5" color="#B30F0F" fontSize="15" text="{data.dateend}"></s:Label>
				</s:HGroup>
				<s:Label right="5" color="#4D4D4D" fontSize="15" text="{niceinterval}"></s:Label>
			</s:VGroup>
			<s:HGroup right="2" bottom="2" gap="0">
				<s:Label left="0" color="#1BB73F" fontSize="15" text="{data.goodcount}"
						 verticalCenter="0"></s:Label>
				<s:Label left="0" color="#000000" fontSize="15" text="|" verticalCenter="0"></s:Label>
				<s:Label left="0" color="#B30F0F" fontSize="15" text="{data.badcount}"
						 verticalCenter="0"></s:Label>
			</s:HGroup>
			
		</s:Group>
	</s:BorderContainer>
</s:ItemRenderer>