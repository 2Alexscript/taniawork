<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"  visible="false" creationComplete="init()"
		 xmlns:s="library://ns.adobe.com/flex/spark">
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.rpc.events.ResultEvent;
			
			import spark.primitives.Graphic;
			[Bindable]
			public var textl:String = "";
			[Bindable]
			public var itemimg:String = "";
			[Bindable]
			public var itemid:String = "";
			[Bindable]
			public var type:String = "";
			[Bindable]
			public var itemname:String = "";
			[Bindable]
			public var businessname:String = "";
			[Bindable]
			public var mypic:String = "";
			[Bindable]
			public var email:String = "";
			[Bindable]
			public var locationid:String = "";
			[Bindable]
			public var globalradious:uint = 150;
			[Bindable]
			public var reviewPopupStage:uint = 0;
			[Bindable]
			public var currentpercentage:Number = 100;
			public var circleToMask:Graphic = new Graphic();
			public var circleMask:Graphic = new Graphic();
			public var circleToMask2:Graphic = new Graphic();
			public var circleMask2:Graphic = new Graphic();
			[Bindable]
			public var actualRateValue:Number = 0;
			public function init():void
			{
				globalradious = 150/(320/Capabilities.screenDPI);
				// Store sprites
				var container:UIComponent = new UIComponent();
				gr.addElementAt(container, 0);
				// Draw the full circle with colors
				circleToMask.graphics.beginFill(0x36ccba,1);
				circleToMask.graphics.drawCircle(0, 0, globalradious);
				circleToMask.graphics.endFill();
				
				circleToMask2.graphics.beginFill(0x8eddce,1);
				circleToMask2.graphics.drawCircle(0, 0, globalradious);
				circleToMask2.graphics.endFill();
				
				// Add the circle
				container.addChildAt(circleToMask, 0);
				container.addChildAt(circleToMask2, 0);
				
				
				
				circleMask.width = 300/(320/Capabilities.screenDPI);
				circleMask.height = 300/(320/Capabilities.screenDPI);
				circleMask.verticalCenter = 0;
				circleMask.horizontalCenter = 0;
				
				circleMask2.width = 300/(320/Capabilities.screenDPI);
				circleMask2.height = 300/(320/Capabilities.screenDPI);
				circleMask2.verticalCenter = 0;
				circleMask2.horizontalCenter = 0;
				// Add the mask
				container.addChild(circleMask);
				container.addChild(circleMask2);
				
				
				//Set the position of the circle
				circleToMask.x = (circleMask.x = 75/(320/Capabilities.screenDPI));
				circleToMask.y = (circleMask.y = 75/(320/Capabilities.screenDPI));
				circleToMask.mask = circleMask;
				circleToMask.width = 300/(320/Capabilities.screenDPI);
				circleToMask.height = 300/(320/Capabilities.screenDPI);
				circleToMask.verticalCenter = 0;
				circleToMask.horizontalCenter = 0;
				
				circleToMask2.x = (circleMask2.x = 75/(320/Capabilities.screenDPI));
				circleToMask2.y = (circleMask2.y = 75/(320/Capabilities.screenDPI));
				circleToMask2.mask = circleMask2;
				circleToMask2.width = 300/(320/Capabilities.screenDPI);
				circleToMask2.height = 300/(320/Capabilities.screenDPI);
				circleToMask2.verticalCenter = 0;
				circleToMask2.horizontalCenter = 0;
				
				
				// Draw the circle at 100%
				renderChart(currentpercentage/100);
				//	container.setStyle("mouseEnabledWhereTransparent",true);
				gr.addEventListener(MouseEvent.MOUSE_MOVE, circleMove);
			}
			public function circleMove(ev:MouseEvent):void {
				var angleRadians:Number=Math.abs(Math.atan2(ev.localY-0,ev.localX-0)-Math.atan2(-150-0,0-0));
				if (angleRadians>0.5*Math.PI) angleRadians=Math.PI-angleRadians;
				var degreeso:Number = angleRadians* 180/Math.PI;
				
				if ((ev.localX >= 0)&&(ev.localY >= 0)) {
					degreeso = degreeso+180;
					
				}
				else if (ev.localX >= 0){
					degreeso = 270+(90-Math.abs(degreeso));
				}
				else if (ev.localY >= 0){
					degreeso = 90+(90-Math.abs(degreeso));
				}
				
				var precentageofcircle:Number = (1-(degreeso/360));
				renderChart(precentageofcircle);
			}
			public function backOver(ev:MouseEvent):void {
				ev.currentTarget.setStyle("backgroundColor",0xecf9f7);
			}
			public function backDown(ev:MouseEvent):void {
				ev.currentTarget.setStyle("backgroundColor",0xecf9f7);
			}
			public function backOut(ev:MouseEvent):void {
				ev.currentTarget.setStyle("backgroundColor",0xFFFFFF);
			}
			public function startReview():void {
				this.parentApplication.removeswipefunctions();
				check.visible = false;
				forward.visible = true;
				reviewback1.color = 0x85ded5;
				reviewback2.color = 0xe6e6e6;
				reviewPopupStage = 1;
				writeholder.visible = false;
				grholder.visible = true;
				this.visible = true;
			}
			public function backOnMenu():void {
				if (reviewPopupStage == 0){
					this.parentApplication.addswipefunctions();
					reviewseq1.visible = true;
					reviewseq2.visible = false;
					reviewback1.color = 0x85ded5;
					reviewback2.color = 0xe6e6e6;
				}
				else if (reviewPopupStage == 1){
					this.parentApplication.addswipefunctions();
					this.visible = false;
					reviewback1.color = 0x85ded5;
					reviewback2.color = 0xe6e6e6;
					reviewPopupStage = 0;
					reviewseq1.visible = true;
					reviewseq2.visible = false;
					writeholder.visible = false;
					renderChart(0.6);
				}
				else if (reviewPopupStage == 2){
					this.parentApplication.removeswipefunctions();
					check.visible = false;
					forward.visible = true;
					grholder.visible = true;
					reviewback1.color = 0x85ded5;
					reviewback2.color = 0xe6e6e6;
					reviewseq1.visible = true;
					reviewseq2.visible = false;
					writeholder.visible = false;
					reviewPopupStage = 1;
					grholder.height = savedgrheight;
					maincont.percentHeight = 95;
					renderChart(0.4);
					
				}
				
				
			}
			public var savedgrheight:Number = 0;
			public function forwardOnMenu():void {
				if (reviewPopupStage == 1){
					this.parentApplication.removeswipefunctions();
					reviewseq1.visible = false;
					reviewseq2.visible = true;
					reviewback1.color = 0xe6e6e6;
					reviewback2.color = 0x85ded5;
					check.visible = true;
					forward.visible = false;
					grholder.visible = false;
					writeholder.visible = true;
					maincont.percentHeight = 15;
					savedgrheight = grholder.height;
					grholder.height = 15;
					reviewPopupStage = 2;
					stage.focus = null;
					reviewText.setFocus();
					
				}
				else if (reviewPopupStage == 2){
					this.parentApplication.addswipefunctions();
					this.visible = false;
					reviewback1.color = 0x85ded5;
					reviewback2.color = 0xe6e6e6;
					writeholder.visible = false;
					reviewseq1.visible = true;
					reviewseq2.visible = false;
					check.visible = false;
					forward.visible = true;
					reviewPopupStage = 0;
					//Commit review
					maincont.percentHeight = 95;
					sendReview.send();
					
				}
			}
			public function renderChart(percentage:Number):void
			{	
				circleMask2.graphics.clear();
				circleMask2.graphics.beginFill(0);
				circleMask.graphics.clear();
				circleMask.graphics.beginFill(0);
				if (percentage <= 0.1){
					percentage = 0.1;
				}
				
				ratevalue.text = Math.round(percentage*10).toString();
				actualRateValue =  Math.round(percentage*10);
				
				// Draw the circle at the given percentage            /------ set the begin at the middle top
				drawPieMask(circleMask2.graphics, 1, globalradious, -1.57, 8);
				drawPieMask(circleMask.graphics, percentage, globalradious, -1.57, 8);
				circleMask2.graphics.endFill();
				circleMask.graphics.endFill();
			}
			// Function from flassari (a little simplified)
			private function drawPieMask(graphics:Graphics, percentage:Number, radius:Number = 150, rotation:Number = 0, sides:int = 6):void {
			
				radius /= Math.cos(1/sides * Math.PI);
				var lineToRadians:Function = function(rads:Number):void {
					graphics.lineTo(Math.cos(rads) * radius + x, Math.sin(rads) * radius + y);
				};
				var sidesToDraw:int = Math.floor(percentage * sides);
				for (var i:int = 0; i <= sidesToDraw; i++)
					lineToRadians((i / sides) * (Math.PI * 2) + rotation);
				if (percentage * sides != sidesToDraw)
					lineToRadians(percentage * (Math.PI * 2) + rotation);
			}
			public function afterSendReview(ev:ResultEvent):void {
				this.visible = false;
			}
		]]>
	</fx:Script>
	<fx:Script source="../func/global.as"/>
	<fx:Declarations>
		<s:HTTPService id="sendReview" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/sendRate.php"
					   result="afterSendReview(event)" >
			<s:request xmlns="">
				<id>{itemid}</id>	
				<emailGo>{email}</emailGo>	
				<type>{type}</type>		
				<locationid>{locationid}</locationid>		
				<reviewValue>{actualRateValue}</reviewValue>		
				<reviewText>{reviewText.text}</reviewText>		
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<s:Group width="100%" height="100%"  
			 horizontalCenter="0" verticalCenter="0">
		<s:Rect width="100%"  height="100%">
			<s:fill>
				<s:SolidColor alpha="0.5" color="#000000"/>
			</s:fill>
		</s:Rect>
		
		<s:VGroup gap="0" height="100%" width="90%"
				  horizontalCenter="0" top="{50/(320/Capabilities.screenDPI)}">
			<!-- TOP BAR WITH FORWARD BACK BUTTONS -->
			<s:Group width="100%" height="{reviewseq1.height}">
				<s:Rect width="100%"  height="100%"
						topLeftRadiusX="{10/(320/Capabilities.screenDPI)}"
						topLeftRadiusY="{10/(320/Capabilities.screenDPI)}" 
						topRightRadiusX="{10/(320/Capabilities.screenDPI)}"
						topRightRadiusY="{10/(320/Capabilities.screenDPI)}">
					<s:fill>
						<s:SolidColor alpha="1" color="#36ccba"/>
					</s:fill>
				</s:Rect>
				<s:Group left="0" top="{10/(320/Capabilities.screenDPI)}" 
						 mouseDown="backOnMenu();" width="{100/(320/Capabilities.screenDPI)}"
						 height="{50/(320/Capabilities.screenDPI)}">
					<s:BitmapImage width="{40/(320/Capabilities.screenDPI)}"
								   height="{40/(320/Capabilities.screenDPI)}"
								   horizontalCenter="0"
								   contentLoader="{s_imageCache}" verticalCenter="0">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/back.png')"
													source240dpi="@Embed('../assets/240/back.png')"
													source320dpi="@Embed('../assets/320/back.png')"
													source480dpi="@Embed('../assets/480/back.png')"
													source640dpi="@Embed('../assets/640/back.png')"/>
						</s:source>
					</s:BitmapImage>
				</s:Group>
				<s:Label color="#FFFFFF" fontWeight="bold" styleName="textsize5" 
						 text="Review" horizontalCenter="0" verticalCenter="2" textAlign="center"/>
				
				<s:Group   mouseDown="forwardOnMenu();" mouseEnabledWhereTransparent="true"
						   right="0" top="{10/(320/Capabilities.screenDPI)}"  width="{100/(320/Capabilities.screenDPI)}" height="{50/(320/Capabilities.screenDPI)}">
					<s:BitmapImage id="check" width="{40/(320/Capabilities.screenDPI)}" smooth="true" visible="false" height="{40/(320/Capabilities.screenDPI)}" 
								   horizontalCenter="0" contentLoader="{s_imageCache}"
								   verticalCenter="0">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/checkwhite.png')"
													source240dpi="@Embed('../assets/240/checkwhite.png')"
													source320dpi="@Embed('../assets/320/checkwhite.png')"
													source480dpi="@Embed('../assets/480/checkwhite.png')"
													source640dpi="@Embed('../assets/640/checkwhite.png')"/>
						</s:source>
					</s:BitmapImage>
					<s:BitmapImage width="{40/(320/Capabilities.screenDPI)}" id="forward"  smooth="true"
								   visible="true" height="{40/(320/Capabilities.screenDPI)}" 
								   horizontalCenter="0" contentLoader="{s_imageCache}" verticalCenter="0">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/forwardwhite.png')"
													source240dpi="@Embed('../assets/240/forwardwhite.png')"
													source320dpi="@Embed('../assets/320/forwardwhite.png')"
													source480dpi="@Embed('../assets/480/forwardwhite.png')"
													source640dpi="@Embed('../assets/640/forwardwhite.png')"/>
						</s:source>
					</s:BitmapImage>
				</s:Group>
			</s:Group>
			<!-- Rate Write labels  -->
			<s:Group width="100%" height="{reviewseq1.height}">
				<s:Group height="{reviewseq1.height}" width="100%">
					<s:Rect  width="49%" left="0"  height="100%" >
						<s:fill>
							<s:SolidColor id="reviewback1" alpha="1" color="#85ded5"/>
						</s:fill>
					</s:Rect>
					<s:Rect width="49%" right="0"  height="100%" >
						<s:fill>
							<s:SolidColor id="reviewback2" alpha="1" color="#e6e6e6"/>
						</s:fill>
					</s:Rect>
					
					<s:BitmapImage id="reviewseq1" visible="true"
								   horizontalCenter="0"
								   verticalCenter="0" 
								   contentLoader="{s_imageCache}">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/reviewseq1.png')"
													source240dpi="@Embed('../assets/240/reviewseq1.png')"
													source320dpi="@Embed('../assets/320/reviewseq1.png')"
													source480dpi="@Embed('../assets/480/reviewseq1.png')"
													source640dpi="@Embed('../assets/640/reviewseq1.png')"/>
						</s:source>
					</s:BitmapImage>
					<s:BitmapImage id="reviewseq2" visible="false"
								   horizontalCenter="0" 
								   verticalCenter="0" 
								   contentLoader="{s_imageCache}">
						<s:source>
							<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/reviewseq2.png')"
													source240dpi="@Embed('../assets/240/reviewseq2.png')"
													source320dpi="@Embed('../assets/320/reviewseq2.png')"
													source480dpi="@Embed('../assets/480/reviewseq2.png')"
													source640dpi="@Embed('../assets/640/reviewseq2.png')"/>
						</s:source>
					</s:BitmapImage>
				</s:Group>
			</s:Group>	
			<!-- Profile and item info sections  -->
			<s:Group width="100%" height="{100/(320/Capabilities.screenDPI)}" horizontalCenter="0" mouseEnabled="false"    >
				<s:Rect width="100%"  height="100%">
					<s:fill>
						<s:SolidColor alpha="1" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				<s:HGroup width="100%" gap="0" verticalAlign="middle" height="90%" verticalCenter="0">
					<s:Group height="100%" >
						<s:BitmapImage id="myprofimage" left="0" verticalCenter="0" scaleMode="zoom" smooth="true"
									   height="{100/(320/Capabilities.screenDPI)-1}" width="{100/(320/Capabilities.screenDPI)}" 
									   contentLoader="{s_imageCache}" source="{mypic}"/>
					</s:Group>
					<s:Group width="{20/(320/Capabilities.screenDPI)}">
					</s:Group>
					<s:VGroup width="{reviewseq1.width-(220/(320/Capabilities.screenDPI))}" verticalAlign="middle"  height="100%">
						<s:Label  text="{itemname}" width="{reviewseq1.width-220}"  color="#4d4d4d"   maxDisplayedLines="1"
								  fontWeight="bold" styleName="textsize1" verticalAlign="middle"/>
						
						<s:Label  text="{businessname}" width="{reviewseq1.width-(220/(320/Capabilities.screenDPI))}" 
								  color="#4d4d4d"  styleName="textsize0" verticalAlign="middle"/>
						
					</s:VGroup>
				</s:HGroup>
				<s:BitmapImage id="bmpImg22" right="0"  width="{100/(320/Capabilities.screenDPI)}" 	
							   height="{100/(320/Capabilities.screenDPI)-1}"  source="{itemimg}"
							   contentLoader="{s_imageCache}"  scaleMode="zoom" />
				<s:Line left="0" right="0"  bottom="0" > 
					<s:stroke><s:SolidColorStroke color="0xb2b2b2" weight="{1/(320/Capabilities.screenDPI)}"/></s:stroke>
				</s:Line>				
			</s:Group>
			<!-- Circle and Write Holder  -->
			<s:Group id="maincont" width="100%"   height="100%" >
				<s:Rect width="100%"  height="100%">
					<s:fill>
						<s:SolidColor alpha="1" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				<s:Group id="grholder"  mouseEnabledWhereTransparent="true" visible="false"
						 width="{300/(320/Capabilities.screenDPI)}"
						 verticalCenter="0"
						 horizontalCenter="0">
					<s:Group id="gr" width="{150/(320/Capabilities.screenDPI)}" mouseEnabledWhereTransparent="true"  
							 height="{150/(320/Capabilities.screenDPI)}" blendMode="layer" cacheAsBitmap="true"
							 horizontalCenter="0" verticalCenter="0">
						
						<s:Group width="{150/(320/Capabilities.screenDPI)}"
								 height="{150/(320/Capabilities.screenDPI)}" mouseEnabledWhereTransparent="true"
								 blendMode="erase" cacheAsBitmap="true"
								 horizontalCenter="0" verticalCenter="0">
							<s:Ellipse width="{150/(320/Capabilities.screenDPI)}"   height="{150/(320/Capabilities.screenDPI)}" 
									   horizontalCenter="0" verticalCenter="0" >
								<s:fill>
									<s:SolidColor color="0"/>
								</s:fill>
							</s:Ellipse>
						</s:Group>
					</s:Group>
					<s:Label id="ratevalue" color="#808080" 
							 fontWeight="bold" horizontalCenter="-2" fontSize="100"
							 text="10" textAlign="center" 
							 verticalAlign="bottom" verticalCenter="{10/(320/Capabilities.screenDPI)}"/>						
				</s:Group>
				<s:Group id="writeholder" visible="false" horizontalCenter="0"   width="100%" >
					<s:TextInput id="reviewText" width="95%" top="10"  returnKeyLabel="done"
								 borderVisible="false"
								 color="#5D5D5D" fontFamily="Arial" horizontalCenter="0" 						
								 contentBackgroundAlpha="0" contentBackgroundColor="#FFFFFF"
								 prompt="Write someting about this dish"/>
				</s:Group>
			</s:Group>
			<s:Image id="confirmbtn"   mouseDown="forwardOnMenu();"  
					 horizontalCenter="0" contentLoader="{s_imageCache}"
					 mouseOver="gOver(event)" width="100%"  scaleMode="zoom"
					 mouseUp="gOut(event)" mouseOut="gOut(event)" >
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/confirmbtn.png')"
											source240dpi="@Embed('../assets/240/confirmbtn.png')"
											source320dpi="@Embed('../assets/320/confirmbtn.png')"
											source480dpi="@Embed('../assets/480/confirmbtn.png')"
											source640dpi="@Embed('../assets/640/confirmbtn.png')"/>
				</s:source>
			</s:Image>
		</s:VGroup>
		</s:Group>
</s:Group>