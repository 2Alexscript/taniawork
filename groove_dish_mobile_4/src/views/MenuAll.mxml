<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"  
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:maps="com.google.maps.*" 	
		xmlns:components="components.*" 
		backgroundAlpha="1"
		backgroundColor="#e5e5e5"
		contentBackgroundAlpha="1"
		contentBackgroundColor="#e5e5e5"
		destructionPolicy="never"
		viewActivate="init()" 
		creationComplete="init2()">
	<fx:Script source="../func/global.as"/>
	<fx:Script source="../func/menuglobal.as"/>
	<fx:Script source="../func/listLoading.as"/>
	<fx:Script>
		<![CDATA[
			import flash.events.MouseEvent;
			import flash.filesystem.File;
			import flash.utils.setTimeout;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.EffectEvent;
			import mx.events.PropertyChangeEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.Image;
			import spark.components.Scroller;
			import spark.events.IndexChangeEvent;
			import spark.events.ViewNavigatorEvent;
			import spark.transitions.SlideViewTransition;
			import spark.transitions.SlideViewTransitionMode;
			import spark.transitions.ViewTransitionDirection;
			
			import flashx.textLayout.events.ScrollEvent;
			
			import skins.HomeTileListSkin;
			[Bindable]
			public var alphatitle:String = "Home";
			[Bindable]
			public var mysearch:String = "";
			[Bindable]
			public var sortMode:Number = 0;
			[Bindable]
			public var reverse:Boolean = false;
			[Bindable]
			public var locatoinidGo:Number = -1;
			[Bindable]
			public var currentselectmode:Number = 1;
			[Bindable]
			public var hfilterarray:Array = new Array();
			[Bindable]
			public var filterData1:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filterData2:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filterData3:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var filterData4:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var hfilterstring:String = "";
			[Bindable]
			public var filtermode:Boolean = false;
			[Bindable]
			public var staticmapimageurl:String = "";
			[Bindable]
			public var prefound:Boolean = false;
			[Bindable]
			public var postalString:String = "";
			[Bindable]
			public var screenwidth:Number = 200;
			public var didupdate:Boolean = false;
			public var searchdone:Boolean = false;
			
			public function init():void
			{		
				goingtonext = false;
				hurrymode = false;
				//setLoginVars();	
			}
			public function init2():void {
				this.parentDocument.showBusy();
				
				goingtonext = false;
				setLoginVars();
				screenwidth = this.width;			
				filterData1 = new ArrayCollection();
				filterData2 = new ArrayCollection();
				filterData3 = new ArrayCollection();
				filterData4 = new ArrayCollection();
				filterData1.addItem({name:"Nearby"});
				filterData1.addItem({name:"Postal Code"});
				filterData1.addItem({name:"Address"});
				filterData2.addItem({name:"All"});
				filterData3.addItem({name:"Highest"});
				filterData3.addItem({name:"Lowest"});
				filterData4.addItem({name:"Highest"});
				filterData4.addItem({name:"Lowest"});	
				nofind.visible = false;
				setTimeout(refetchViewData,100);			
			}
			public function refetchViewData():void {
				try{
					if (data.homefilterarray != null){
						if (data.homefilterarray != []){	
							hfilterarray = data.homefilterarray;
							for (var i:uint = 0; i < hfilterarray.length; i++){
								if (i == 0){
									filtermode = true;
									hfilterstring = hfilterstring+hfilterarray;
								}
								else {
									filtermode = true;
									hfilterstring = hfilterstring+","+hfilterarray;
								}
							}
						}
					}
				}
				catch(e:Error) {}
				
				
				if (filtermode){
					getDishes2.send();
				}
				else {
					getDishes.send();
				}
				filterarea.visible = true;
			}
			public function afterGetDishes(ev:ResultEvent):void
			{	
				loadingtext.visible = false;
				var j:uint = 0;
				var i:uint = 0;
				filterarea.visible = true;
				listData = new ArrayCollection();
				modData = new ArrayCollection();
				resData = new ArrayCollection();
				try{			
					listData = ev.result[0].ress.res;		
				}
				catch(e:Error){
					try{
						listData.addItem(ev.result[0].ress.res);
					}
					catch(e:Error){}}
				
				try{			
					resData = ev.result[0].ress2.res2;		
				}
				catch(e:Error){
					try{	
						resData.addItem(ev.result[0].ress2.res2);
					}
					catch(e:Error){}}
				
				try{			
					modData = ev.result[0].ress3.res3;		
				}
				catch(e:Error){
					try{	
						modData.addItem(ev.result[0].ress3.res3);
					}
					catch(e:Error){}}
				
				syncmenurestrictions();
				for (i=  0; i < listData.length; i++){
					var goodlocationid:Boolean = true;
					listData[i].distance = Number(getDistance(mylat,mylong,listData[i].lat,listData[i].longa));
				}
				var dataSortField:SortField = new SortField();
				dataSortField.name = "distance";
				dataSortField.numeric = true;
				var numericDataSort:Sort = new Sort();
				numericDataSort.fields = [dataSortField];
				listData.sort = numericDataSort;
				listData.refresh();

				if (listData.length <= 0){
					warn.visible = true;
				}
				else {
					filterList1.visible = true;
					filterList2.visible = false;
					filterList3.visible = false;
					selectview1.alpha = 1;
					selectview2.alpha = 0;
					selectview3.alpha = 0;
					selectview1.mouseEnabled = true;
					selectview1.mouseEnabledWhereTransparent = true;					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;
					generateCategoryFilterArray();
					populatelist();
				}
				this.parentDocument.hideBusy();
			} 
			
			
			public function generateCategoryFilterArray():void {
				var tempfilter2:ArrayCollection = new ArrayCollection();
				if (listData.length > 0){
					for (var i:uint =  0; i < listData.length; i++){
						var tempfail:Boolean = false;
						for (var j:uint = 0; j < tempfilter2.length; j++){
							if (tempfilter2[j].name == listData[i].categoryname){
								tempfail = true;
							}
						}
						if (tempfail == false){
							tempfilter2.addItem({name:listData[i].categoryname});
						}
						
					}
				}
				
				var filtercatsf:SortField = new SortField();
				filtercatsf.name = "name";
				filtercatsf.numeric = false;
				var fcst:Sort = new Sort();
				fcst.fields = [filtercatsf];
				tempfilter2.sort = fcst;
				tempfilter2.refresh();
				
				
				filterData2 = new ArrayCollection();
				filterData2.addItem({name:"All"});
				for (var k:uint = 0; k < tempfilter2.length; k++){
					filterData2.addItem({name:tempfilter2[k].name});
				}
				catitemarray = filterData2;
			}
			public function populatelist():void {
				var i:uint = 0;
				var srt:Sort = new Sort();
				addcatsep = false;
				if (currentselectmode == 1){
					srt.fields = [new SortField("distance")];
				}
				else if (currentselectmode == 2){
					addcatsep = true;
					srt.fields = [new SortField("categoryname")];
				}
				else if (currentselectmode == 3){
					srt.fields = [new SortField("rating",!reverse,true)];
				}
				else if (currentselectmode == 4){
					srt.fields = [new SortField("cost",!reverse,true)];
				}
				listData.sort = srt;
				listData.refresh();
				startapplyingdata();	
			}
			public function enterpress():void {
				searchdone = true;
				searchClick();
			}
			public function keypress():void {
				if ((key.text.length == 0)&&(searchdone == true)){
					searchdone = false;
					searchClick();
				}	
			}
			public function textchange():void {
				if ((key.text.length == 0)&&(searchdone == true)){
					searchdone = false;
					searchClick();
				}	
			}
			public function postalpress(event:KeyboardEvent):void {
				var tempText:String = svi2.text;
				var rex:RegExp = /[\s\r\n]*/gim;
				var dashes:RegExp = /-/gi; // match "dashes" in a string
				tempText = tempText.replace(rex,'');
				tempText = tempText.replace(dashes,'');
				
				if (tempText.length == 6){
					postalString = tempText;
					getDishesPostal.send();
					this.parentApplication.showloading();
				}
				else {
					var dataSortField:SortField = new SortField();
					dataSortField.name = "distance";
					dataSortField.numeric = true;
					var numericDataSort:Sort = new Sort();
					numericDataSort.fields = [dataSortField];
					listData.sort = numericDataSort;
					listData.refresh();
					startapplyingdata();
					//menuList.dataProvider = listData;
				}
			}
			
			public function addressPress(event:KeyboardEvent):void {
				var tempText:String = svi3.text;
				if (tempText.length >= 6){
					postalString = tempText;
					getDishesPostal.send();
					this.parentApplication.showloading();
				}
				else {
					var dataSortField:SortField = new SortField();
					dataSortField.name = "distance";
					dataSortField.numeric = true;
					var numericDataSort:Sort = new Sort();
					numericDataSort.fields = [dataSortField];
					listData.sort = numericDataSort;
					listData.refresh();
					startapplyingdata();
					//menuList.dataProvider = listData;
				}
			}
			public function afterGetDishesPostal(ev:ResultEvent):void {
				this.destructionPolicy = "never";
				var tempstring:String = ev.result[0].toString();
				tempstring = tempstring.substring(tempstring.indexOf("lat")+3,tempstring.length);
				tempstring = tempstring.substring(tempstring.indexOf(">")+2,tempstring.length);
				var newlat:String = tempstring.substring(0,tempstring.indexOf("\n"));
				
				tempstring = tempstring.substring(tempstring.indexOf("long")+3,tempstring.length);
				tempstring = tempstring.substring(tempstring.indexOf(">")+2,tempstring.length);
				var newlong:String = tempstring.substring(0,tempstring.indexOf("\n"));
				var i:uint = 0;
				for (i =  0; i < listData.length; i++){
					
					listData[i].distance = Number(getDistance(Number(newlat),Number(newlong),listData[i].lat,listData[i].longa));
				}
				listData.refresh();
				populatelist();	
			}
			public function searchClick():void
			{
				listData.filterFunction = filterCompleted;
				listData.refresh();
				startapplyingdata();
				//menuList.dataProvider = listData;
			}
			private function filterCompleted(item:Object):Boolean{
				if((item.name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					(item.categoryname.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					return true;
				return false;
			}
			public var goingtonext:Boolean = false;
			public function menuListClick():void {	
				if (goingtonext == false){
					goingtonext = true;
					if (menuList.selectedIndex != -1){
						try{
							data.homefilterarray = [];
						}
						catch(e:Error){}
						if (menuList.selectedItem.name != 'catsep'){
							navigator.pushView(MenuDescription, menuList.selectedItem);	
						}
						
					}
					else {
						goingtonext = false;
					}
				}
			}
			private function returnall(item:Object):Boolean{
				return true;
			}
			public function goback(ev:MouseEvent):void {
				navigator.popView();
			}
			public function usermenuclick():void {
				try{
					data.homefilterarray = [];
				}
				catch(e:Error){}
				navigator.pushView(AccountSettings);
			}
			public function filterClick(u:uint):void {
				listData.filterFunction = allFilter;
				listData.refresh();
				
				var fadein:Fade = new Fade();
				fadein.alphaFrom = 0;
				fadein.alphaTo = 1;
				fadein.duration = 500;
				
				var fadeout:Fade = new Fade();
				fadeout.alphaFrom = 1;
				fadeout.alphaTo = 0;
				fadeout.duration = 500;
				
				if ((currentselectmode == 1)&&(currentselectmode != u)){
					fadeout.targets = [filterimage1];
				}
				else if ((currentselectmode == 2)&&(currentselectmode != u)){
					fadeout.targets = [filterimage2];
				}
				else if ((currentselectmode == 3)&&(currentselectmode != u)){
					fadeout.targets = [filterimage3];
				}
				else if ((currentselectmode == 4)&&(currentselectmode != u)){
					fadeout.targets = [filterimage4];
				}
				
				if ((u == 1)&&(currentselectmode != u)){
					
					filterList1.visible = true;
					filterList2.visible = false;
					filterList3.visible = false;
					filterList4.visible = false;
					
					selectview1.alpha = 1;
					selectview2.alpha = 0;
					selectview3.alpha = 0;
					selectview4.alpha = 0;
					
					fadein.targets = [filterimage1];
					
					selectview1.mouseEnabled = true;
					selectview1.mouseEnabledWhereTransparent = true;
					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;
					
					selectview4.mouseEnabled = false;
					selectview4.mouseEnabledWhereTransparent = false;
					
				}
				else if ((u == 2)&&(currentselectmode != u)){
					filterList1.visible = false;
					filterList2.visible = true;
					filterList3.visible = false;
					filterList4.visible = false;
					
					selectview1.alpha = 0;
					selectview2.alpha = 1;
					selectview3.alpha = 0;
					selectview4.alpha = 0;
					
					fadein.targets = [filterimage2];
					
					selectview1.mouseEnabled = false;
					selectview1.mouseEnabledWhereTransparent = false;
					
					selectview2.mouseEnabled = true;
					selectview2.mouseEnabledWhereTransparent = true;
					
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;
					
					selectview4.mouseEnabled = false;
					selectview4.mouseEnabledWhereTransparent = false;
				}
				else if ((u == 3)&&(currentselectmode != u)){
					filterList1.visible = false;
					filterList2.visible = false;
					filterList3.visible = true;
					filterList4.visible = false;
					
					selectview1.alpha = 0;
					selectview2.alpha = 0;
					selectview3.alpha = 1;
					selectview4.alpha = 0;
					
					fadein.targets = [filterimage3];
					
					selectview1.mouseEnabled = false;
					selectview1.mouseEnabledWhereTransparent = false;
					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					
					selectview3.mouseEnabled = true;
					selectview3.mouseEnabledWhereTransparent = true;
					
					selectview4.mouseEnabled = false;
					selectview4.mouseEnabledWhereTransparent = false;
				}
				else if ((u == 4)&&(currentselectmode != u)){
					filterList1.visible = false;
					filterList2.visible = false;
					filterList3.visible = false;
					filterList4.visible = true;
					
					selectview1.alpha = 0;
					selectview2.alpha = 0;
					selectview3.alpha = 0;
					selectview4.alpha = 1;
					fadein.targets = [filterimage4];
					
					selectview1.mouseEnabled = false;
					selectview1.mouseEnabledWhereTransparent = false;
					
					selectview2.mouseEnabled = false;
					selectview2.mouseEnabledWhereTransparent = false;
					
					selectview3.mouseEnabled = false;
					selectview3.mouseEnabledWhereTransparent = false;
					
					selectview4.mouseEnabled = true;
					selectview4.mouseEnabledWhereTransparent = true;
				}
				
				if (currentselectmode != u){
					fadeout.play();
					fadein.play();
					currentselectmode = u;
					setTimeout(	populatelist,500);
				}
			}
			public function goFilterScreen(u:uint):void {
				if (clickingsvi == false){
					if (dropDownContainer.visible){
						//close dropdown menu
						var fadeout:Fade = new Fade();
						fadeout.alphaFrom = 1;
						fadeout.alphaTo = 0;currentselectmode
						fadeout.duration = 500;
						fadeout.target = dropDownContainer;
						fadeout.play();
						fadeout.addEventListener(EffectEvent.EFFECT_END, afterdrophide);
					}
					else{
						//show dropdown menu
						var fadein:Fade = new Fade();
						fadein.alphaFrom = 0;
						fadein.alphaTo = 1;
						fadein.duration = 500;
						dropDownContainer.visible = true;
						fadein.target = dropDownContainer;
						fadein.play();
					}	
				}
				else {
					clickingsvi = false;
				}
			}
			public function afterdrophide(ev:EffectEvent):void {
				dropDownContainer.visible = false;
			}
			public function filter1Click():void {
				if (filterList1.selectedItem.name == "Nearby"){
					svi1.visible = true;
					svi2.visible = false;
					svi3.visible = false;
					for (var i:uint =  0; i < listData.length; i++){
						listData[i].distance = Number(getDistance(mylat,mylong,listData[i].lat,listData[i].longa));
					}
					populatelist();
				}
				else if (filterList1.selectedItem.name == "Postal Code"){
					svi1.visible = false;
					svi2.visible = true;
					svi3.visible = false;
				}
				else if (filterList1.selectedItem.name == "Address"){
					svi1.visible = false;
					svi2.visible = false;
					svi3.visible = true;
				}
				goFilterScreen(0);
				
			}
			public function filter2Click():void {
				sv2label.text = filterList2.selectedItem.name;
				goFilterScreen(1);
				listData.filterFunction = catFilter;
				listData.refresh();
				startapplyingdata();
				//menuList.dataProvider = listData;
				//add filter here
				populatelist();
			}
			private function allFilter(item:Object):Boolean{
				return true;
			}
			private function catFilter(item:Object):Boolean{
				if (sv2label.text.toLowerCase() == "all"){
					return true;
				}
				else {
					if((item.categoryname.toString().toLowerCase().indexOf(	sv2label.text.toLowerCase()) != -1)){
						return true;
					}	
				}
				return false;
			}
			public function filter3Click():void {
				if (filterList3.selectedItem.name == "Highest"){
					currentselectmode = 3;
					reverse = false;
				}
				else if (filterList3.selectedItem.name == "Lowest"){
					currentselectmode = 3;
					reverse = true;
				}
				populatelist();
				sv3label.text = filterList3.selectedItem.name;
				goFilterScreen(2);
				
			}
			public function filter4Click():void {
				if (filterList4.selectedItem.name == "Highest"){
					currentselectmode = 4;
					reverse = false;
				}
				else if (filterList4.selectedItem.name == "Lowest"){
					currentselectmode = 4;
					reverse = true;
				}
				populatelist();
				sv4label.text = filterList4.selectedItem.name;
				goFilterScreen(3);
				
			}
			public var clickingsvi:Boolean = false;
			public function svilabelclick():void {
				clickingsvi = true;
				if (dropDownContainer.visible){
					//close dropdown menu
					var fadeout:Fade = new Fade();
					fadeout.alphaFrom = 1;
					fadeout.alphaTo = 0;
					fadeout.duration = 500;
					fadeout.target = dropDownContainer;
					fadeout.play();
					fadeout.addEventListener(EffectEvent.EFFECT_END, afterdrophide);
				}
			}
			
	
		]]>
	</fx:Script>
	<s:titleContent>
		<s:Group horizontalCenter="0" verticalCenter="0" width="{this.width/1.5}"  height="60%">
			<s:Rect width="100%"  height="100%"
					radiusX="{25/(320/Capabilities.screenDPI)}"
					radiusY="{25/(320/Capabilities.screenDPI)}">
				<s:fill>
					<s:SolidColor alpha="1" color="#39a994"/>
				</s:fill>
			</s:Rect>
			<s:BitmapImage left="{20/(320/Capabilities.screenDPI)}" verticalCenter="0" contentLoader="{s_imageCache}">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/glass.png')"
											source240dpi="@Embed('../assets/240/glass.png')"
											source320dpi="@Embed('../assets/320/glass.png')"
											source480dpi="@Embed('../assets/480/glass.png')"
											source640dpi="@Embed('../assets/640/glass.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:TextInput   fontFamily="Arial" returnKeyLabel="search"  enter="enterpress();" verticalCenter="0" change="textchange();" 
						   color="#FFFFFF"  right="0" left="{35/(320/Capabilities.screenDPI)}" fontWeight="normal"   styleName="textsize0"    
						   id="key"  top="{6/(320/Capabilities.screenDPI)}"  height="98%" borderVisible="false" 
						   contentBackgroundAlpha="0" softKeyboardType="contact" keyDown="keypress()"
						   maxChars="20" prompt="Search Dishes"
						   />
		</s:Group>
	</s:titleContent>
	<fx:Declarations>		
		<s:HTTPService id="getDishes" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/getDishes.php"
					   result="afterGetDishes(event)"/>
		<s:HTTPService id="getDishes2" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/getDishesFilter.php"
					   result="afterGetDishes(event)" >
			<s:request xmlns="">
				<hfilterstring>{hfilterstring}</hfilterstring>
			</s:request>
		</s:HTTPService>
		<s:HTTPService id="getDishesPostal" method="GET" resultFormat="array"
					   url="http://www.groovedish.com/php/mobile/getDishesPostal.php"
					   result="afterGetDishesPostal(event)" >
			<s:request xmlns="">
				<postalString>{postalString}</postalString>
			</s:request>
		</s:HTTPService>
		<s:MultiDPIBitmapSource id="close"
								source160dpi="@Embed('../assets/160/close.png')"
								source240dpi="@Embed('../assets/240/close.png')"
								source320dpi="@Embed('../assets/320/close.png')"
								source480dpi="@Embed('../assets/480/close.png')"
								source640dpi="@Embed('../assets/640/close.png')"/>
	</fx:Declarations>
	<s:VGroup width="100%" gap="-1" height="100%" horizontalAlign="center">
		<s:Group id="filterarea" visible="true" width="100%" 
				 height="{75/(320/Capabilities.screenDPI)}">
			<s:Rect width="100%"  height="100%">
				<s:fill>
					<s:SolidColor alpha="1" color="#8eddce"/>
				</s:fill>
			</s:Rect>
			<s:BitmapImage id="filterimage1" horizontalCenter="0"  
						   contentLoader="{s_imageCache}" alpha="1"
						   verticalCenter="0">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/hometabs1.png')"
											source240dpi="@Embed('../assets/240/hometabs1.png')"
											source320dpi="@Embed('../assets/320/hometabs1.png')"
											source480dpi="@Embed('../assets/480/hometabs1.png')"
											source640dpi="@Embed('../assets/640/hometabs1.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:BitmapImage id="filterimage2" horizontalCenter="0" 
						   contentLoader="{s_imageCache}" alpha="0"  
						   verticalCenter="0">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/hometabs2.png')"
											source240dpi="@Embed('../assets/240/hometabs2.png')"
											source320dpi="@Embed('../assets/320/hometabs2.png')"
											source480dpi="@Embed('../assets/480/hometabs2.png')"
											source640dpi="@Embed('../assets/640/hometabs2.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:BitmapImage id="filterimage3" horizontalCenter="0"  
						   contentLoader="{s_imageCache}" alpha="0"  
						   verticalCenter="0">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/hometabs3.png')"
											source240dpi="@Embed('../assets/240/hometabs3.png')"
											source320dpi="@Embed('../assets/320/hometabs3.png')"
											source480dpi="@Embed('../assets/480/hometabs3.png')"
											source640dpi="@Embed('../assets/640/hometabs3.png')"/>
				</s:source>			
			</s:BitmapImage>
			<s:BitmapImage id="filterimage4" horizontalCenter="0"  
						   contentLoader="{s_imageCache}" alpha="0" 
						   verticalCenter="0">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/hometabs4.png')"
											source240dpi="@Embed('../assets/240/hometabs4.png')"
											source320dpi="@Embed('../assets/320/hometabs4.png')"
											source480dpi="@Embed('../assets/480/hometabs4.png')"
											source640dpi="@Embed('../assets/640/hometabs4.png')"/>
				</s:source>
			</s:BitmapImage>
			<s:HGroup width="{filterimage1.width}" horizontalCenter="0" height="100%" >
				<s:Group width="25%"  height="100%" id="toggleclick1" click="filterClick(1);" 
						 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
				<s:Group width="25%"  height="100%" id="toggleclick2" click="filterClick(2);" 
						 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
				<s:Group width="25%"  height="100%" id="toggleclick3" click="filterClick(3);" 
						 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
				<s:Group width="25%"  height="100%" id="toggleclick4" click="filterClick(4);" 
						 mouseEnabledWhereTransparent="true" mouseEnabled="true"/>
			</s:HGroup>
		</s:Group>
		<s:Group width="100%" maxWidth="{this.width}" 
				 height="{75/(320/Capabilities.screenDPI)}">
			<s:Rect width="100%"  height="100%">
				<s:fill>
					<s:SolidColor alpha="1" color="#f2f2f2"/>
				</s:fill>
			</s:Rect>
			<s:Image right="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" 
					 visible="{dropDownContainer.alpha == 1}" rotation="90"  verticalCenter="0" contentLoader="{s_imageCache}">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/dropdown.png')"
											source240dpi="@Embed('../assets/240/dropdown.png')"
											source320dpi="@Embed('../assets/320/dropdown.png')"
											source480dpi="@Embed('../assets/480/dropdown.png')"
											source640dpi="@Embed('../assets/640/dropdown.png')"
											/>
				</s:source>
			</s:Image>
			<s:Image right="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" 
					 visible="{dropDownContainer.alpha == 0}"  verticalCenter="0" contentLoader="{s_imageCache}">
				<s:source>
					<s:MultiDPIBitmapSource source160dpi="@Embed('../assets/160/dropdown.png')"
											source240dpi="@Embed('../assets/240/dropdown.png')"
											source320dpi="@Embed('../assets/320/dropdown.png')"
											source480dpi="@Embed('../assets/480/dropdown.png')"
											source640dpi="@Embed('../assets/640/dropdown.png')"
											/>
				</s:source>
			</s:Image>
			<s:HGroup id="selectview1" right="0" left="0" maxWidth="{this.width}"  height="100%" alpha="1"
					  mouseDown="goFilterScreen(0);" 
					  mouseEnabled="true" mouseEnabledWhereTransparent="true" mouseOut="gOut(event)"
					  mouseOver="gOver(event)" mouseUp="gOut(event)" 
					  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle" >
				<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false" color="#4d4d4d" styleName="textsize1" text="Near" 
						 verticalAlign="middle" verticalCenter="0"/>			
				<s:Group left="{90/(320/Capabilities.screenDPI)}" right="{20/(320/Capabilities.screenDPI)}"  verticalCenter="0">
					
					<s:Label id="svi1" visible="true" left="0"  mouseEnabled="false"
							 color="#4d4d4d" fontWeight="bold" styleName="textsize1"
							 text="Current Location" verticalCenter="0"/>
					<s:TextInput id="svi2" height="90%" right="{10/(320/Capabilities.screenDPI)}" width="80%" verticalCenter="0" color="#b2b2b2" styleName="textsize1"
								 visible="false" click="svilabelclick();" keyUp="postalpress(event);" left="0" prompt="Enter Postal Code"
								 borderVisible="false" fontWeight="normal"  contentBackgroundAlpha="0"/>
					<s:TextInput id="svi3" height="90%" click="svilabelclick();" width="80%" keyUp="addressPress(event)" right="{10/(320/Capabilities.screenDPI)}" verticalCenter="0"
								 visible="false" left="0" prompt="Enter Address" color="#b2b2b2" styleName="textsize1"
								 borderVisible="false" fontWeight="normal"  contentBackgroundAlpha="0"/>
				</s:Group>
			</s:HGroup>
			<s:HGroup id="selectview2"  mouseDown="goFilterScreen(1);" maxWidth="{this.width}"    alpha="0" height="100%" width="100%"
					  mouseEnabled="false" mouseEnabledWhereTransparent="false"
					  mouseOver="gOver(event)" mouseOut="gOut(event)" mouseUp="gOut(event)"
					  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle">
				<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false"  color="#4d4d4d" 
						 styleName="textsize1" text="Cuisine" verticalAlign="middle" verticalCenter="0"/>
				<s:Label left="{115/(320/Capabilities.screenDPI)}" id="sv2label" mouseEnabled="false"  color="#4d4d4d" fontWeight="bold" styleName="textsize1"
						 text="All" verticalAlign="middle" verticalCenter="0"/>
			</s:HGroup>
			<s:HGroup id="selectview3"  mouseDown="goFilterScreen(2);" maxWidth="{this.width}"   alpha="0" height="100%" width="100%"
					  mouseEnabled="false" mouseEnabledWhereTransparent="false"
					  mouseOver="gOver(event)" mouseOut="gOut(event)" mouseUp="gOut(event)"
					  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle">
				<s:Label left="{29/(320/Capabilities.screenDPI)}" mouseEnabled="false"  color="#4d4d4d" styleName="textsize1" text="Rating"
						 verticalAlign="middle" verticalCenter="0"/>
				<s:Label left="{107/(320/Capabilities.screenDPI)}" id="sv3label" width="{124/(320/Capabilities.screenDPI)}" color="#4d4d4d" fontWeight="bold"
						 mouseEnabled="false" styleName="textsize1" text="Highest"
						 verticalAlign="middle" verticalCenter="0"/>
			</s:HGroup>
			<s:HGroup id="selectview4"  mouseDown="goFilterScreen(3);" maxWidth="{this.width}"   alpha="0" height="100%" width="100%"
					  mouseEnabled="false" mouseEnabledWhereTransparent="false"
					  mouseOver="gOver(event)" mouseOut="gOut(event)" mouseUp="gOut(event)"
					  paddingLeft="{30/(320/Capabilities.screenDPI)}" gap="{15/(320/Capabilities.screenDPI)}" verticalAlign="middle">
				<s:Label left="{29/(320/Capabilities.screenDPI)}" color="#4d4d4d" mouseEnabled="false" styleName="textsize1"
						 text="Price" verticalAlign="middle" verticalCenter="0"/>
				<s:Label left="{93/(320/Capabilities.screenDPI)}" id="sv4label" width="{117/(320/Capabilities.screenDPI)}" color="#4d4d4d" fontWeight="bold" mouseEnabled="false"
						 styleName="textsize1" text="Highest" verticalAlign="middle" verticalCenter="0"/>
			</s:HGroup>
			
		</s:Group>
		
		<s:Group width="100%" horizontalCenter="0" height="100%" >
			<s:List right="{6/(320/Capabilities.screenDPI)}" left="{6/(320/Capabilities.screenDPI)}" horizontalCenter="0"
					height="{this.height-(150/(320/Capabilities.screenDPI))}"
					id="menuList" useVirtualLayout="false" 
					verticalScrollPolicy="on"   
					creationComplete="list_creationCompleteHandler(event)"
					horizontalScrollPolicy="off"  
					contentBackgroundColor="#FFFFFF"
					skinClass="skins.MenuProxTileListSkin"
					selectedIndex="1" 
					change="menuListClick();"
					click="menuListClick();"/>
			
			<s:Group id="nofind" visible="false" width="100%" height="100%">
				<s:Rect width="100%"  height="100%">
					<s:fill>
						<s:SolidColor alpha="1" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				<s:Label horizontalCenter="0" verticalCenter="0" verticalAlign="middle"
						 text="No Results Found" color="#8c8c8c"/>
			</s:Group>
			
			<s:Group id="dropDownContainer" visible="false" alpha="0" width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:SolidColor alpha="0.8" color="#FFFFFF"/>
					</s:fill>
				</s:Rect>
				<s:List width="100%" horizontalCenter="0" height="100%"
						contentBackgroundAlpha="0" visible="true"
						id="filterList1"  horizontalScrollPolicy="off" 
						dataProvider="{filterData1}"
						itemRenderer="components.dropdownitem"
						click="filter1Click();" >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="0"/>
					</s:layout>
				</s:List>
				
				<s:List width="100%" horizontalCenter="0" height="100%"
						contentBackgroundAlpha="0" visible="false"
						id="filterList2"  horizontalScrollPolicy="off" 
						dataProvider="{filterData2}"
						itemRenderer="components.dropdownitem"
						click="filter2Click();" >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="0"/>
					</s:layout>
				</s:List>
				
				<s:List width="100%" horizontalCenter="0" height="100%"
						contentBackgroundAlpha="0" visible="false"
						id="filterList3"  horizontalScrollPolicy="off" 
						dataProvider="{filterData3}"
						itemRenderer="components.dropdownitem"
						click="filter3Click();" >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="0"/>
					</s:layout>
				</s:List>
				
				<s:List width="100%" horizontalCenter="0" height="100%"
						contentBackgroundAlpha="0" visible="false"
						id="filterList4"  horizontalScrollPolicy="off" 
						dataProvider="{filterData4}"
						itemRenderer="components.dropdownitem"
						click="filter4Click();" >
					<s:layout>
						<s:VerticalLayout horizontalAlign="contentJustify" 
										  gap="0"/>
					</s:layout>
				</s:List>
			</s:Group>
		</s:Group>
	</s:VGroup>
	<s:Label color="#494949"  id="loadingtext" visible="true" horizontalCenter="0" 
			 styleName="textsize8"  text="Loading Dishes Near You..." verticalCenter="0"/>
	<s:Label color="#494949"  id="warn" visible="false" horizontalCenter="0" 
			 styleName="textsize8"  text="No Items Available" verticalCenter="0"/>
</s:View>