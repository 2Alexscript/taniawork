<?xml version="1.0" encoding="utf-8"?>
<components:TemplateDemoContainer xmlns:components="fr.kapit.lab.demo.common.components.*"
								  xmlns:config="fr.kapit.lab.demo.data.config.*"
								  xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:graph="fr.kapit.lab.demo.ui.components.graph.*"
								  xmlns:info="fr.kapit.lab.demo.info.*"
								  xmlns:managers="fr.kapit.lab.demo.managers.*"
								  xmlns:map="fr.kapit.lab.demo.ui.components.map.*"
								  xmlns:map1="fr.kapit.lab.demo.data.map.*"
								  xmlns:menubar="fr.kapit.lab.demo.ui.components.menubar.*"
								  xmlns:mx="library://ns.adobe.com/flex/mx"
								  xmlns:panel="fr.kapit.lab.demo.panel.*"
								  xmlns:panels="fr.kapit.lab.demo.ui.components.panels.*"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  xmlns:visualizer="fr.kapit.visualizer.*"
								  showAboutInfo="this_showAboutInfoHandler(event)"
								  showToggleButtonOptions="true" title="Mapping"
								  creationComplete="mainView_creationCompleteHandler(event)" >
	<fx:Declarations>
		<s:HTTPService id = "customquery2"
					   result="afterDataRecieve2(event)"
					   resultFormat="array"
					   url = "http://enactforum.org/patentviz/customquery.php"
					   method="GET" >
			<s:request xmlns="">
				<cus1>{cus1}</cus1>
				<cus2>{cus2}</cus2>
			</s:request>
		</s:HTTPService>
	</fx:Declarations>
	<fx:Script>
	<![CDATA[
		import fr.kapit.lab.demo.data.map.MapAirport;
		import fr.kapit.lab.demo.data.map.MapCluster;
		import fr.kapit.lab.demo.data.map.MapFlightRoad;
		import fr.kapit.lab.demo.managers.DataManager;
		import fr.kapit.visualizer.Visualizer;
		import fr.kapit.visualizer.events.VisualizerEvent;
		
		import mx.charts.chartClasses.NumericAxis;
		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		import mx.events.IndexChangedEvent;
		import mx.events.ResizeEvent;
		import mx.formatters.NumberBase;
		import mx.rpc.events.ResultEvent;
		
		import spark.collections.Sort;
		import spark.collections.SortField;
		import spark.events.IndexChangeEvent;

		[Bindable]
		protected var startYear:Number = 1985;

		[Bindable]
		protected var endYear:Number = 2010;

		[Bindable]
		public var visualizer:Visualizer;

		private var _dataFormatter:NumberBase;
		[Bindable]
		public var cus1:String = "";
		[Bindable]
		public var cus2:String = "";
		
		

		/* ******
		* Init Handling
		**********/

		protected function mainView_creationCompleteHandler(event:FlexEvent):void
		{

		
			dataProvider.flightRoads.removeAll();
			dataProvider.airports.removeAll();
			cus1 = "synthbio";
			cus2 = "SELECT `Publication Number`,  `Cited Patents - DPCI`, `Citing Patents` FROM `companies_v2`;";
			customquery2.send();
			
			
			_dataFormatter = new NumberBase(".", ".", ".", ".");
			changeRightSidePanels();
			
		}

		/* ******
		* Visualization Handling
		**********/

		protected function viewsStack_creationCompleteHandler(event:FlexEvent):void
		{
			syncVisualization();
		}

		protected function viewStack_changeHandler(event:IndexChangedEvent):void
		{
			syncVisualization();
		}

		protected function syncVisualization():void
		{
			//var newVisualizer:Visualizer = viewStack.selectedIndex==0 ? mapVisualizer : graphVisualizer;
			var newVisualizer:Visualizer =  graphVisualizer;
			if (visualizer != newVisualizer)
			{
				visualizer = newVisualizer;
			}
			openOptions = true;
		}

		protected function hSlider_dataTipFormatFunction(value:Number):String
		{
			return _dataFormatter.formatPrecision(String(value), 0);
		}

		protected function this_showAboutInfoHandler(event:Event):void
		{
			//aboutPanel.open = true;
		}

		protected function viewMenuBar_changeHandler(event:IndexChangeEvent):void
		{
			viewStack.selectedIndex = 1;
			syncVisualization();
			changeRightSidePanels();
		}

		private function changeRightSidePanels():void
		{
			openOptions = true;
		}
		public function afterDataRecieve2(ev:ResultEvent):void
		{
			var dataArray:ArrayCollection = ev.result[0].lists.list;
			var dataArray2:ArrayCollection = new ArrayCollection();
			var airportarray:ArrayCollection = new ArrayCollection();
			var graphstring:String = "";
			/*var edgestring:String = '<graphml>
			<node id="n1" label="group1" layout="hierarchicalTree">
			<graph id="n1:" edgedefault="undirected">';*/
			var subhitlimit:Number = 20;
			var i:Number = 0;
			var j:Number = 0;
			//for (i = 0; i <dataArray.length; i++){	
			for (i = 0; i <100; i++){	
				var publication_number:String = dataArray[i].PublicationNumber;
				var cited_refs:String = dataArray[i].CitedPatentsDPCI;
				var citing_refs:String = dataArray[i].CitingPatents;
				var cited_refs_parts:Array = cited_refs.split(" | ");
				var citing_refs_parts:Array = citing_refs.split(" | ");
				trace(i.toString()+"/"+dataArray.length.toString());
				
				
				for (j = 0; j < cited_refs_parts.length; j++){
				
					if (cited_refs_parts[j].length > 4){
					/*	var allowit:Boolean = false;
						var subhits:Number = 0;
						for (var q:uint = 0; q < dataArray.length; q++){
							var cited_refs2:String = dataArray[q].CitedPatentsDPCI.toLowerCase();
							var citing_refs2:String = dataArray[q].CitingPatents.toLowerCase();
							
							if (dataArray[q].PublicationNumber.toLowerCase() == cited_refs_parts[j].toLowerCase()){
								allowit = true;
								q = dataArray.length;
							}
													
							if (cited_refs2.indexOf(cited_refs_parts[j].toLowerCase()) != -1){
								//subhits++;
							}
							
							if (citing_refs2.indexOf(cited_refs_parts[j].toLowerCase()) != -1){
								//subhits++;
							}
							
						}
						if ((allowit)||(subhits >= subhitlimit)){*/
							dataArray2.addItem({
								pub1:publication_number,
								pub2:cited_refs_parts[j],
								direction:"forward"});
						//}
						
					}
				}
				
				for (j = 0; j < citing_refs_parts.length; j++){
					if (citing_refs_parts[j].length > 4){
						/*var allowit:Boolean = false;
						var subhits:Number = 0;
						for (var q:uint = 0; q < dataArray.length; q++){
							if (dataArray[q].PublicationNumber.toLowerCase() == citing_refs_parts[j].toLowerCase()){
								allowit = true;
								q = dataArray.length;
							}
							
							var cited_refs2:String = dataArray[q].CitedPatentsDPCI.toLowerCase();
							var citing_refs2:String = dataArray[q].CitingPatents.toLowerCase();
							
							if (cited_refs2.indexOf(citing_refs_parts[j].toLowerCase()) != -1){
								//subhits++;
							}
							
							if (citing_refs2.indexOf(citing_refs_parts[j].toLowerCase()) != -1){
								//subhits++;
							}
							
						}
						if ((allowit)||(subhits >= subhitlimit)){*/
							dataArray2.addItem({
							pub1:publication_number,
							pub2:citing_refs_parts[j],
							direction:"backward"});
					//	}
						
						
					}
				}	
			}
			var indexcount:Number = 1;
			var edgecount:Number = 1;
			var usedarray:ArrayCollection = new ArrayCollection();
			var edgearray:ArrayCollection = new ArrayCollection();
			for (i = 0; i < dataArray2.length; i++){
				trace(i.toString()+"/"+dataArray2.length.toString());
				var found1:Boolean = false;
				var found2:Boolean = false;
				var item1uid:String = "";
				var item2uid:String = "";
				
				for (j = 0; j < usedarray.length; j++){
					if (usedarray[j].pub == dataArray2[i].pub1){
						found1 = true;
						item1uid = usedarray[j].uid;
					}
					
					if (usedarray[j].pub == dataArray2[i].pub2){
						found2 = true;
						item2uid = usedarray[j].uid;
					}
					
				}
				
				if (found1 == false){
					item1uid = "g1g"+indexcount.toString();
					airportarray.addItem(getmapcluster(item1uid,dataArray2[i].pub1,50,-30));
					indexcount++;
					usedarray.addItem({pub:dataArray2[i].pub1,uid:item1uid});
					
				}
				
				if (found2 == false){
					item2uid = "g1g"+indexcount.toString();
					airportarray.addItem(getmapcluster(item2uid,dataArray2[i].pub2,50,-30));
					indexcount++;
					usedarray.addItem({pub:dataArray2[i].pub2,uid:item2uid});
				}
				
				var mfr2:MapFlightRoad = new MapFlightRoad();
				mfr2.sourceNode = item1uid+"n0"
				mfr2.targetNode = item2uid+"n0";
				mfr2.uid = "g1e"+edgecount.toString();
				mfr2.label = "Link";
				mfr2.flightsCapacity = 1;
				mfr2.flights = 1;
				edgecount++;
				edgearray.addItem(mfr2);
				

			}
			var k:uint = 0;
			for (k = 0; k < airportarray.length; k++){
				dataProvider.airports.addItem(airportarray[k]);
			}
			for (k = 0; k < edgearray.length; k++){
				dataProvider.flightRoads.addItem(edgearray[k]);
			}
			
			
			var stop:String = "";
		}
		public function getmapcluster(uid:String,label:String,lat:Number,longa:Number):MapCluster{
			var mc2:MapCluster = new MapCluster();
			mc2 = new MapCluster();
			mc2.uid = uid;
			mc2.label = label;
			mc2.latitude = lat;
			mc2.longitude = longa;
			
			var mcchildren2:ArrayCollection = new ArrayCollection();
			var mpair:MapAirport = new MapAirport();
			mpair.uid = uid+"n0";
			mpair.country = "";
			mpair.label = label;
			mpair.type = "small";
			mpair.latitude = lat;
			mpair.longitude = longa;
			//BLUE CATEGORY AMOUNT
			mpair.internationalFlights = 1;
			//RED CATEGORY AMOUNT
			mpair.nationalFlights = 1;
			mpair.otherFlights = 1;
			mcchildren2.addItem(mpair);
			mc2.children = mcchildren2;

			return mc2
		}
	
		
	]]>
	</fx:Script>

	<fx:Declarations>
		<map1:MapDataProvider id="dataProvider" />
		<config:MapParams id="mapParams" />
		<managers:DataManager id="dataManager" dataProvider="{dataProvider}" />
	</fx:Declarations>

	<components:optionsContent>
		<panels:LayoutPanel id="layoutPanel" visualizer="{visualizer}" />
		<panels:OverviewPanel id="overviewPanel" visualizer="{visualizer}" />
	</components:optionsContent>

	<s:VGroup width="100%" height="100%" gap="0">
		<!-- TOP MENU BAR -->
		<menubar:ViewMenuBar id="viewMenuBar" 
							 width="100%" height="40"
							 change="viewMenuBar_changeHandler(event)"
							 />
		<!-- Visualization window -->
		<mx:ViewStack id="viewStack"
					  width="100%" height="100%"
					  creationComplete="viewsStack_creationCompleteHandler(event)"
					  change="viewStack_changeHandler(event)"
					  >
		
			<s:NavigatorContent width="100%" height="100%">
				<graph:GraphVisualizer id="graphVisualizer"
									   width="100%" height="100%"
									   ignoreGrouping="true"
									   linksDataProvider="{dataProvider.flightRoadsDataProvider}"
									   nodesDataProvider="{dataProvider.airportsDataProvider}"
									   />
			</s:NavigatorContent>
		</mx:ViewStack>
	</s:VGroup>

	

</components:TemplateDemoContainer>
