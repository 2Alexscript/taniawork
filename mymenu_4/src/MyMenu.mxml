<?xml version="1.0" encoding="utf-8"?>
<s:ViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
							
								  runtimeDPIProvider="com.renaun.mobile.dpi.CustomDPIProvider"
								  applicationComplete="onApplicationComplete()"
								  fontFamily="segoewp" 	
								  contentBackgroundAlpha="1"
								  contentBackgroundColor="#000000"
								  backgroundColor="#000000"
								    firstView="views.Login"
								  preloader="com.renaun.caltrain.components.MultiDPISplashScreen"
								  initialize="{this.makeMap();}"
								  splashScreenScaleMode="stretch"
								  splashScreenMinimumDisplayTime="1000"
								  persistNavigatorState="true"  
								  navigatorStateSaving="onPersisting(event)"
								  navigatorStateLoading="onRestoring(event)" >
	<fx:Style source="./main.css"/>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		s|TabbedViewNavigator{
			skin-class:ClassReference("skins.MySkin");
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import com.mapquest.*;
			import com.mapquest.mobile.TextUtil;
			import com.mapquest.services.traffic.Traffic;
			import com.mapquest.tilemap.*;
			import com.mapquest.tilemap.controls.shadymeadow.SMZoomControl;
			import com.mapquest.tilemap.pois.*;
			
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.sensors.Geolocation;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.BusyIndicator;
			import spark.components.ButtonBar;
			import spark.components.Group;
			import spark.components.View;
			import spark.components.ViewNavigator;
			import spark.effects.Resize;
			import spark.managers.PersistenceManager;
			import spark.transitions.CrossFadeViewTransition;
			import spark.transitions.FlipViewTransition;
			import spark.transitions.ViewTransitionBase;
			import spark.transitions.ZoomViewTransition;
			
			import views.AccountHome;
			import views.Login;
			import views.LoyaltyHome;
			import views.StoresHome;
			include "includes/BusyIndicatorUtil.as";
			include "includes/TrafficUtil.as";
			include "includes/AppConfig.as";
			include "includes/ZoomControlUtil.as";
			include "includes/InfoWindowUtil.as";
			include "includes/GpsUtil.as";
			
			[Bindable]
			public var map:TileMap;
			public var gps:Geolocation;
			public var gpsLatLng:LatLng;
			private var zoomControl:SMZoomControl;
			private var traffic:Traffic;
			public var gpsPoi:Poi;
			public var gpsIsSupported:Boolean = false;
			public var trafficEnabled:Boolean = false;
			public var gpsTried:Boolean = false;
			public var imgSize:int;
			[Bindable]
			public var assetPath:String;
			public var biBusyIndicator:BusyIndicator;		
			public var searchLocation:String;
			public var searchTerm:String;
			public var directionsLocations:Array;
			public var crosstrans:CrossFadeViewTransition = new CrossFadeViewTransition(); 
			protected var sqlConnection:SQLConnection;
			protected function tabbedmobileapplication1_applicationCompleteHandler(event:FlexEvent):void {
				trace(numElements);
			}
			protected function onApplicationComplete():void
			{
				this.stage.autoOrients = false;				
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);
			
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);

				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);

				
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);

				
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				
				
				this.addEventListener(ResizeEvent.RESIZE,this.onResize,false,0,true);
				
				
				switch(this.applicationDPI) {
					case 160:
						this.imgSize = 45;
						break;
					case 240:
						this.imgSize = 60;
						break;
					case 320:
						this.imgSize = 90;
						break;
				}
				this.assetPath = "assets/" + this.imgSize + "/";
				this.splashScreenImage = null;
				
			/*	
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				stmt = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "CREATE TABLE IF NOT EXISTS localuser (" +
					"email varchar(255)," +
					"name varchar(255)," +
					"country varchar(255)," +
					"active varchar(255))";
				stmt.execute();
				
				sqlConnection = new SQLConnection();
				sqlConnection.open(File.applicationStorageDirectory.resolvePath("localuser.db"));
				var stmt:SQLStatement = new SQLStatement();
				stmt.sqlConnection = sqlConnection;
				stmt.text = "SELECT email, name, country, active FROM localuser where active = 'yes'";
				stmt.execute();
				var resData:ArrayCollection = new ArrayCollection(stmt.getResult().data);
				var loadManager:PersistenceManager = new PersistenceManager();
				
				
				if (resData.length != 0){
					var vn1:ViewNavigator = new ViewNavigator();
					vn1.firstView = views.AccountHome;
					vn1.percentWidth = 100;
					vn1.percentHeight = 100;
					
					var vn2:ViewNavigator = new ViewNavigator();
					vn2.firstView = views.StoresHome;
					vn2.percentWidth = 100;
					vn2.percentHeight = 100;
					
					var vn3:ViewNavigator = new ViewNavigator();
					vn3.firstView = views.LoyaltyHome;
					vn3.percentWidth = 100;
					vn3.percentHeight = 100;
			
					
					//this.tabbedNavigator.addItem(vn2);
					//this.tabbedNavigator.addItem(vn1);
				////this.tabbedNavigator.addItem(vn3);
					
				}
				else {
					var vn4:ViewNavigator = new ViewNavigator();
					vn4.firstView = views.Login;
					vn4.percentWidth = 100;
				
					vn4.percentHeight = 100;
					vn4.icon = cardimg;
				//	this.tabbedNavigator.addItem(vn4);
					
				}
				//this.tabbedNavigator.validateNow();*/
			}
			public function refresh(email:String):void {
			
			//this.tabbedNavigator.removeAll();
//			this.tabbedNavigator.validateNow();
				var vn1:ViewNavigator = new ViewNavigator();
				vn1.firstView = views.AccountHome;
				vn1.percentWidth = 100;
				vn1.percentHeight = 100;
				
				var vn2:ViewNavigator = new ViewNavigator();
				vn2.firstView = views.StoresHome;
				vn2.percentWidth = 100;
				vn2.percentHeight = 100;
				
				var vn3:ViewNavigator = new ViewNavigator();
				vn3.firstView = views.LoyaltyHome;
				vn3.percentWidth = 100;
				vn3.percentHeight = 100;
				
			//	this.tabbedNavigator.addItem(vn2);
				//this.tabbedNavigator.addItem(vn1);
				//this.tabbedNavigator.addItem(vn3);	
				
			}
			public function logout():void {
				
				//this.tabbedNavigator.removeAll();
				//this.tabbedNavigator.validateNow();
				var vn4:ViewNavigator = new ViewNavigator();
				vn4.firstView = views.Login;
			
				vn4.percentWidth = 100;
				vn4.percentHeight = 100;
				vn4.icon = cardimg;
				
				//this.tabbedNavigator.addItem(vn4);
			}
			
			
			public function makeMap():void {
				this.map = new TileMap(this.key,this.mapStartZoomLevel,new LatLng(38.134557, -98.4375),this.mapStartType);
				this.map.size = new Size(this.width,this.height);
				this.map.mapFriction = this.mapFriction;
				this.map.name = "myMap";
				if (this.mapUseZoomControl) this.addZoomControl();
				
				
				//move the logo to the upper righthand corner
			}
			
			/*
			function to resize the map when the app resizes
			*/
			private function onResize(e:ResizeEvent):void {
				//resize the map when the app does
				if (this.map) this.map.size = new Size(this.width,this.height);
			}
			
			
			/*
			function to remove all shapes (pois,routes,traffic,overlays) from the map
			*/
			public function removeShapesFromMap():void {
				//trace("Removing shapes from map");
				
				if (this.map.getShapeCollection("routeRibbon")) {
					this.removeShapesAndColls(this.map.getShapeCollection("routeRibbon"));
					this.map.removeShapeCollection(this.map.getShapeCollection("routeRibbon"));
				}
				if (this.map.getShapeCollection("searchShapeCollection")) {
					this.removeShapesAndColls(this.map.getShapeCollection("searchShapeCollection"));
					this.map.removeShapeCollection(this.map.getShapeCollection("searchShapeCollection"));
				}
				if (this.traffic) {
					this.disableTraffic();
				}
				
				this.removeShapesAndColls(this.map.getShapeCollection());
			}
			/*
			since we're mobile, do this to free up memory faster instead of waiting for gc
			*/
			private function removeShapesAndColls(coll:ShapeCollection):void {
				var s:IShape;
				
				for (var i:int = 0; i < coll.length; i++) {
					s = coll.getShapeAtIndex(i);
					coll.remove(s);
					s = null;
				}
				
				coll = null;
			}	
			
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
 			{
				trace("Handling application activate event");
				stage.frameRate=60; 
			}

			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				System.gc();
				stage.frameRate=2;
			}

			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}

			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}

			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}

			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
				//
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:MultiDPIBitmapSource id="cardimg"
								source160dpi="@Embed('assets/blank.png')"
								source240dpi="@Embed('assets/blank.png')"
								source320dpi="@Embed('assets/blank.png')"/>
		
	</fx:Declarations>
</s:ViewNavigatorApplication>