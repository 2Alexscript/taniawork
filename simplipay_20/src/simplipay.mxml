<?xml version="1.0" encoding="utf-8"?>
<s:TabbedViewNavigatorApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
								  xmlns:s="library://ns.adobe.com/flex/spark"
								  xmlns:maps="com.google.maps.*"
								  applicationComplete="onApplicationComplete()" applicationDPI="160"
								  fontFamily="ubuntu" persistNavigatorState="false"
								  splashScreenImage="DynamicSplashScreen">
	<fx:Style >
		@namespace s "library://ns.adobe.com/flex/spark";
		@font-face {
			src: url("font/Ubuntu-R.ttf");
			fontFamily: "ubuntu";
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("font/Ubuntu-B.ttf");
			fontFamily: "ubuntu";
			fontWeight: bold;
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("font/Ubuntu-BI.ttf");
			fontFamily: "ubuntu";
			fontWeight: bold;
			fontStyle: "italic";
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("font/Ubuntu-RI.ttf");
			fontFamily: "ubuntu";
			fontStyle: "italic";
			embedAsCFF: false;
		}
		
		@font-face {
			src: url("font/Ubuntu-R.ttf");
			fontFamily: "ubuntuCFF";
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("font/Ubuntu-B.ttf");
			fontFamily: "ubuntuCFF";
			fontWeight: bold;
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("font/Ubuntu-BI.ttf");
			fontFamily: "ubuntuCFF";
			fontWeight: bold;
			fontStyle: "italic";
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("font/Ubuntu-RI.ttf");
			fontFamily: "ubuntuCFF";
			fontStyle: "italic";
			embedAsCFF: true;
		}
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace esri "http://www.esri.com/2008/ags";
		@namespace components "components.*";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace local "*";
		s|TextInput {
			skinClass: ClassReference("spark.skins.mobile.TextInputSkin");
			showPromptWhenFocused:false;
		}
		s|TextArea {
			skinClass: ClassReference("spark.skins.mobile.TextAreaSkin");
		}
		s|Label
		{
			fontFamily: "ubuntuCFF";
		}
	
		
		s|LabelItemRenderer
		{
			fontFamily: "ubuntu";
		}
		
		s|ActionBar
		{	
			defaultButtonAppearance: normal;
			skinClass: ClassReference("spark.skins.mobile.ActionBarSkin");
			textShadowAlpha: .65;
			textShadowColor: #000000;
			paddingLeft: 0;
			fontFamily: "ubuntu";
			paddingRight: 0;
			paddingTop: 2;
			chromeColor: #0a4c77;
			titleAlign: center;
		}
		s|ActionBar #titleDisplay
		{
			color: #c0cad3; /* default color is white */
			fontSize: 20;
			fontFamily: "ubuntu";
		}
		s|TabbedViewNavigator #tabBar
		{
			chromeColor: #d26d1e;
			color: #d7c9b9;
			fontSize: 12;
			fontWeight: normal;
			skinClass: ClassReference("skins.TabbedViewNavigatorTabBarSkin");
			iconPlacement: top;
			interactionMode: mouse;
			fontFamily: "ubuntu";
			textShadowAlpha: 0;

			
		}
		s|TabbedViewNavigator s|ButtonBarButton:upAndSelected,
		s|TabbedViewNavigator s|ButtonBarButton:overAndSelected,
		s|TabbedViewNavigator s|ButtonBarButton:downAndSelected
		{
			chromeColor: #d7c9b9;
			color: #e8d9c8;
		}
		
		s|TabbedViewNavigator s|ButtonBarButton:up
		{
			color: #e8d9c8;
		}
		
		@media (application-dpi: 240)
		{
			s|TabbedViewNavigator #tabBar
			{
				fontSize: 14;
			}
		}
		
		@media (application-dpi: 320)
		{
			s|TabbedViewNavigator #tabBar
			{
				fontSize: 20;
			}
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[
			import flash.events.Event;
			import flash.events.GeolocationEvent;
			import flash.events.UncaughtErrorEvent;
			import flash.sensors.Geolocation;
			
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import spark.components.BusyIndicator;
			import spark.components.ButtonBar;
			import spark.components.View;
			import spark.effects.Resize;
			public var gps:Geolocation;
			public var imgSize:int;
			[Bindable]
			public var assetPath:String;
			public var biBusyIndicator:BusyIndicator;	
			public var searchLocation:String;
			public var searchTerm:String;
			public var directionsLocations:Array;
			[Bindable]
			public var s:Class = views.Stores;
			protected function onApplicationComplete():void
			{
				if (stage.autoOrients)
				{
					this.stage.addEventListener(StageOrientationEvent.ORIENTATION_CHANGE, onOrientationChange);
				}
			
			
				tabbedNavigator.tabBar.height = 50;
				// Request to be notified when the display state changes (minimized, maximized)
				addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING, onDisplayStateChange);
				//this.tabHost.getTabWidget().setStripEnabled(false);
				// Request to be notified when this application is activated (brought forward as the active window)
				// or deactivated
				NativeApplication.nativeApplication.addEventListener(Event.ACTIVATE, onActivate);
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivate);

				// Invoke listener - request to be notified when the AIR app is invoked (started), this could occur from the command line, UI or
				// from opening an associated file
				NativeApplication.nativeApplication.addEventListener(InvokeEvent.INVOKE, onInvoke);

				// Get notified whan a global error occurs
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, onError);

				// Capture exiting event
				NativeApplication.nativeApplication.addEventListener(Event.EXITING,onAppExiting);

				// Set the idle mode to KEEP AWAKE
				NativeApplication.nativeApplication.systemIdleMode = SystemIdleMode.KEEP_AWAKE;
				
				//select the icon set we're going to use based on the application dpi
				switch(this.applicationDPI) {
					case 160:
						this.imgSize = 45;
						break;
					case 240:
						this.imgSize = 60;
						break;
					case 320:
						this.imgSize = 90;
						break;
				}
				this.assetPath = "assets/" + this.imgSize + "/";
				this.splashScreenImage = null;
				
				
			}
			// Handle device orientation changes
			protected function onOrientationChange(event:StageOrientationEvent):void
			{
				trace("Orientation changed from " + event.beforeOrientation + " to " + event.afterOrientation);
				switch (event.afterOrientation)
				{
					case StageOrientation.DEFAULT:
						trace("Default orientation");
						break;
					case StageOrientation.ROTATED_RIGHT:
						trace("Rotated right");
						break;
					case StageOrientation.ROTATED_LEFT:
						trace("Rotated left");
						break;
					case StageOrientation.UPSIDE_DOWN:
						trace("Upside down");
						break;
					case StageOrientation.UNKNOWN:
						trace("Unknown");
						break;
				}
			}

			// The application display state has changed
			protected function onDisplayStateChange(e:NativeWindowDisplayStateEvent):void
			{
				trace("Display State Changed from " + e.beforeDisplayState + " to " + e.afterDisplayState);
			}

			// The application is now in the foreground and active, restore the frameRate to the default
			protected function onActivate(event:Event):void
 			{
				trace("Handling application activate event");
				stage.frameRate=24; 
			}

			// Handle the application being sent to the background, garbage collect and lower frame rate to use less resources
			protected function onDeactivate(event:Event):void 
			{
				trace("Handling application deactivate event");
				System.gc();
				stage.frameRate=2;
			}

			// Called when application is first invoked
			protected function onInvoke(invokeEvt:InvokeEvent):void 
			{
				trace("Handling invoke event");
			}

			// Handle Global Errors
			protected function onError(e:UncaughtErrorEvent):void
			{
    			e.preventDefault();
    			trace("An error has occurred and been caught by the global error handler: " + e.error.toString(), "My Global Error Handler");
			}

			// Called when application exits
			protected function onAppExiting(e:Event):void
			{
				trace("Handling application exit event");
			}

			// Called when application is about to persist data (can call cancel if this is not desired)
			protected function onPersisting(e:FlexEvent):void
			{
				trace("Handling persisting event");
			}

			// Called when application is about to restore data (can call cancel if this is not desired)
			protected function onRestoring(e:FlexEvent):void
			{
				trace("Handling restoring event");
				//
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	
	</fx:Declarations>
	<s:ViewNavigator id="home"  label="Home"   firstView='views.Home'  
					 icon="@Embed('assets/homeimages/home-home.png')"  width="100%" height="100%"/>
	<s:ViewNavigator id="pay" label='Pay'  firstView='views.MyAccount' 
					 icon="@Embed('assets/homeimages/home-card.png')"     width="100%" height="100%"/>
	<s:ViewNavigator id="loyalty" label='Loyalty' firstView='views.Loyalty' 
					 icon="@Embed('assets/homeimages/home-loyalty.png')"    width="100%" height="100%"/>
	<s:ViewNavigator id="stores" label='Stores'  firstView='views.Stores' 
					 icon="@Embed('assets/homeimages/home-stores.png')"   width="100%" height="100%"/>
	
	
</s:TabbedViewNavigatorApplication>