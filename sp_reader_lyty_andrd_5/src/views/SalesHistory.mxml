<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" visible="true"
		xmlns:s="library://ns.adobe.com/flex/spark" 
		backgroundColor="#f5f6f7"
		 viewActivate="activate()"
		 actionBarVisible="true" title="Sales History"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:components="components.*" >
	<s:navigationContent>
		<s:Image x="0" y="-2" click="navigator.popView();"
				>
			<s:source>
				<s:MultiDPIBitmapSource source160dpi="@Embed('assets/back_Low.png')"
										source240dpi="@Embed('assets/back_Med.png')"
										source320dpi="@Embed('assets/back_High.png')"/>
			</s:source>
		</s:Image>
	</s:navigationContent>
	<s:actionContent>	
		<s:CalloutButton id="sortBTN" label="Sort" calloutDestructionPolicy="never" color="#000000"
						 horizontalPosition="before" verticalPosition="after">
			<s:calloutLayout>
				<s:VerticalLayout paddingTop="2" paddingBottom="2" paddingLeft="2" 
								  paddingRight="2" horizontalAlign="center" gap="3"/>
			</s:calloutLayout>
			<s:calloutContent>
				<s:Button id="sort1" width="100%" label="Total" enabled="true"  click="filterPress(0);"/>
				<s:Button id="sort2"  width="100%" label="Day" enabled="true"   click="filterPress(1);"/>
				<s:Button id="sort3"  width="100%" label="Location" enabled="true"  click="filterPress(2);"/>
			</s:calloutContent>
		</s:CalloutButton>
	</s:actionContent>
	<fx:Script>
		 <![CDATA[
			 import flash.data.SQLConnection;
			 import flash.data.SQLStatement;
			 
			 import mx.collections.ArrayCollection;
			 import mx.collections.Sort;
			 import mx.collections.SortField;
			 import mx.core.UIComponent;
			 import mx.effects.Fade;
			 import mx.effects.effectClasses.FadeInstance;
			 import mx.events.FlexEvent;
			 import mx.events.PropertyChangeEvent;
			 import mx.events.ResizeEvent;
			 import mx.rpc.events.ResultEvent;
			 import spark.filters.GlowFilter;
			 import spark.collections.SortField;
			 import spark.components.supportClasses.StyleableTextField;
			 import spark.events.IndexChangeEvent;
			 import spark.events.ListEvent;
			 import spark.events.ViewNavigatorEvent;
			 [Bindable]
			 public var listData:ArrayCollection = new ArrayCollection();
			 [Bindable]
			 public var mysearch:String = "";
			 [Bindable]
			 public var emailGo:String = "";
			 [Bindable]
			 public var sortMode:Number = 0;
			 [Bindable]
			 public var reverse:Boolean = false;
			 protected var sqlConnection:SQLConnection;
			 [Bindable]
			 public var busy:Boolean = true;
			 [Bindable]
			 public var merchidout:String = "";
			 public function filterPress(u:uint):void {
				 sortBTN.closeDropDown();
				 var dataSortField:mx.collections.SortField = new mx.collections.SortField();
				 var dataSortField2:mx.collections.SortField = new mx.collections.SortField();
				 var dataSortField3:mx.collections.SortField = new mx.collections.SortField();
				 var dataSortField4:mx.collections.SortField = new mx.collections.SortField();

				 var numericDataSort:Sort = new Sort();
				 var stringDataSort:Sort = new Sort();
				 if (sortMode == u){
					 if (reverse){
						 reverse = false;
					 }
					 else {
						 reverse = true;
					 }
				 }
				 else {
					 reverse = false;
				 }
				 
				 dataSortField.descending = reverse;
				 dataSortField2.descending = reverse;
				 dataSortField3.descending = reverse;
				 
				 sortMode = u;
				 
				 
				 if (u == 0){
					 dataSortField.name = "total";
					 dataSortField.numeric = true;
					 
					 numericDataSort.fields = [dataSortField];
					 listData.sort = numericDataSort;
					 
				 }
				 else if (u == 1){
					 dataSortField.name = "day";
					 dataSortField.numeric = true;
					 dataSortField2.name = "month";
					 dataSortField2.numeric = true;
					 dataSortField3.name = "year";
					 dataSortField3.numeric = true;
					 dataSortField4.name = "time";
					 dataSortField4.numeric = false;
					 numericDataSort.fields = [dataSortField4,dataSortField,dataSortField2,dataSortField3];
					 listData.sort = numericDataSort;
					 
					 
				 }
				 else if (u == 2){
					 dataSortField.name = "locationname";
					 dataSortField.numeric = false;
					 stringDataSort.fields = [dataSortField];
					 listData.sort = stringDataSort;
					 
				 }
				 listData.refresh();
				 recieptList.dataProvider = listData;
			 }
			 protected function activate():void
			 {
				 busy = true;
				 try{
					 operation1('france');
				 }
				 catch(e:Error){
				 }	
			 }	
			 protected function onPropertyChange(event:PropertyChangeEvent):void
			 {
				 if (event.source == event.target && event.property == "verticalScrollPosition")
				 {
					 
					 var vScroll:Number = recieptList.dataGroup.verticalScrollPosition;
					 if(vScroll < -20){
						 trace(vScroll);
						 if(!loadingGroup.visible){
							 loadingGroup.visible = true;
							 fadeIn.play();
						 }
						 loadingGroup.y = vScroll*-1 - 60;
						 
						 if(vScroll < -90){
							 trace(arrowImage.rotation);
							 if(arrowImage.rotation == 0)  {
								 arrowImage.rotation = 180;
							 }
							 loadText.text = "Release to refesh...";
							 
						 }else{
							 if(arrowImage.rotation == 180)  {
								 arrowImage.rotation = 0;
							 }
							 loadText.text = "Pull down to refresh";
						 }
						 
					 }else{
						 loadingGroup.visible = false;
					 }
				 }
			 }
			 public function init(event:FlexEvent):void
			 {			
			 }
			 public function aftergetReciepts(event:ResultEvent):void
			 {
				 busy = false;
				 listData = new ArrayCollection();
				 try{
					 
					 listData = event.result[0].ress.res;
					 recieptList.dataProvider = listData;
				 }
				 catch(e:Error){
					 try{
						 listData.addItem(event.result[0].ress.res);
						 recieptList.dataProvider = listData;
					 }
					 catch(e:Error){
						 
					 }
				 }
				 
				 
				 filterPress(sortMode);
				 
			 } 
			 public function aftersearchReciepts(event:ResultEvent):void
			 {
				 var stop:String = "";
				 listData = new ArrayCollection();
				 try{
					 listData = event.result[0].res.re;
					 recieptList.dataProvider = listData;
				 }
				 catch(e:Error){
					 try{
						 listData.addItem(event.result[0].res.re);
						 recieptList.dataProvider = listData;
					 }
					 catch(e:Error){
						 //todo coming soon
					 }
				 }
			 }
			 public function recieptListChange(ev:IndexChangeEvent):void {
				 var stop:String = "";
				 if (ev.newIndex != -1){
					 navigator.pushView(recieptDescription, ev.currentTarget.selectedItems[0]);					
				 }	
			 }
			 protected function operation1(q:String):void
			 {
				 merchidout = data.merchid.toString();
				 getReciepts.send();	
			 }
			 protected function list_mouseUpHandler(event:MouseEvent):void
			 {
				 try{
					 if(recieptList.scroller.verticalScrollBar.value < -90){
						 loadingGroup.visible = false;
						// listData.addItemAt({text:"loading..."},0);
						 operation1('france');
					 }
				 }
				 catch(e:Error){	
				 }
			 }
			 protected function list_mouseMoveHandler(event:MouseEvent):void
			 {
				 try{
					 var vScroll:Number = recieptList.scroller.verticalScrollBar.value;
					 if(vScroll < -20){
						 trace(vScroll);
						 if(!loadingGroup.visible){
							 loadingGroup.visible = true;
							 fadeIn.play();
						 }
						 loadingGroup.y = vScroll*-1 - 60;
						 
						 if(vScroll < -90){
							 trace(arrowImage.rotation);
							 if(arrowImage.rotation == 0)  {
								 arrowImage.rotation = 180;
							 }
							 loadText.text = "Release to refesh...";
							 
						 }else{
							 if(arrowImage.rotation == 180)  {
								 arrowImage.rotation = 0;
							 }
							 loadText.text = "Pull down to refresh";
						 }
						 
					 }else{
						 loadingGroup.visible = false;
					 }
				 }
				 catch(e:Error){
					 
				 }
			 }
			 public function searchClick():void
			 {	
				 //filter the list
				 
				 listData.filterFunction = filterCompleted;
				 listData.refresh();
				 recieptList.dataProvider = listData;
				 var s:String = "";
				 s.toLowerCase()
			 }
			 private function filterCompleted(item:Object):Boolean{
				 if((item.price.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					 (item.total.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					 (item.business_name.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					 (item.day.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					 (item.year.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1)||
					 (item.month.toString().toLowerCase().indexOf(key.text.toLowerCase()) != -1))
					 return true;
				 return false;
			 }
			 public function tOver(ev:MouseEvent):void {
				 ev.currentTarget.setStyle("textDecoration","underline");
			 }
			 public function tOut(ev:MouseEvent):void {
				 ev.currentTarget.setStyle("textDecoration","none");
			 }
			 public function press(event:KeyboardEvent):void {
				 searchClick();
			 }
			 
			 protected function backKeyHandler():void
			 {
				 // TODO Auto-generated method stub
				 navigator.popView();
			 }
			 
			 public function profDown(ev:MouseEvent):void {
				 var gl:spark.filters.GlowFilter = new GlowFilter(000000,0.6,10,10,15,1,true);
				 ev.currentTarget.filters = [gl];
			 }
			 public function profUp(ev:MouseEvent):void {
				 ev.currentTarget.filters = [];
				 var s:String = "";
				 
			 }
			 public function gOver(ev:MouseEvent):void {
				 var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				 ev.currentTarget.filters = [gl];
			 }
			 public function gDown(ev:MouseEvent):void {
				 var gl:GlowFilter = new GlowFilter(000000,0.4,20,20,5,1,true);
				 ev.currentTarget.filters = [gl];
			 }
			 public function gOut(ev:MouseEvent):void {
				 ev.currentTarget.filters = [];
			 }
		 ]]>
	 </fx:Script>
	<fx:Declarations>
		<s:HTTPService id="getReciepts" method="GET" resultFormat="array"
					   url="https://simplipay.ca/php/transaction/getTransactionsMobileMerchant.php"
					   result="aftergetReciepts(event)" >
			<s:request xmlns="">
				<merchid>{merchidout}</merchid>
			</s:request>
		</s:HTTPService>
		<s:Fade id='fadeIn' target="{loadingGroup}" duration="500" alphaFrom="0" alphaTo="1"/>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" horizontalAlign="center">
		<s:BorderContainer x="0" y="0"  borderVisible="false" backgroundAlpha="1" borderAlpha="0"
						   dropShadowVisible="false" backgroundColor="#f5f6f7" width="100%">
			<s:HGroup width="100%" horizontalAlign="center" paddingLeft="5" paddingRight="5" verticalAlign="middle" height="100%">
				<s:TextInput  softKeyboardActivating="setStyle('fontFamily', 'Arial')"   softKeyboardDeactivate="setStyle('fontFamily', 'ubuntu')" id="key" left="5" right="5" top="1" width="100%" height="75%"
							 enter="searchClick();" keyUp="press(event);" prompt="Search Reciepts"
							 returnKeyLabel="search"/>
				<!--s:TextInput id="key" left="5" right="5" top="1" width="100%" height="25"
				enter="searchClick();" keyUp="press(event);" prompt="Search Stores"
				returnKeyLabel="search" skinClass="components.searchinput"/-->
				<s:Image click="searchClick();" mouseDown="profDown(event)" mouseUp="profUp(event)">
					<s:source>
						<s:MultiDPIBitmapSource source160dpi="@Embed('assets/searchLow.png')"
												source240dpi="@Embed('assets/searchMed.png')"
												source320dpi="@Embed('assets/searchHigh.png')"/>
					</s:source>
				</s:Image>
			</s:HGroup>
		</s:BorderContainer>
		<s:Group width="100%" height="100%">
			<s:BorderContainer  backgroundColor="#f5f6f7" backgroundAlpha="1" top="0" bottom="0" borderAlpha="0" width="100%"  >
				<s:List id="recieptList"  width="100%" top="0" bottom="0" change="recieptListChange(event);"
						contentBackgroundAlpha="1" contentBackgroundColor="#f5f6f7" dataProvider="{listData}"
						horizontalCenter="0" itemRenderer="components.recieptResult" labelField="name"
						mouseMove="list_mouseMoveHandler(event)" mouseUp="list_mouseUpHandler(event)"
						selectedIndex="1">	
					<s:layout>
						<s:VerticalLayout gap="5">
						</s:VerticalLayout>
					</s:layout>
				</s:List>
				<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" id="loadingGroup" visible="false" height="50">
					<s:Image id="arrowImage"  source="@Embed('assets/Arrow-double-up-48.png')"/>
					<s:Label text="Pull down to refresh"  id="loadText"/>
				</s:HGroup>	
			</s:BorderContainer>
		</s:Group>
	</s:VGroup>
	<s:BusyIndicator visible="{busy}" verticalCenter="0" horizontalCenter="0"/>
</s:View>